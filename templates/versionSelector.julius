function getJSON(url, callback) {
  var req = new XMLHttpRequest()
  req.open('GET', url, true)
  req.onload = function() { 
    callback(JSON.parse(this.responseText))
  }
  req.send(null)
}

// Create a single <option> element, given a function to apply to the version
// to display it, and a 2-element array of [version, url].
function renderOption(fn, x) {
  var version = x[0]
  var url = x[1]

  var el = document.createElement("option")
  var text = document.createTextNode(fn(version))
  el.appendChild(text)

  el.setAttribute("value", url)

  // Set the 'selected' attribute on the current version
  if (version === "#{rawJS (showVersion version)}") {
    el.setAttribute('selected', null)
  }

  return el
}

// Returns an array of <option> elements which should be added to the version
// selector. Warning: mutates the argument.
function renderOptions(versions) {
  versions.sort(function(x, y) { return x[0].localeCompare(y[0]) }).reverse()
  return versions.map(function(x, index) {
    if (index === 0) {
      return renderOption(function(str) { return "latest (" + str + ")" }, x)
    } else {
      return renderOption(function(str) { return str }, x)
    }
  })
}

// Set an onchange handler so that selecting a version in the <select>
// will navigate to the new page
var selectorId = "#{rawJS versionSelectorIdent}"
var selector = document.getElementById(selectorId)
selector.onchange = function() {
  window.location.href = this.value
}

// Load the <option> elements via AJAX
getJSON("#{rawJS availableVersionsUrl}", function(data) {
  // Delete the placeholder <option>
  selector.removeChild(selector.firstChild)

  // Add the <option> elements that we got via AJAX to the <select>
  renderOptions(data).forEach(function(option) {
    selector.appendChild(option)
  })
})
