{"uploader":null,"packageMeta":{"homepage":"https://github.com/purescript/purescript-prelude","repository":{"url":"git://github.com/purescript/purescript-prelude.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","gulpfile.js","package.json"],"name":"purescript-prelude","keywords":["purescript"],"description":"The PureScript Prelude"},"modules":[{"name":"Prelude","comments":null,"declarations":[{"children":[{"comments":null,"title":"semigroupUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semigroupUnit"],["space"],["syntax","::"],["space"],["ctor","Semigroup","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[405,1],"name":"src/Prelude.purs","end":[408,1]}},{"comments":null,"title":"semiringUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semiringUnit"],["space"],["syntax","::"],["space"],["ctor","Semiring","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[459,1],"name":"src/Prelude.purs","end":[466,1]}},{"comments":null,"title":"ringUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ringUnit"],["space"],["syntax","::"],["space"],["ctor","Ring","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[496,1],"name":"src/Prelude.purs","end":[500,1]}},{"comments":null,"title":"moduloSemiringUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","moduloSemiringUnit"],["space"],["syntax","::"],["space"],["ctor","ModuloSemiring","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[530,1],"name":"src/Prelude.purs","end":[535,1]}},{"comments":null,"title":"divisionRingUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","divisionRingUnit"],["space"],["syntax","::"],["space"],["ctor","DivisionRing","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[554,1],"name":"src/Prelude.purs","end":[562,1]}},{"comments":null,"title":"numUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","numUnit"],["space"],["syntax","::"],["space"],["ctor","Num","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[565,1],"name":"src/Prelude.purs","end":[567,1]}},{"comments":null,"title":"eqUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqUnit"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[602,1],"name":"src/Prelude.purs","end":[605,1]}},{"comments":null,"title":"ordUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordUnit"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[651,1],"name":"src/Prelude.purs","end":[654,1]}},{"comments":null,"title":"boundedUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedUnit"],["space"],["syntax","::"],["space"],["ctor","Bounded","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[719,1],"name":"src/Prelude.purs","end":[723,1]}},{"comments":null,"title":"latticeUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","latticeUnit"],["space"],["syntax","::"],["space"],["ctor","Lattice","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[763,1],"name":"src/Prelude.purs","end":[767,1]}},{"comments":null,"title":"boundedLatticeUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedLatticeUnit"],["space"],["syntax","::"],["space"],["ctor","BoundedLattice","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[797,1],"name":"src/Prelude.purs","end":[810,1]}},{"comments":null,"title":"complementedLatticeUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","complementedLatticeUnit"],["space"],["syntax","::"],["space"],["ctor","ComplementedLattice","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[816,1],"name":"src/Prelude.purs","end":[819,1]}},{"comments":null,"title":"distributiveLatticeUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","distributiveLatticeUnit"],["space"],["syntax","::"],["space"],["ctor","DistributiveLattice","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[831,1],"name":"src/Prelude.purs","end":[838,1]}},{"comments":null,"title":"booleanAlgebraUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","booleanAlgebraUnit"],["space"],["syntax","::"],["space"],["ctor","BooleanAlgebra","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[841,1],"name":"src/Prelude.purs","end":[849,1]}},{"comments":null,"title":"showUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showUnit"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[868,1],"name":"src/Prelude.purs","end":[871,1]}}],"code":[["keyword","newtype"],["space"],["ctor","Unit",null]],"comments":"The `Unit` type has a single inhabitant, called `unit`. It represents\nvalues with no computational content.\n\n`Unit` is often used, wrapped in a monadic type constructor, as the\nreturn type of a computation where only\nthe _effects_ are important.\n","title":"Unit","fixity":null,"sourceSpan":{"start":[38,1],"name":"src/Prelude.purs","end":[41,1]}},{"children":[],"code":[["ident","unit"],["space"],["syntax","::"],["space"],["ctor","Unit","Prelude"]],"comments":"`unit` is the sole inhabitant of the `Unit` type.\n","title":"unit","fixity":null,"sourceSpan":{"start":[41,1],"name":"src/Prelude.purs","end":[42,1]}},{"children":[],"code":[["ident","($)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"]],"comments":"Applies a function to its argument.\n\n```purescript\nlength $ groupBy productCategory $ filter isInStock $ products\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\n`($)` is different from [`(#)`](#-2) because it is right-infix instead of\nleft: `a $ b $ c $ d x = a $ (b $ (c $ (d $ x))) = a (b (c (d x)))`\n","title":"($)","fixity":{"associativity":"infixr","precedence":0},"sourceSpan":{"start":[61,1],"name":"src/Prelude.purs","end":[62,1]}},{"children":[],"code":[["ident","(#)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["ident","a"],["space"],["syntax","->"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","b"]],"comments":"Applies an argument to a function.\n\n```purescript\nproducts # filter isInStock # groupBy productCategory # length\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\n`(#)` is different from [`($)`](#-1) because it is left-infix instead of\nright: `x # a # b # c # d = (((x # a) # b) # c) # d = d (c (b (a x)))`\n","title":"(#)","fixity":{"associativity":"infixl","precedence":1},"sourceSpan":{"start":[78,1],"name":"src/Prelude.purs","end":[79,1]}},{"children":[],"code":[["ident","flip"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","c"],["syntax","."],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["space"],["syntax","->"],["space"],["ident","c"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","b"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","c"]],"comments":"Flips the order of the arguments to a function of two arguments.\n\n```purescript\nflip const 1 2 = const 2 1 = 2\n```\n","title":"flip","fixity":null,"sourceSpan":{"start":[86,1],"name":"src/Prelude.purs","end":[87,1]}},{"children":[],"code":[["ident","const"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":"Returns its first argument and ignores its second.\n\n```purescript\nconst 1 \"hello\" = 1\n```\n","title":"const","fixity":null,"sourceSpan":{"start":[94,1],"name":"src/Prelude.purs","end":[95,1]}},{"children":[],"code":[["ident","asTypeOf"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":"This function returns its first argument, and can be used to assert type\nequalities. This can be useful when types are otherwise ambiguous.\n\n```purescript\nmain = print $ [] `asTypeOf` [0]\n```\n\nIf instead, we had written `main = print []`, the type of the argument\n`[]` would have been ambiguous, resulting in a compile-time error.\n","title":"asTypeOf","fixity":null,"sourceSpan":{"start":[106,1],"name":"src/Prelude.purs","end":[107,1]}},{"children":[],"code":[["ident","otherwise"],["space"],["syntax","::"],["space"],["ctor","Boolean",null]],"comments":"An alias for `true`, which can be useful in guard clauses:\n\n```purescript\nmax x y | x >= y    = x\n        | otherwise = y\n```\n","title":"otherwise","fixity":null,"sourceSpan":{"start":[115,1],"name":"src/Prelude.purs","end":[116,1]}},{"children":[{"comments":null,"title":"compose","info":{"contextualType":[["ident","compose"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","b"],["space"],["ident","c"],["space"],["ident","d"],["syntax","."],["space"],["ident","a"],["space"],["ident","c"],["space"],["ident","d"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","c"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","d"]],"declType":"typeClassMember","type":[["ident","compose"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","b"],["space"],["ident","c"],["space"],["ident","d"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Semigroupoid",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["ident","c"],["space"],["ident","d"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","c"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","d"]]},"sourceSpan":null},{"comments":null,"title":"semigroupoidFn","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semigroupoidFn"],["space"],["syntax","::"],["space"],["ctor","Semigroupoid","Prelude"],["space"],["ctor","Function","Prim"]]},"sourceSpan":{"start":[133,1],"name":"src/Prelude.purs","end":[136,1]}}],"code":[["keyword","class"],["space"],["ctor","Semigroupoid",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"A `Semigroupoid` is similar to a [`Category`](#category) but does not\nrequire an identity element `id`, just composable morphisms.\n\n`Semigroupoid`s must satisfy the following law:\n\n- Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`\n\nOne example of a `Semigroupoid` is the function type constructor `(->)`,\nwith `(<<<)` defined as function composition.\n","title":"Semigroupoid","fixity":null,"sourceSpan":{"start":[130,1],"name":"src/Prelude.purs","end":[133,1]}},{"children":[],"code":[["ident","(<<<)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","c"],["space"],["ident","d"],["syntax","."],["space"],["syntax","("],["ctor","Semigroupoid","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["ident","c"],["space"],["ident","d"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","c"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","d"]],"comments":null,"title":"(<<<)","fixity":{"associativity":"infixr","precedence":9},"sourceSpan":{"start":[136,1],"name":"src/Prelude.purs","end":[137,1]}},{"children":[],"code":[["ident","(>>>)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","c"],["space"],["ident","d"],["syntax","."],["space"],["syntax","("],["ctor","Semigroupoid","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","c"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["ident","c"],["space"],["ident","d"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","d"]],"comments":"Forwards composition, or `(<<<)` with its arguments reversed.\n","title":"(>>>)","fixity":{"associativity":"infixr","precedence":9},"sourceSpan":{"start":[140,1],"name":"src/Prelude.purs","end":[141,1]}},{"children":[{"comments":null,"title":"id","info":{"contextualType":[["ident","id"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","t"],["syntax","."],["space"],["ident","a"],["space"],["ident","t"],["space"],["ident","t"]],"declType":"typeClassMember","type":[["ident","id"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","t"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Category",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["ident","t"],["space"],["ident","t"]]},"sourceSpan":null},{"comments":null,"title":"categoryFn","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","categoryFn"],["space"],["syntax","::"],["space"],["ctor","Category","Prelude"],["space"],["ctor","Function","Prim"]]},"sourceSpan":{"start":[154,1],"name":"src/Prelude.purs","end":[157,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Semigroupoid","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","Category",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"`Category`s consist of objects and composable morphisms between them, and\nas such are [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids`\nmust have an identity element.\n\nInstances must satisfy the following law in addition to the\n`Semigroupoid` law:\n\n- Identity: `id <<< p = p <<< id = p`\n","title":"Category","fixity":null,"sourceSpan":{"start":[151,1],"name":"src/Prelude.purs","end":[154,1]}},{"children":[{"comments":null,"title":"map","info":{"contextualType":[["ident","map"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","b"]],"declType":"typeClassMember","type":[["ident","map"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","f"],["syntax","."],["space"],["syntax","("],["ctor","Functor",null],["space"],["ident","f"],["syntax",")"],["space"],["syntax","=>"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","b"]]},"sourceSpan":null},{"comments":null,"title":"functorFn","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","functorFn"],["space"],["syntax","::"],["space"],["ctor","Functor","Prelude"],["space"],["syntax","("],["ctor","Function","Prim"],["space"],["ident","r"],["syntax",")"]]},"sourceSpan":{"start":[174,1],"name":"src/Prelude.purs","end":[177,1]}},{"comments":null,"title":"functorArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","functorArray"],["space"],["syntax","::"],["space"],["ctor","Functor","Prelude"],["space"],["ctor","Array","Prim"]]},"sourceSpan":{"start":[177,1],"name":"src/Prelude.purs","end":[180,1]}}],"code":[["keyword","class"],["space"],["ctor","Functor",null],["space"],["ident","f"],["space"],["keyword","where"]],"comments":"A `Functor` is a type constructor which supports a mapping operation\n`(<$>)`.\n\n`(<$>)` can be used to turn functions `a -> b` into functions\n`f a -> f b` whose argument and return types use the type constructor `f`\nto represent some computational context.\n\nInstances must satisfy the following laws:\n\n- Identity: `(<$>) id = id`\n- Composition: `(<$>) (f <<< g) = (f <$>) <<< (g <$>)`\n","title":"Functor","fixity":null,"sourceSpan":{"start":[171,1],"name":"src/Prelude.purs","end":[174,1]}},{"children":[],"code":[["ident","(<$>)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","f"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ctor","Functor","Prelude"],["space"],["ident","f"],["syntax",")"],["space"],["syntax","=>"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","b"]],"comments":null,"title":"(<$>)","fixity":{"associativity":"infixl","precedence":4},"sourceSpan":{"start":[182,1],"name":"src/Prelude.purs","end":[183,1]}},{"children":[],"code":[["ident","(<#>)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","f"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ctor","Functor","Prelude"],["space"],["ident","f"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","b"]],"comments":"`(<#>)` is `(<$>)` with its arguments reversed. For example:\n\n```purescript\n[1, 2, 3] <#> \\n -> n * n\n```\n","title":"(<#>)","fixity":{"associativity":"infixl","precedence":1},"sourceSpan":{"start":[190,1],"name":"src/Prelude.purs","end":[191,1]}},{"children":[],"code":[["ident","void"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","f"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Functor","Prelude"],["space"],["ident","f"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ctor","Unit","Prelude"]],"comments":"The `void` function is used to ignore the type wrapped by a\n[`Functor`](#functor), replacing it with `Unit` and keeping only the type\ninformation provided by the type constructor itself.\n\n`void` is often useful when using `do` notation to change the return type\nof a monadic computation:\n\n```purescript\nmain = forE 1 10 \\n -> void do\n  print n\n  print (n * n)\n```\n","title":"void","fixity":null,"sourceSpan":{"start":[205,1],"name":"src/Prelude.purs","end":[206,1]}},{"children":[{"comments":null,"title":"apply","info":{"contextualType":[["ident","apply"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["ident","f"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","b"]],"declType":"typeClassMember","type":[["ident","apply"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","f"],["syntax","."],["space"],["syntax","("],["ctor","Apply",null],["space"],["ident","f"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","f"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","b"]]},"sourceSpan":null},{"comments":null,"title":"applyFn","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","applyFn"],["space"],["syntax","::"],["space"],["ctor","Apply","Prelude"],["space"],["syntax","("],["ctor","Function","Prim"],["space"],["ident","r"],["syntax",")"]]},"sourceSpan":{"start":[235,1],"name":"src/Prelude.purs","end":[238,1]}},{"comments":null,"title":"applyArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","applyArray"],["space"],["syntax","::"],["space"],["ctor","Apply","Prelude"],["space"],["ctor","Array","Prim"]]},"sourceSpan":{"start":[238,1],"name":"src/Prelude.purs","end":[241,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Functor","Prelude"],["space"],["ident","f"],["syntax",") <="],["space"],["ctor","Apply",null],["space"],["ident","f"],["space"],["keyword","where"]],"comments":"The `Apply` class provides the `(<*>)` which is used to apply a function\nto an argument under a type constructor.\n\n`Apply` can be used to lift functions of two or more arguments to work on\nvalues wrapped with the type constructor `f`. It might also be understood\nin terms of the `lift2` function:\n\n```purescript\nlift2 :: forall f a b c. (Apply f) => (a -> b -> c) -> f a -> f b -> f c\nlift2 f a b = f <$> a <*> b\n```\n\n`(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts\nthe function application operator `($)` to arguments wrapped with the\ntype constructor `f`.\n\nInstances must satisfy the following law in addition to the `Functor`\nlaws:\n\n- Associative composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`\n\nFormally, `Apply` represents a strong lax semi-monoidal endofunctor.\n","title":"Apply","fixity":null,"sourceSpan":{"start":[232,1],"name":"src/Prelude.purs","end":[235,1]}},{"children":[],"code":[["ident","(<*>)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","f"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ctor","Apply","Prelude"],["space"],["ident","f"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","f"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","b"]],"comments":null,"title":"(<*>)","fixity":{"associativity":"infixl","precedence":4},"sourceSpan":{"start":[241,1],"name":"src/Prelude.purs","end":[242,1]}},{"children":[{"comments":null,"title":"pure","info":{"contextualType":[["ident","pure"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","pure"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","f"],["syntax","."],["space"],["syntax","("],["ctor","Applicative",null],["space"],["ident","f"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"applicativeFn","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","applicativeFn"],["space"],["syntax","::"],["space"],["ctor","Applicative","Prelude"],["space"],["syntax","("],["ctor","Function","Prim"],["space"],["ident","r"],["syntax",")"]]},"sourceSpan":{"start":[265,1],"name":"src/Prelude.purs","end":[268,1]}},{"comments":null,"title":"applicativeArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","applicativeArray"],["space"],["syntax","::"],["space"],["ctor","Applicative","Prelude"],["space"],["ctor","Array","Prim"]]},"sourceSpan":{"start":[268,1],"name":"src/Prelude.purs","end":[272,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Apply","Prelude"],["space"],["ident","f"],["syntax",") <="],["space"],["ctor","Applicative",null],["space"],["ident","f"],["space"],["keyword","where"]],"comments":"The `Applicative` type class extends the [`Apply`](#apply) type class\nwith a `pure` function, which can be used to create values of type `f a`\nfrom values of type `a`.\n\nWhere [`Apply`](#apply) provides the ability to lift functions of two or\nmore arguments to functions whose arguments are wrapped using `f`, and\n[`Functor`](#functor) provides the ability to lift functions of one\nargument, `pure` can be seen as the function which lifts functions of\n_zero_ arguments. That is, `Applicative` functors support a lifting\noperation for any number of function arguments.\n\nInstances must satisfy the following laws in addition to the `Apply`\nlaws:\n\n- Identity: `(pure id) <*> v = v`\n- Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`\n- Homomorphism: `(pure f) <*> (pure x) = pure (f x)`\n- Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`\n","title":"Applicative","fixity":null,"sourceSpan":{"start":[262,1],"name":"src/Prelude.purs","end":[265,1]}},{"children":[],"code":[["ident","return"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","m"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Applicative","Prelude"],["space"],["ident","m"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","a"]],"comments":"`return` is an alias for `pure`.\n","title":"return","fixity":null,"sourceSpan":{"start":[272,1],"name":"src/Prelude.purs","end":[273,1]}},{"children":[],"code":[["ident","liftA1"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","f"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ctor","Applicative","Prelude"],["space"],["ident","f"],["syntax",")"],["space"],["syntax","=>"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","f"],["space"],["ident","b"]],"comments":"`liftA1` provides a default implementation of `(<$>)` for any\n[`Applicative`](#applicative) functor, without using `(<$>)` as provided\nby the [`Functor`](#functor)-[`Applicative`](#applicative) superclass\nrelationship.\n\n`liftA1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftA1\n```\n","title":"liftA1","fixity":null,"sourceSpan":{"start":[287,1],"name":"src/Prelude.purs","end":[288,1]}},{"children":[{"comments":null,"title":"bind","info":{"contextualType":[["ident","bind"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["ident","m"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","b"]],"declType":"typeClassMember","type":[["ident","bind"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["space"],["ident","b"],["space"],["ident","m"],["syntax","."],["space"],["syntax","("],["ctor","Bind",null],["space"],["ident","m"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","m"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","b"]]},"sourceSpan":null},{"comments":null,"title":"bindFn","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","bindFn"],["space"],["syntax","::"],["space"],["ctor","Bind","Prelude"],["space"],["syntax","("],["ctor","Function","Prim"],["space"],["ident","r"],["syntax",")"]]},"sourceSpan":{"start":[321,1],"name":"src/Prelude.purs","end":[324,1]}},{"comments":null,"title":"bindArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","bindArray"],["space"],["syntax","::"],["space"],["ctor","Bind","Prelude"],["space"],["ctor","Array","Prim"]]},"sourceSpan":{"start":[324,1],"name":"src/Prelude.purs","end":[327,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Apply","Prelude"],["space"],["ident","m"],["syntax",") <="],["space"],["ctor","Bind",null],["space"],["ident","m"],["space"],["keyword","where"]],"comments":"The `Bind` type class extends the [`Apply`](#apply) type class with a\n\"bind\" operation `(>>=)` which composes computations in sequence, using\nthe return value of one computation to determine the next computation.\n\nThe `>>=` operator can also be expressed using `do` notation, as follows:\n\n```purescript\nx >>= f = do y <- x\n             f y\n```\n\nwhere the function argument of `f` is given the name `y`.\n\nInstances must satisfy the following law in addition to the `Apply`\nlaws:\n\n- Associativity: `(x >>= f) >>= g = x >>= (\\k => f k >>= g)`\n\nAssociativity tells us that we can regroup operations which use `do`\nnotation so that we can unambiguously write, for example:\n\n```purescript\ndo x <- m1\n   y <- m2 x\n   m3 x y\n```\n","title":"Bind","fixity":null,"sourceSpan":{"start":[318,1],"name":"src/Prelude.purs","end":[321,1]}},{"children":[],"code":[["ident","(>>=)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","m"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ctor","Bind","Prelude"],["space"],["ident","m"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","m"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","b"]],"comments":null,"title":"(>>=)","fixity":{"associativity":"infixl","precedence":1},"sourceSpan":{"start":[329,1],"name":"src/Prelude.purs","end":[330,1]}},{"children":[{"comments":null,"title":"monadFn","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","monadFn"],["space"],["syntax","::"],["space"],["ctor","Monad","Prelude"],["space"],["syntax","("],["ctor","Function","Prim"],["space"],["ident","r"],["syntax",")"]]},"sourceSpan":{"start":[344,1],"name":"src/Prelude.purs","end":[345,1]}},{"comments":null,"title":"monadArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","monadArray"],["space"],["syntax","::"],["space"],["ctor","Monad","Prelude"],["space"],["ctor","Array","Prim"]]},"sourceSpan":{"start":[345,1],"name":"src/Prelude.purs","end":[358,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Applicative","Prelude"],["space"],["ident","m"],["syntax",","],["space"],["ctor","Bind","Prelude"],["space"],["ident","m"],["syntax",") <="],["space"],["ctor","Monad",null],["space"],["ident","m"]],"comments":"The `Monad` type class combines the operations of the `Bind` and\n`Applicative` type classes. Therefore, `Monad` instances represent type\nconstructors which support sequential composition, and also lifting of\nfunctions of arbitrary arity.\n\nInstances must satisfy the following laws in addition to the\n`Applicative` and `Bind` laws:\n\n- Left Identity: `pure x >>= f = f x`\n- Right Identity: `x >>= pure = x`\n","title":"Monad","fixity":null,"sourceSpan":{"start":[342,1],"name":"src/Prelude.purs","end":[344,1]}},{"children":[],"code":[["ident","liftM1"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","m"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ctor","Monad","Prelude"],["space"],["ident","m"],["syntax",")"],["space"],["syntax","=>"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","b"]],"comments":"`liftM1` provides a default implementation of `(<$>)` for any\n[`Monad`](#monad), without using `(<$>)` as provided by the\n[`Functor`](#functor)-[`Monad`](#monad) superclass relationship.\n\n`liftM1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftM1\n```\n","title":"liftM1","fixity":null,"sourceSpan":{"start":[358,1],"name":"src/Prelude.purs","end":[359,1]}},{"children":[],"code":[["ident","ap"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","m"],["space"],["ident","a"],["space"],["ident","b"],["syntax","."],["space"],["syntax","("],["ctor","Monad","Prelude"],["space"],["ident","m"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","m"],["space"],["syntax","("],["ident","a"],["space"],["syntax","->"],["space"],["ident","b"],["syntax",")"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","m"],["space"],["ident","b"]],"comments":"`ap` provides a default implementation of `(<*>)` for any\n[`Monad`](#monad), without using `(<*>)` as provided by the\n[`Apply`](#apply)-[`Monad`](#monad) superclass relationship.\n\n`ap` can therefore be used to write [`Apply`](#apply) instances as\nfollows:\n\n```purescript\ninstance applyF :: Apply F where\n  apply = ap\n```\n","title":"ap","fixity":null,"sourceSpan":{"start":[374,1],"name":"src/Prelude.purs","end":[375,1]}},{"children":[{"comments":null,"title":"append","info":{"contextualType":[["ident","append"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","append"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Semigroup",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"semigroupString","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semigroupString"],["space"],["syntax","::"],["space"],["ctor","Semigroup","Prelude"],["space"],["ctor","String","Prim"]]},"sourceSpan":{"start":[402,1],"name":"src/Prelude.purs","end":[405,1]}},{"comments":null,"title":"semigroupUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semigroupUnit"],["space"],["syntax","::"],["space"],["ctor","Semigroup","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[405,1],"name":"src/Prelude.purs","end":[408,1]}},{"comments":null,"title":"semigroupFn","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semigroupFn"],["space"],["syntax","::"],["space"],["syntax","("],["ctor","Semigroup","Prelude"],["space"],["ident","s'"],["syntax",") =>"],["space"],["ctor","Semigroup","Prelude"],["space"],["syntax","("],["ident","s"],["space"],["syntax","->"],["space"],["ident","s'"],["syntax",")"]]},"sourceSpan":{"start":[408,1],"name":"src/Prelude.purs","end":[411,1]}},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semigroupOrdering"],["space"],["syntax","::"],["space"],["ctor","Semigroup","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[411,1],"name":"src/Prelude.purs","end":[416,1]}},{"comments":null,"title":"semigroupArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semigroupArray"],["space"],["syntax","::"],["space"],["ctor","Semigroup","Prelude"],["space"],["syntax","("],["ctor","Array","Prim"],["space"],["ident","a"],["syntax",")"]]},"sourceSpan":{"start":[416,1],"name":"src/Prelude.purs","end":[419,1]}}],"code":[["keyword","class"],["space"],["ctor","Semigroup",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `Semigroup` type class identifies an associative operation on a type.\n\nInstances are required to satisfy the following law:\n\n- Associativity: `(x <> y) <> z = x <> (y <> z)`\n\nOne example of a `Semigroup` is `String`, with `(<>)` defined as string\nconcatenation.\n","title":"Semigroup","fixity":null,"sourceSpan":{"start":[391,1],"name":"src/Prelude.purs","end":[395,1]}},{"children":[],"code":[["ident","(<>)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","s"],["syntax","."],["space"],["syntax","("],["ctor","Semigroup","Prelude"],["space"],["ident","s"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","s"],["space"],["syntax","->"],["space"],["ident","s"],["space"],["syntax","->"],["space"],["ident","s"]],"comments":"`(<>)` is an alias for `append`.\n","title":"(<>)","fixity":{"associativity":"infixr","precedence":5},"sourceSpan":{"start":[395,1],"name":"src/Prelude.purs","end":[396,1]}},{"children":[],"code":[["ident","(++)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","s"],["syntax","."],["space"],["syntax","("],["ctor","Semigroup","Prelude"],["space"],["ident","s"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","s"],["space"],["syntax","->"],["space"],["ident","s"],["space"],["syntax","->"],["space"],["ident","s"]],"comments":"`(++)` is an alias for `append`.\n","title":"(++)","fixity":{"associativity":"infixr","precedence":5},"sourceSpan":{"start":[399,1],"name":"src/Prelude.purs","end":[400,1]}},{"children":[{"comments":null,"title":"add","info":{"contextualType":[["ident","add"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","add"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Semiring",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"zero","info":{"contextualType":[["ident","zero"],["space"],["syntax","::"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","zero"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Semiring",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"mul","info":{"contextualType":[["ident","mul"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","mul"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Semiring",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"one","info":{"contextualType":[["ident","one"],["space"],["syntax","::"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","one"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Semiring",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"semiringInt","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semiringInt"],["space"],["syntax","::"],["space"],["ctor","Semiring","Prelude"],["space"],["ctor","Int","Prim"]]},"sourceSpan":{"start":[447,1],"name":"src/Prelude.purs","end":[453,1]}},{"comments":null,"title":"semiringNumber","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semiringNumber"],["space"],["syntax","::"],["space"],["ctor","Semiring","Prelude"],["space"],["ctor","Number","Prim"]]},"sourceSpan":{"start":[453,1],"name":"src/Prelude.purs","end":[459,1]}},{"comments":null,"title":"semiringUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semiringUnit"],["space"],["syntax","::"],["space"],["ctor","Semiring","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[459,1],"name":"src/Prelude.purs","end":[466,1]}}],"code":[["keyword","class"],["space"],["ctor","Semiring",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `Semiring` class is for types that support an addition and\nmultiplication operation.\n\nInstances must satisfy the following laws:\n\n- Commutative monoid under addition:\n  - Associativity: `(a + b) + c = a + (b + c)`\n  - Identity: `zero + a = a + zero = a`\n  - Commutative: `a + b = b + a`\n- Monoid under multiplication:\n  - Associativity: `(a * b) * c = a * (b * c)`\n  - Identity: `one * a = a * one = a`\n- Multiplication distributes over addition:\n  - Left distributivity: `a * (b + c) = (a * b) + (a * c)`\n  - Right distributivity: `(a + b) * c = (a * c) + (b * c)`\n- Annihiliation: `zero * a = a * zero = zero`\n","title":"Semiring","fixity":null,"sourceSpan":{"start":[441,1],"name":"src/Prelude.purs","end":[447,1]}},{"children":[],"code":[["ident","(+)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Semiring","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":"`(+)` is an alias for `add`.\n","title":"(+)","fixity":{"associativity":"infixl","precedence":6},"sourceSpan":{"start":[466,1],"name":"src/Prelude.purs","end":[467,1]}},{"children":[],"code":[["ident","(*)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Semiring","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":"`(*)` is an alias for `mul`.\n","title":"(*)","fixity":{"associativity":"infixl","precedence":7},"sourceSpan":{"start":[470,1],"name":"src/Prelude.purs","end":[471,1]}},{"children":[{"comments":null,"title":"sub","info":{"contextualType":[["ident","sub"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","sub"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Ring",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"ringInt","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ringInt"],["space"],["syntax","::"],["space"],["ctor","Ring","Prelude"],["space"],["ctor","Int","Prim"]]},"sourceSpan":{"start":[490,1],"name":"src/Prelude.purs","end":[493,1]}},{"comments":null,"title":"ringNumber","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ringNumber"],["space"],["syntax","::"],["space"],["ctor","Ring","Prelude"],["space"],["ctor","Number","Prim"]]},"sourceSpan":{"start":[493,1],"name":"src/Prelude.purs","end":[496,1]}},{"comments":null,"title":"ringUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ringUnit"],["space"],["syntax","::"],["space"],["ctor","Ring","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[496,1],"name":"src/Prelude.purs","end":[500,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Semiring","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","Ring",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `Ring` class is for types that support addition, multiplication,\nand subtraction operations.\n\nInstances must satisfy the following law in addition to the `Semiring`\nlaws:\n\n- Additive inverse: `a + (-a) = (-a) + a = zero`\n","title":"Ring","fixity":null,"sourceSpan":{"start":[487,1],"name":"src/Prelude.purs","end":[490,1]}},{"children":[],"code":[["ident","(-)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Ring","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":"`(-)` is an alias for `sub`.\n","title":"(-)","fixity":{"associativity":"infixl","precedence":6},"sourceSpan":{"start":[500,1],"name":"src/Prelude.purs","end":[501,1]}},{"children":[],"code":[["ident","negate"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Ring","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":null,"title":"negate","fixity":null,"sourceSpan":{"start":[503,1],"name":"src/Prelude.purs","end":[504,1]}},{"children":[{"comments":null,"title":"div","info":{"contextualType":[["ident","div"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","div"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","ModuloSemiring",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"mod","info":{"contextualType":[["ident","mod"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","mod"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","ModuloSemiring",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"moduloSemiringInt","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","moduloSemiringInt"],["space"],["syntax","::"],["space"],["ctor","ModuloSemiring","Prelude"],["space"],["ctor","Int","Prim"]]},"sourceSpan":{"start":[522,1],"name":"src/Prelude.purs","end":[526,1]}},{"comments":null,"title":"moduloSemiringNumber","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","moduloSemiringNumber"],["space"],["syntax","::"],["space"],["ctor","ModuloSemiring","Prelude"],["space"],["ctor","Number","Prim"]]},"sourceSpan":{"start":[526,1],"name":"src/Prelude.purs","end":[530,1]}},{"comments":null,"title":"moduloSemiringUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","moduloSemiringUnit"],["space"],["syntax","::"],["space"],["ctor","ModuloSemiring","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[530,1],"name":"src/Prelude.purs","end":[535,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Semiring","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","ModuloSemiring",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `ModuloSemiring` class is for types that support addition,\nmultiplication, division, and modulo (division remainder) operations.\n\nInstances must satisfy the following law in addition to the `Semiring`\nlaws:\n\n- Remainder: `a / b * b + (a `mod` b) = a`\n","title":"ModuloSemiring","fixity":null,"sourceSpan":{"start":[518,1],"name":"src/Prelude.purs","end":[522,1]}},{"children":[],"code":[["ident","(/)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","ModuloSemiring","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":"`(/)` is an alias for `div`.\n","title":"(/)","fixity":{"associativity":"infixl","precedence":7},"sourceSpan":{"start":[535,1],"name":"src/Prelude.purs","end":[536,1]}},{"children":[{"comments":null,"title":"divisionRingNumber","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","divisionRingNumber"],["space"],["syntax","::"],["space"],["ctor","DivisionRing","Prelude"],["space"],["ctor","Number","Prim"]]},"sourceSpan":{"start":[553,1],"name":"src/Prelude.purs","end":[554,1]}},{"comments":null,"title":"divisionRingUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","divisionRingUnit"],["space"],["syntax","::"],["space"],["ctor","DivisionRing","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[554,1],"name":"src/Prelude.purs","end":[562,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Ring","Prelude"],["space"],["ident","a"],["syntax",","],["space"],["ctor","ModuloSemiring","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","DivisionRing",null],["space"],["ident","a"]],"comments":"A `Ring` where every nonzero element has a multiplicative inverse.\n\nInstances must satisfy the following law in addition to the `Ring` and\n`ModuloSemiring` laws:\n\n- Multiplicative inverse: `(one / x) * x = one`\n\nAs a consequence of this ```a `mod` b = zero``` as no divide operation\nwill have a remainder.\n","title":"DivisionRing","fixity":null,"sourceSpan":{"start":[551,1],"name":"src/Prelude.purs","end":[553,1]}},{"children":[{"comments":null,"title":"numNumber","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","numNumber"],["space"],["syntax","::"],["space"],["ctor","Num","Prelude"],["space"],["ctor","Number","Prim"]]},"sourceSpan":{"start":[564,1],"name":"src/Prelude.purs","end":[565,1]}},{"comments":null,"title":"numUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","numUnit"],["space"],["syntax","::"],["space"],["ctor","Num","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[565,1],"name":"src/Prelude.purs","end":[567,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","DivisionRing","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","Num",null],["space"],["ident","a"]],"comments":"The `Num` class is for types that are commutative fields.\n\nInstances must satisfy the following law in addition to the\n`DivisionRing` laws:\n\n- Commutative multiplication: `a * b = b * a`\n","title":"Num","fixity":null,"sourceSpan":{"start":[562,1],"name":"src/Prelude.purs","end":[564,1]}},{"children":[{"comments":null,"title":"eq","info":{"contextualType":[["ident","eq"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Boolean","Prim"]],"declType":"typeClassMember","type":[["ident","eq"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Eq",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":null},{"comments":null,"title":"eqBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqBoolean"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[587,1],"name":"src/Prelude.purs","end":[590,1]}},{"comments":null,"title":"eqInt","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqInt"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","Int","Prim"]]},"sourceSpan":{"start":[590,1],"name":"src/Prelude.purs","end":[593,1]}},{"comments":null,"title":"eqNumber","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqNumber"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","Number","Prim"]]},"sourceSpan":{"start":[593,1],"name":"src/Prelude.purs","end":[596,1]}},{"comments":null,"title":"eqChar","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqChar"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","Char","Prim"]]},"sourceSpan":{"start":[596,1],"name":"src/Prelude.purs","end":[599,1]}},{"comments":null,"title":"eqString","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqString"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","String","Prim"]]},"sourceSpan":{"start":[599,1],"name":"src/Prelude.purs","end":[602,1]}},{"comments":null,"title":"eqUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqUnit"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[602,1],"name":"src/Prelude.purs","end":[605,1]}},{"comments":null,"title":"eqArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqArray"],["space"],["syntax","::"],["space"],["syntax","("],["ctor","Eq","Prelude"],["space"],["ident","a"],["syntax",") =>"],["space"],["ctor","Eq","Prelude"],["space"],["syntax","("],["ctor","Array","Prim"],["space"],["ident","a"],["syntax",")"]]},"sourceSpan":{"start":[605,1],"name":"src/Prelude.purs","end":[608,1]}},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqOrdering"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[608,1],"name":"src/Prelude.purs","end":[614,1]}}],"code":[["keyword","class"],["space"],["ctor","Eq",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `Eq` type class represents types which support decidable equality.\n\n`Eq` instances should satisfy the following laws:\n\n- Reflexivity: `x == x = true`\n- Symmetry: `x == y = y == x`\n- Transitivity: if `x == y` and `y == z` then `x == z`\n","title":"Eq","fixity":null,"sourceSpan":{"start":[577,1],"name":"src/Prelude.purs","end":[581,1]}},{"children":[],"code":[["ident","(==)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Eq","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Boolean","Prim"]],"comments":"`(==)` is an alias for `eq`.\n","title":"(==)","fixity":{"associativity":"infix","precedence":4},"sourceSpan":{"start":[581,1],"name":"src/Prelude.purs","end":[582,1]}},{"children":[],"code":[["ident","(/=)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Eq","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Boolean","Prim"]],"comments":null,"title":"(/=)","fixity":{"associativity":"infix","precedence":4},"sourceSpan":{"start":[584,1],"name":"src/Prelude.purs","end":[585,1]}},{"children":[{"comments":null,"title":"LT","info":{"signature":[["ctor","LT",null]],"declType":"dataConstructor","type":[["ident","LT"],["space"],["syntax","::"],["space"],["ctor","Ordering",null]]},"sourceSpan":null},{"comments":null,"title":"GT","info":{"signature":[["ctor","GT",null]],"declType":"dataConstructor","type":[["ident","GT"],["space"],["syntax","::"],["space"],["ctor","Ordering",null]]},"sourceSpan":null},{"comments":null,"title":"EQ","info":{"signature":[["ctor","EQ",null]],"declType":"dataConstructor","type":[["ident","EQ"],["space"],["syntax","::"],["space"],["ctor","Ordering",null]]},"sourceSpan":null},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","semigroupOrdering"],["space"],["syntax","::"],["space"],["ctor","Semigroup","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[411,1],"name":"src/Prelude.purs","end":[416,1]}},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","eqOrdering"],["space"],["syntax","::"],["space"],["ctor","Eq","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[608,1],"name":"src/Prelude.purs","end":[614,1]}},{"comments":null,"title":"ordOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordOrdering"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[662,1],"name":"src/Prelude.purs","end":[671,1]}},{"comments":null,"title":"boundedOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedOrdering"],["space"],["syntax","::"],["space"],["ctor","Bounded","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[723,1],"name":"src/Prelude.purs","end":[727,1]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showOrdering"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[874,1],"name":"src/Prelude.purs","end":[879,1]}}],"code":[["keyword","data"],["space"],["ctor","Ordering",null]],"comments":"The `Ordering` data type represents the three possible outcomes of\ncomparing two values:\n\n`LT` - The first value is _less than_ the second.\n`GT` - The first value is _greater than_ the second.\n`EQ` - The first value is _equal to_ or _incomparable to_ the second.\n","title":"Ordering","fixity":null,"sourceSpan":{"start":[624,1],"name":"src/Prelude.purs","end":[633,1]}},{"children":[{"comments":null,"title":"compare","info":{"contextualType":[["ident","compare"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Ordering","Prelude"]],"declType":"typeClassMember","type":[["ident","compare"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Ord",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":null},{"comments":null,"title":"ordBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordBoolean"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[636,1],"name":"src/Prelude.purs","end":[639,1]}},{"comments":null,"title":"ordInt","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordInt"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","Int","Prim"]]},"sourceSpan":{"start":[639,1],"name":"src/Prelude.purs","end":[642,1]}},{"comments":null,"title":"ordNumber","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordNumber"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","Number","Prim"]]},"sourceSpan":{"start":[642,1],"name":"src/Prelude.purs","end":[645,1]}},{"comments":null,"title":"ordString","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordString"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","String","Prim"]]},"sourceSpan":{"start":[645,1],"name":"src/Prelude.purs","end":[648,1]}},{"comments":null,"title":"ordChar","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordChar"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","Char","Prim"]]},"sourceSpan":{"start":[648,1],"name":"src/Prelude.purs","end":[651,1]}},{"comments":null,"title":"ordUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordUnit"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[651,1],"name":"src/Prelude.purs","end":[654,1]}},{"comments":null,"title":"ordArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordArray"],["space"],["syntax","::"],["space"],["syntax","("],["ctor","Ord","Prelude"],["space"],["ident","a"],["syntax",") =>"],["space"],["ctor","Ord","Prelude"],["space"],["syntax","("],["ctor","Array","Prim"],["space"],["ident","a"],["syntax",")"]]},"sourceSpan":{"start":[654,1],"name":"src/Prelude.purs","end":[660,1]}},{"comments":null,"title":"ordOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","ordOrdering"],["space"],["syntax","::"],["space"],["ctor","Ord","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[662,1],"name":"src/Prelude.purs","end":[671,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Eq","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","Ord",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `Ord` type class represents types which support comparisons.\n\n`Ord` instances should satisfy the laws of _partially orderings_:\n\n- Reflexivity: `a <= a`\n- Antisymmetry: if `a <= b` and `b <= a` then `a = b`\n- Transitivity: if `a <= b` and `b <= c` then `a <= c`\n","title":"Ord","fixity":null,"sourceSpan":{"start":[633,1],"name":"src/Prelude.purs","end":[636,1]}},{"children":[],"code":[["ident","(<)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Ord","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Boolean","Prim"]],"comments":"Test whether one value is _strictly less than_ another.\n","title":"(<)","fixity":{"associativity":"infixl","precedence":4},"sourceSpan":{"start":[677,1],"name":"src/Prelude.purs","end":[678,1]}},{"children":[],"code":[["ident","(>)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Ord","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Boolean","Prim"]],"comments":"Test whether one value is _strictly greater than_ another.\n","title":"(>)","fixity":{"associativity":"infixl","precedence":4},"sourceSpan":{"start":[683,1],"name":"src/Prelude.purs","end":[684,1]}},{"children":[],"code":[["ident","(<=)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Ord","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Boolean","Prim"]],"comments":"Test whether one value is _non-strictly less than_ another.\n","title":"(<=)","fixity":{"associativity":"infixl","precedence":4},"sourceSpan":{"start":[689,1],"name":"src/Prelude.purs","end":[690,1]}},{"children":[],"code":[["ident","(>=)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Ord","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","Boolean","Prim"]],"comments":"Test whether one value is _non-strictly greater than_ another.\n","title":"(>=)","fixity":{"associativity":"infixl","precedence":4},"sourceSpan":{"start":[695,1],"name":"src/Prelude.purs","end":[696,1]}},{"children":[{"comments":null,"title":"top","info":{"contextualType":[["ident","top"],["space"],["syntax","::"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","top"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Bounded",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"bottom","info":{"contextualType":[["ident","bottom"],["space"],["syntax","::"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","bottom"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Bounded",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"boundedBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedBoolean"],["space"],["syntax","::"],["space"],["ctor","Bounded","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[715,1],"name":"src/Prelude.purs","end":[719,1]}},{"comments":null,"title":"boundedUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedUnit"],["space"],["syntax","::"],["space"],["ctor","Bounded","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[719,1],"name":"src/Prelude.purs","end":[723,1]}},{"comments":null,"title":"boundedOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedOrdering"],["space"],["syntax","::"],["space"],["ctor","Bounded","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[723,1],"name":"src/Prelude.purs","end":[727,1]}},{"comments":null,"title":"boundedInt","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedInt"],["space"],["syntax","::"],["space"],["ctor","Bounded","Prelude"],["space"],["ctor","Int","Prim"]]},"sourceSpan":{"start":[727,1],"name":"src/Prelude.purs","end":[755,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Ord","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","Bounded",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `Bounded` type class represents types that are finite partially\nordered sets.\n\nInstances should satisfy the following law in addition to the `Ord` laws:\n\n- Ordering: `bottom <= a <= top`\n","title":"Bounded","fixity":null,"sourceSpan":{"start":[711,1],"name":"src/Prelude.purs","end":[715,1]}},{"children":[{"comments":null,"title":"sup","info":{"contextualType":[["ident","sup"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","sup"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Lattice",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"inf","info":{"contextualType":[["ident","inf"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","inf"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Lattice",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"latticeBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","latticeBoolean"],["space"],["syntax","::"],["space"],["ctor","Lattice","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[759,1],"name":"src/Prelude.purs","end":[763,1]}},{"comments":null,"title":"latticeUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","latticeUnit"],["space"],["syntax","::"],["space"],["ctor","Lattice","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[763,1],"name":"src/Prelude.purs","end":[767,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Ord","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","Lattice",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `Lattice` type class represents types that are partially ordered\nsets with a supremum (`sup` or `||`) and infimum (`inf` or `&&`).\n\nInstances should satisfy the following laws in addition to the `Ord`\nlaws:\n\n- Supremum:\n  - `a || b >= a`\n  - `a || b >= b`\n- Infimum:\n  - `a && b <= a`\n  - `a && b <= b`\n- Associativity:\n  - `a || (b || c) = (a || b) || c`\n  - `a && (b && c) = (a && b) && c`\n- Commutativity:\n  - `a || b = b || a`\n  - `a && b = b && a`\n- Absorption:\n  - `a || (a && b) = a`\n  - `a && (a || b) = a`\n- Idempotent:\n  - `a || a = a`\n  - `a && a = a`\n","title":"Lattice","fixity":null,"sourceSpan":{"start":[755,1],"name":"src/Prelude.purs","end":[759,1]}},{"children":[],"code":[["ident","(||)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Lattice","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":"The `sup` operator.\n","title":"(||)","fixity":{"associativity":"infixr","precedence":2},"sourceSpan":{"start":[771,1],"name":"src/Prelude.purs","end":[772,1]}},{"children":[],"code":[["ident","(&&)"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Lattice","Prelude"],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"comments":"The `inf` operator.\n","title":"(&&)","fixity":{"associativity":"infixr","precedence":3},"sourceSpan":{"start":[775,1],"name":"src/Prelude.purs","end":[776,1]}},{"children":[{"comments":null,"title":"boundedLatticeBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedLatticeBoolean"],["space"],["syntax","::"],["space"],["ctor","BoundedLattice","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[795,1],"name":"src/Prelude.purs","end":[797,1]}},{"comments":null,"title":"boundedLatticeUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","boundedLatticeUnit"],["space"],["syntax","::"],["space"],["ctor","BoundedLattice","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[797,1],"name":"src/Prelude.purs","end":[810,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Bounded","Prelude"],["space"],["ident","a"],["syntax",","],["space"],["ctor","Lattice","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","BoundedLattice",null],["space"],["ident","a"]],"comments":"The `BoundedLattice` type class represents types that are finite\nlattices.\n\nInstances should satisfy the following law in addition to the `Lattice`\nand `Bounded` laws:\n\n- Identity:\n  - `a || bottom = a`\n  - `a && top = a`\n- Annihiliation:\n  - `a || top = top`\n  - `a && bottom = bottom`\n","title":"BoundedLattice","fixity":null,"sourceSpan":{"start":[793,1],"name":"src/Prelude.purs","end":[795,1]}},{"children":[{"comments":null,"title":"not","info":{"contextualType":[["ident","not"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]],"declType":"typeClassMember","type":[["ident","not"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","ComplementedLattice",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ident","a"]]},"sourceSpan":null},{"comments":null,"title":"complementedLatticeBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","complementedLatticeBoolean"],["space"],["syntax","::"],["space"],["ctor","ComplementedLattice","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[813,1],"name":"src/Prelude.purs","end":[816,1]}},{"comments":null,"title":"complementedLatticeUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","complementedLatticeUnit"],["space"],["syntax","::"],["space"],["ctor","ComplementedLattice","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[816,1],"name":"src/Prelude.purs","end":[819,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","BoundedLattice","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","ComplementedLattice",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `ComplementedLattice` type class represents types that are lattices\nwhere every member is also uniquely complemented.\n\nInstances should satisfy the following law in addition to the\n`BoundedLattice` laws:\n\n- Complemented:\n  - `not a || a == top`\n  - `not a && a == bottom`\n- Double negation:\n  - `not <<< not == id`\n","title":"ComplementedLattice","fixity":null,"sourceSpan":{"start":[810,1],"name":"src/Prelude.purs","end":[813,1]}},{"children":[{"comments":null,"title":"distributiveLatticeBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","distributiveLatticeBoolean"],["space"],["syntax","::"],["space"],["ctor","DistributiveLattice","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[830,1],"name":"src/Prelude.purs","end":[831,1]}},{"comments":null,"title":"distributiveLatticeUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","distributiveLatticeUnit"],["space"],["syntax","::"],["space"],["ctor","DistributiveLattice","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[831,1],"name":"src/Prelude.purs","end":[838,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","Lattice","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","DistributiveLattice",null],["space"],["ident","a"]],"comments":"The `DistributiveLattice` type class represents types that are lattices\nwhere the `&&` and `||` distribute over each other.\n\nInstances should satisfy the following law in addition to the `Lattice`\nlaws:\n\n- Distributivity: `x && (y || z) = (x && y) || (x && z)`\n","title":"DistributiveLattice","fixity":null,"sourceSpan":{"start":[828,1],"name":"src/Prelude.purs","end":[830,1]}},{"children":[{"comments":null,"title":"booleanAlgebraBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","booleanAlgebraBoolean"],["space"],["syntax","::"],["space"],["ctor","BooleanAlgebra","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[840,1],"name":"src/Prelude.purs","end":[841,1]}},{"comments":null,"title":"booleanAlgebraUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","booleanAlgebraUnit"],["space"],["syntax","::"],["space"],["ctor","BooleanAlgebra","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[841,1],"name":"src/Prelude.purs","end":[849,1]}}],"code":[["keyword","class"],["space"],["syntax","("],["ctor","ComplementedLattice","Prelude"],["space"],["ident","a"],["syntax",","],["space"],["ctor","DistributiveLattice","Prelude"],["space"],["ident","a"],["syntax",") <="],["space"],["ctor","BooleanAlgebra",null],["space"],["ident","a"]],"comments":"The `BooleanAlgebra` type class represents types that are Boolean\nalgebras, also known as Boolean lattices.\n\nInstances should satisfy the `ComplementedLattice` and\n`DistributiveLattice` laws.\n","title":"BooleanAlgebra","fixity":null,"sourceSpan":{"start":[838,1],"name":"src/Prelude.purs","end":[840,1]}},{"children":[{"comments":null,"title":"show","info":{"contextualType":[["ident","show"],["space"],["syntax","::"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","String","Prim"]],"declType":"typeClassMember","type":[["ident","show"],["space"],["syntax","::"],["space"],["syntax","forall"],["space"],["ident","a"],["syntax","."],["space"],["syntax","("],["ctor","Show",null],["space"],["ident","a"],["syntax",")"],["space"],["syntax","=>"],["space"],["ident","a"],["space"],["syntax","->"],["space"],["ctor","String","Prim"]]},"sourceSpan":null},{"comments":null,"title":"showBoolean","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showBoolean"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","Boolean","Prim"]]},"sourceSpan":{"start":[852,1],"name":"src/Prelude.purs","end":[856,1]}},{"comments":null,"title":"showInt","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showInt"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","Int","Prim"]]},"sourceSpan":{"start":[856,1],"name":"src/Prelude.purs","end":[859,1]}},{"comments":null,"title":"showNumber","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showNumber"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","Number","Prim"]]},"sourceSpan":{"start":[859,1],"name":"src/Prelude.purs","end":[862,1]}},{"comments":null,"title":"showChar","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showChar"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","Char","Prim"]]},"sourceSpan":{"start":[862,1],"name":"src/Prelude.purs","end":[865,1]}},{"comments":null,"title":"showString","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showString"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","String","Prim"]]},"sourceSpan":{"start":[865,1],"name":"src/Prelude.purs","end":[868,1]}},{"comments":null,"title":"showUnit","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showUnit"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","Unit","Prelude"]]},"sourceSpan":{"start":[868,1],"name":"src/Prelude.purs","end":[871,1]}},{"comments":null,"title":"showArray","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showArray"],["space"],["syntax","::"],["space"],["syntax","("],["ctor","Show","Prelude"],["space"],["ident","a"],["syntax",") =>"],["space"],["ctor","Show","Prelude"],["space"],["syntax","("],["ctor","Array","Prim"],["space"],["ident","a"],["syntax",")"]]},"sourceSpan":{"start":[871,1],"name":"src/Prelude.purs","end":[874,1]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","code":[["keyword","instance"],["space"],["ident","showOrdering"],["space"],["syntax","::"],["space"],["ctor","Show","Prelude"],["space"],["ctor","Ordering","Prelude"]]},"sourceSpan":{"start":[874,1],"name":"src/Prelude.purs","end":[879,1]}}],"code":[["keyword","class"],["space"],["ctor","Show",null],["space"],["ident","a"],["space"],["keyword","where"]],"comments":"The `Show` type class represents those types which can be converted into\na human-readable `String` representation.\n\nWhile not required, it is recommended that for any expression `x`, the\nstring `show x` be executable PureScript code which evaluates to the same\nvalue as the expression `x`.\n","title":"Show","fixity":null,"sourceSpan":{"start":[849,1],"name":"src/Prelude.purs","end":[852,1]}}]}],"resolvedDependencies":{},"bookmarks":[{"package":null,"item":["Prelude","Unit"]},{"package":null,"item":["Prelude","unit"]},{"package":null,"item":["Prelude","($)"]},{"package":null,"item":["Prelude","(#)"]},{"package":null,"item":["Prelude","($)"]},{"package":null,"item":["Prelude","(#)"]},{"package":null,"item":["Prelude","flip"]},{"package":null,"item":["Prelude","const"]},{"package":null,"item":["Prelude","asTypeOf"]},{"package":null,"item":["Prelude","otherwise"]},{"package":null,"item":["Prelude","(>>>)"]},{"package":null,"item":["Prelude","(<<<)"]},{"package":null,"item":["Prelude","Semigroupoid"]},{"package":null,"item":["Prelude","semigroupoidFn"]},{"package":null,"item":["Prelude","(<<<)"]},{"package":null,"item":["Prelude","(>>>)"]},{"package":null,"item":["Prelude","Category"]},{"package":null,"item":["Prelude","categoryFn"]},{"package":null,"item":["Prelude","(<$>)"]},{"package":null,"item":["Prelude","(<#>)"]},{"package":null,"item":["Prelude","Functor"]},{"package":null,"item":["Prelude","functorFn"]},{"package":null,"item":["Prelude","functorArray"]},{"package":null,"item":["Prelude","(<$>)"]},{"package":null,"item":["Prelude","(<#>)"]},{"package":null,"item":["Prelude","void"]},{"package":null,"item":["Prelude","(<*>)"]},{"package":null,"item":["Prelude","Apply"]},{"package":null,"item":["Prelude","applyFn"]},{"package":null,"item":["Prelude","applyArray"]},{"package":null,"item":["Prelude","(<*>)"]},{"package":null,"item":["Prelude","Applicative"]},{"package":null,"item":["Prelude","applicativeFn"]},{"package":null,"item":["Prelude","applicativeArray"]},{"package":null,"item":["Prelude","return"]},{"package":null,"item":["Prelude","liftA1"]},{"package":null,"item":["Prelude","(>>=)"]},{"package":null,"item":["Prelude","Bind"]},{"package":null,"item":["Prelude","bindFn"]},{"package":null,"item":["Prelude","bindArray"]},{"package":null,"item":["Prelude","(>>=)"]},{"package":null,"item":["Prelude","Monad"]},{"package":null,"item":["Prelude","monadFn"]},{"package":null,"item":["Prelude","monadArray"]},{"package":null,"item":["Prelude","liftM1"]},{"package":null,"item":["Prelude","ap"]},{"package":null,"item":["Prelude","(<>)"]},{"package":null,"item":["Prelude","(++)"]},{"package":null,"item":["Prelude","Semigroup"]},{"package":null,"item":["Prelude","(<>)"]},{"package":null,"item":["Prelude","(++)"]},{"package":null,"item":["Prelude","semigroupString"]},{"package":null,"item":["Prelude","semigroupUnit"]},{"package":null,"item":["Prelude","semigroupFn"]},{"package":null,"item":["Prelude","semigroupOrdering"]},{"package":null,"item":["Prelude","semigroupArray"]},{"package":null,"item":["Prelude","(+)"]},{"package":null,"item":["Prelude","(*)"]},{"package":null,"item":["Prelude","Semiring"]},{"package":null,"item":["Prelude","semiringInt"]},{"package":null,"item":["Prelude","semiringNumber"]},{"package":null,"item":["Prelude","semiringUnit"]},{"package":null,"item":["Prelude","(+)"]},{"package":null,"item":["Prelude","(*)"]},{"package":null,"item":["Prelude","(-)"]},{"package":null,"item":["Prelude","Ring"]},{"package":null,"item":["Prelude","ringInt"]},{"package":null,"item":["Prelude","ringNumber"]},{"package":null,"item":["Prelude","ringUnit"]},{"package":null,"item":["Prelude","(-)"]},{"package":null,"item":["Prelude","negate"]},{"package":null,"item":["Prelude","(/)"]},{"package":null,"item":["Prelude","ModuloSemiring"]},{"package":null,"item":["Prelude","moduloSemiringInt"]},{"package":null,"item":["Prelude","moduloSemiringNumber"]},{"package":null,"item":["Prelude","moduloSemiringUnit"]},{"package":null,"item":["Prelude","(/)"]},{"package":null,"item":["Prelude","DivisionRing"]},{"package":null,"item":["Prelude","divisionRingNumber"]},{"package":null,"item":["Prelude","divisionRingUnit"]},{"package":null,"item":["Prelude","Num"]},{"package":null,"item":["Prelude","numNumber"]},{"package":null,"item":["Prelude","numUnit"]},{"package":null,"item":["Prelude","(==)"]},{"package":null,"item":["Prelude","(/=)"]},{"package":null,"item":["Prelude","Eq"]},{"package":null,"item":["Prelude","(==)"]},{"package":null,"item":["Prelude","(/=)"]},{"package":null,"item":["Prelude","eqBoolean"]},{"package":null,"item":["Prelude","eqInt"]},{"package":null,"item":["Prelude","eqNumber"]},{"package":null,"item":["Prelude","eqChar"]},{"package":null,"item":["Prelude","eqString"]},{"package":null,"item":["Prelude","eqUnit"]},{"package":null,"item":["Prelude","eqArray"]},{"package":null,"item":["Prelude","eqOrdering"]},{"package":null,"item":["Prelude","Ordering"]},{"package":null,"item":["Prelude","Ord"]},{"package":null,"item":["Prelude","ordBoolean"]},{"package":null,"item":["Prelude","ordInt"]},{"package":null,"item":["Prelude","ordNumber"]},{"package":null,"item":["Prelude","ordString"]},{"package":null,"item":["Prelude","ordChar"]},{"package":null,"item":["Prelude","ordUnit"]},{"package":null,"item":["Prelude","ordArray"]},{"package":null,"item":["Prelude","ordOrdering"]},{"package":null,"item":["Prelude","(<)"]},{"package":null,"item":["Prelude","(>)"]},{"package":null,"item":["Prelude","(<=)"]},{"package":null,"item":["Prelude","(>=)"]},{"package":null,"item":["Prelude","(<)"]},{"package":null,"item":["Prelude","(>)"]},{"package":null,"item":["Prelude","(<=)"]},{"package":null,"item":["Prelude","(>=)"]},{"package":null,"item":["Prelude","Bounded"]},{"package":null,"item":["Prelude","boundedBoolean"]},{"package":null,"item":["Prelude","boundedUnit"]},{"package":null,"item":["Prelude","boundedOrdering"]},{"package":null,"item":["Prelude","boundedInt"]},{"package":null,"item":["Prelude","Lattice"]},{"package":null,"item":["Prelude","latticeBoolean"]},{"package":null,"item":["Prelude","latticeUnit"]},{"package":null,"item":["Prelude","(||)"]},{"package":null,"item":["Prelude","(&&)"]},{"package":null,"item":["Prelude","(||)"]},{"package":null,"item":["Prelude","(&&)"]},{"package":null,"item":["Prelude","BoundedLattice"]},{"package":null,"item":["Prelude","boundedLatticeBoolean"]},{"package":null,"item":["Prelude","boundedLatticeUnit"]},{"package":null,"item":["Prelude","ComplementedLattice"]},{"package":null,"item":["Prelude","complementedLatticeBoolean"]},{"package":null,"item":["Prelude","complementedLatticeUnit"]},{"package":null,"item":["Prelude","DistributiveLattice"]},{"package":null,"item":["Prelude","distributiveLatticeBoolean"]},{"package":null,"item":["Prelude","distributiveLatticeUnit"]},{"package":null,"item":["Prelude","BooleanAlgebra"]},{"package":null,"item":["Prelude","booleanAlgebraBoolean"]},{"package":null,"item":["Prelude","booleanAlgebraUnit"]},{"package":null,"item":["Prelude","Show"]},{"package":null,"item":["Prelude","showBoolean"]},{"package":null,"item":["Prelude","showInt"]},{"package":null,"item":["Prelude","showNumber"]},{"package":null,"item":["Prelude","showChar"]},{"package":null,"item":["Prelude","showString"]},{"package":null,"item":["Prelude","showUnit"]},{"package":null,"item":["Prelude","showArray"]},{"package":null,"item":["Prelude","showOrdering"]}],"version":"999.1.0","github":["purescript","purescript-prelude"],"versionTag":"v999.1.0"}
