#!/bin/bash
# Generates the LICENSE file and prints it to standard output.
# Example use:
#
#   ./license/generate > LICENSE
#

set -e              # exit on error
set -u              # exit on undefined variable
set -o pipefail     # propagate nonzero exit codes through pipelines

if ! which cabal-dependency-licenses >/dev/null; then
    echo "$0: the program 'cabal-dependency-licenses' is required." >&2
    echo "$0: see Hackage: https://hackage.haskell.org/package/cabal-dependency-licenses" >&2
    exit 1
fi

echo_header() {
    cat license-generator/header.txt
}

sort_human() {
    if which sort >/dev/null; then
        sort -h
    else
        if which gsort >/dev/null; then
            gsort -h
        else
            echo "$0: no suitable sorting program found."     >&2
            echo "$0: one of 'sort' or 'gsort' is required."  >&2
            exit 1
        fi
    fi
}

echo_deps_names() {
    cabal-dependency-licenses \
        | grep -v rts | grep '^- ' | sed 's/^..//' | sort_human
}

echo_deps_licenses() {
  while read dep; do
      echo "fetching license for: $dep" >&2
      echo "$dep license file:"
      echo ""
      get_license "$dep" | sed 's/^/  /g' # indent by 2 characters
      echo ""
  done
}

get_license() {
    local hackage="https://hackage.haskell.org/package"
    case "$1" in
        cpphs)
            get_licence_from_url "http://code.haskell.org/cpphs/COPYRIGHT"
            echo ""
            cat "license-generator/gnu-lgpl-2.1.txt";;
        hoogle)
            get_licence_from_url "$hackage/hoogle/docs/LICENSE";;
        monad-loops)
            # PublicDomain; do nothing
            ;;
        polyparse)
            get_licence_from_url "$hackage/polyparse/src/COPYRIGHT"
            echo ""
            cat "license-generator/gnu-lgpl-2.1.txt";;
        xml-types)
            get_licence_from_url "$hackage/xml-types/src/license.txt";;
        stringsearch)
            get_licence_from_url "$hackage/stringsearch/src/LICENCE";;
        system-file*)
            get_licence_from_url "$hackage/$1/src/license.txt";;
        *)
            get_licence_from_url "$hackage/$1/src/LICENSE";;
    esac
}

get_licence_from_url() {
  # The --fail option means that curl will exit nonzero on 4xx, 5xx responses.
  if ! curl --silent --fail "$1"; then
      echo "Got an error response while trying to GET $1" >&2
      exit 1
  fi
}

mkdir -p license-generator/tmp
echo_deps_names > license-generator/tmp/deps.txt

echo_header
echo ""
sed <license-generator/tmp/deps.txt 's/^/  /'
echo ""
echo_deps_licenses <license-generator/tmp/deps.txt
