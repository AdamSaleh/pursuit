[{"name":"flip","module":"Prelude","detail":"flip :: forall a b c. (a -\u003e b -\u003e c) -\u003e b -\u003e a -\u003e c"},{"name":"const","module":"Prelude","detail":"const :: forall a b. a -\u003e b -\u003e a"},{"name":"asTypeOf","module":"Prelude","detail":"asTypeOf :: forall a. a -\u003e a -\u003e a"},{"name":"Semigroupoid","module":"Prelude","detail":"class Semigroupoid a where"},{"name":"(\u003c\u003c\u003c)","module":"Prelude","detail":"(\u003c\u003c\u003c) :: forall b c d. a c d -\u003e a b c -\u003e a b d"},{"name":"semigroupoidArr","module":"Prelude","detail":"instance semigroupoidArr :: Semigroupoid Prim.Function"},{"name":"(\u003e\u003e\u003e)","module":"Prelude","detail":"(\u003e\u003e\u003e) :: forall a b c d. (Semigroupoid a) =\u003e a b c -\u003e a c d -\u003e a b d"},{"name":"Category","module":"Prelude","detail":"class (Semigroupoid a) \u003c= Category a where"},{"name":"id","module":"Prelude","detail":"id :: forall t. a t t"},{"name":"categoryArr","module":"Prelude","detail":"instance categoryArr :: Category Prim.Function"},{"name":"($)","module":"Prelude","detail":"($) :: forall a b. (a -\u003e b) -\u003e a -\u003e b"},{"name":"(#)","module":"Prelude","detail":"(#) :: forall a b. a -\u003e (a -\u003e b) -\u003e b"},{"name":"(:)","module":"Prelude","detail":"(:) :: forall a. a -\u003e [a] -\u003e [a]"},{"name":"cons","module":"Prelude","detail":"cons :: forall a. a -\u003e [a] -\u003e [a]"},{"name":"Show","module":"Prelude","detail":"class Show a where"},{"name":"show","module":"Prelude","detail":"show :: a -\u003e String"},{"name":"showStringImpl","module":"Prelude","detail":"showStringImpl :: String -\u003e String"},{"name":"showUnit","module":"Prelude","detail":"instance showUnit :: Show Unit"},{"name":"showString","module":"Prelude","detail":"instance showString :: Show String"},{"name":"showBoolean","module":"Prelude","detail":"instance showBoolean :: Show Boolean"},{"name":"showNumberImpl","module":"Prelude","detail":"showNumberImpl :: Number -\u003e String"},{"name":"showNumber","module":"Prelude","detail":"instance showNumber :: Show Number"},{"name":"showArrayImpl","module":"Prelude","detail":"showArrayImpl :: forall a. (a -\u003e String) -\u003e [a] -\u003e String"},{"name":"showArray","module":"Prelude","detail":"instance showArray :: (Show a) =\u003e Show [a]"},{"name":"Functor","module":"Prelude","detail":"class Functor f where"},{"name":"(\u003c$\u003e)","module":"Prelude","detail":"(\u003c$\u003e) :: forall a b. (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"void","module":"Prelude","detail":"void :: forall f a. (Functor f) =\u003e f a -\u003e f Unit"},{"name":"Apply","module":"Prelude","detail":"class (Functor f) \u003c= Apply f where"},{"name":"(\u003c*\u003e)","module":"Prelude","detail":"(\u003c*\u003e) :: forall a b. f (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"Applicative","module":"Prelude","detail":"class (Apply f) \u003c= Applicative f where"},{"name":"pure","module":"Prelude","detail":"pure :: forall a. a -\u003e f a"},{"name":"liftA1","module":"Prelude","detail":"liftA1 :: forall f a b. (Applicative f) =\u003e (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"Alternative","module":"Prelude","detail":"class Alternative f where"},{"name":"empty","module":"Prelude","detail":"empty :: forall a. f a"},{"name":"(\u003c|\u003e)","module":"Prelude","detail":"(\u003c|\u003e) :: forall a. f a -\u003e f a -\u003e f a"},{"name":"Bind","module":"Prelude","detail":"class (Apply m) \u003c= Bind m where"},{"name":"(\u003e\u003e=)","module":"Prelude","detail":"(\u003e\u003e=) :: forall a b. m a -\u003e (a -\u003e m b) -\u003e m b"},{"name":"Monad","module":"Prelude","detail":"class (Applicative m, Bind m) \u003c= Monad m where"},{"name":"return","module":"Prelude","detail":"return :: forall m a. (Monad m) =\u003e a -\u003e m a"},{"name":"liftM1","module":"Prelude","detail":"liftM1 :: forall m a b. (Monad m) =\u003e (a -\u003e b) -\u003e m a -\u003e m b"},{"name":"ap","module":"Prelude","detail":"ap :: forall m a b. (Monad m) =\u003e m (a -\u003e b) -\u003e m a -\u003e m b"},{"name":"functorArr","module":"Prelude","detail":"instance functorArr :: Functor (Prim.Function r)"},{"name":"applyArr","module":"Prelude","detail":"instance applyArr :: Apply (Prim.Function r)"},{"name":"applicativeArr","module":"Prelude","detail":"instance applicativeArr :: Applicative (Prim.Function r)"},{"name":"bindArr","module":"Prelude","detail":"instance bindArr :: Bind (Prim.Function r)"},{"name":"monadArr","module":"Prelude","detail":"instance monadArr :: Monad (Prim.Function r)"},{"name":"Num","module":"Prelude","detail":"class Num a where"},{"name":"(+)","module":"Prelude","detail":"(+) :: a -\u003e a -\u003e a"},{"name":"(-)","module":"Prelude","detail":"(-) :: a -\u003e a -\u003e a"},{"name":"(*)","module":"Prelude","detail":"(*) :: a -\u003e a -\u003e a"},{"name":"(/)","module":"Prelude","detail":"(/) :: a -\u003e a -\u003e a"},{"name":"(%)","module":"Prelude","detail":"(%) :: a -\u003e a -\u003e a"},{"name":"negate","module":"Prelude","detail":"negate :: a -\u003e a"},{"name":"numAdd","module":"Prelude","detail":"numAdd :: Number -\u003e Number -\u003e Number"},{"name":"numSub","module":"Prelude","detail":"numSub :: Number -\u003e Number -\u003e Number"},{"name":"numMul","module":"Prelude","detail":"numMul :: Number -\u003e Number -\u003e Number"},{"name":"numDiv","module":"Prelude","detail":"numDiv :: Number -\u003e Number -\u003e Number"},{"name":"numMod","module":"Prelude","detail":"numMod :: Number -\u003e Number -\u003e Number"},{"name":"numNegate","module":"Prelude","detail":"numNegate :: Number -\u003e Number"},{"name":"numNumber","module":"Prelude","detail":"instance numNumber :: Num Number"},{"name":"Unit","module":"Prelude","detail":"newtype Unit = Unit {  }"},{"name":"Unit","module":"Prelude","detail":"newtype Unit = Unit {  }"},{"name":"unit","module":"Prelude","detail":"unit :: Unit"},{"name":"Eq","module":"Prelude","detail":"class Eq a where"},{"name":"(==)","module":"Prelude","detail":"(==) :: a -\u003e a -\u003e Boolean"},{"name":"(/=)","module":"Prelude","detail":"(/=) :: a -\u003e a -\u003e Boolean"},{"name":"refEq","module":"Prelude","detail":"refEq :: forall a. a -\u003e a -\u003e Boolean"},{"name":"refIneq","module":"Prelude","detail":"refIneq :: forall a. a -\u003e a -\u003e Boolean"},{"name":"eqUnit","module":"Prelude","detail":"instance eqUnit :: Eq Unit"},{"name":"eqString","module":"Prelude","detail":"instance eqString :: Eq String"},{"name":"eqNumber","module":"Prelude","detail":"instance eqNumber :: Eq Number"},{"name":"eqBoolean","module":"Prelude","detail":"instance eqBoolean :: Eq Boolean"},{"name":"eqArrayImpl","module":"Prelude","detail":"eqArrayImpl :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a] -\u003e Boolean"},{"name":"eqArray","module":"Prelude","detail":"instance eqArray :: (Eq a) =\u003e Eq [a]"},{"name":"Ordering","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"LT","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"GT","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"EQ","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"eqOrdering","module":"Prelude","detail":"instance eqOrdering :: Eq Ordering"},{"name":"showOrdering","module":"Prelude","detail":"instance showOrdering :: Show Ordering"},{"name":"Ord","module":"Prelude","detail":"class (Eq a) \u003c= Ord a where"},{"name":"compare","module":"Prelude","detail":"compare :: a -\u003e a -\u003e Ordering"},{"name":"(\u003c)","module":"Prelude","detail":"(\u003c) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003e)","module":"Prelude","detail":"(\u003e) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003c=)","module":"Prelude","detail":"(\u003c=) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003e=)","module":"Prelude","detail":"(\u003e=) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"unsafeCompareImpl","module":"Prelude","detail":"unsafeCompareImpl :: forall a. Ordering -\u003e Ordering -\u003e Ordering -\u003e a -\u003e a -\u003e Ordering"},{"name":"unsafeCompare","module":"Prelude","detail":"unsafeCompare :: forall a. a -\u003e a -\u003e Ordering"},{"name":"ordUnit","module":"Prelude","detail":"instance ordUnit :: Ord Unit"},{"name":"ordBoolean","module":"Prelude","detail":"instance ordBoolean :: Ord Boolean"},{"name":"ordNumber","module":"Prelude","detail":"instance ordNumber :: Ord Number"},{"name":"ordString","module":"Prelude","detail":"instance ordString :: Ord String"},{"name":"ordArray","module":"Prelude","detail":"instance ordArray :: (Ord a) =\u003e Ord [a]"},{"name":"Bits","module":"Prelude","detail":"class Bits b where"},{"name":"(&)","module":"Prelude","detail":"(&) :: b -\u003e b -\u003e b"},{"name":"(|)","module":"Prelude","detail":"(|) :: b -\u003e b -\u003e b"},{"name":"(^)","module":"Prelude","detail":"(^) :: b -\u003e b -\u003e b"},{"name":"shl","module":"Prelude","detail":"shl :: b -\u003e Number -\u003e b"},{"name":"shr","module":"Prelude","detail":"shr :: b -\u003e Number -\u003e b"},{"name":"zshr","module":"Prelude","detail":"zshr :: b -\u003e Number -\u003e b"},{"name":"complement","module":"Prelude","detail":"complement :: b -\u003e b"},{"name":"numShl","module":"Prelude","detail":"numShl :: Number -\u003e Number -\u003e Number"},{"name":"numShr","module":"Prelude","detail":"numShr :: Number -\u003e Number -\u003e Number"},{"name":"numZshr","module":"Prelude","detail":"numZshr :: Number -\u003e Number -\u003e Number"},{"name":"numAnd","module":"Prelude","detail":"numAnd :: Number -\u003e Number -\u003e Number"},{"name":"numOr","module":"Prelude","detail":"numOr :: Number -\u003e Number -\u003e Number"},{"name":"numXor","module":"Prelude","detail":"numXor :: Number -\u003e Number -\u003e Number"},{"name":"numComplement","module":"Prelude","detail":"numComplement :: Number -\u003e Number"},{"name":"bitsNumber","module":"Prelude","detail":"instance bitsNumber :: Bits Number"},{"name":"BoolLike","module":"Prelude","detail":"class BoolLike b where"},{"name":"(&&)","module":"Prelude","detail":"(&&) :: b -\u003e b -\u003e b"},{"name":"(||)","module":"Prelude","detail":"(||) :: b -\u003e b -\u003e b"},{"name":"not","module":"Prelude","detail":"not :: b -\u003e b"},{"name":"boolAnd","module":"Prelude","detail":"boolAnd :: Boolean -\u003e Boolean -\u003e Boolean"},{"name":"boolOr","module":"Prelude","detail":"boolOr :: Boolean -\u003e Boolean -\u003e Boolean"},{"name":"boolNot","module":"Prelude","detail":"boolNot :: Boolean -\u003e Boolean"},{"name":"boolLikeBoolean","module":"Prelude","detail":"instance boolLikeBoolean :: BoolLike Boolean"},{"name":"Semigroup","module":"Prelude","detail":"class Semigroup a where"},{"name":"(\u003c\u003e)","module":"Prelude","detail":"(\u003c\u003e) :: a -\u003e a -\u003e a"},{"name":"concatString","module":"Prelude","detail":"concatString :: String -\u003e String -\u003e String"},{"name":"semigroupUnit","module":"Prelude","detail":"instance semigroupUnit :: Semigroup Unit"},{"name":"semigroupString","module":"Prelude","detail":"instance semigroupString :: Semigroup String"},{"name":"semigroupArr","module":"Prelude","detail":"instance semigroupArr :: (Semigroup s') =\u003e Semigroup (s -\u003e s')"},{"name":"(++)","module":"Prelude","detail":"(++) :: forall s. (Semigroup s) =\u003e s -\u003e s -\u003e s"},{"name":"on","module":"Data.Function","detail":"on :: forall a b c. (b -\u003e b -\u003e c) -\u003e (a -\u003e b) -\u003e a -\u003e a -\u003e c"},{"name":"Fn0","module":"Data.Function","detail":"data Fn0 :: * -\u003e *"},{"name":"Fn1","module":"Data.Function","detail":"data Fn1 :: * -\u003e * -\u003e *"},{"name":"Fn2","module":"Data.Function","detail":"data Fn2 :: * -\u003e * -\u003e * -\u003e *"},{"name":"Fn3","module":"Data.Function","detail":"data Fn3 :: * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn4","module":"Data.Function","detail":"data Fn4 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn5","module":"Data.Function","detail":"data Fn5 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn6","module":"Data.Function","detail":"data Fn6 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn7","module":"Data.Function","detail":"data Fn7 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn8","module":"Data.Function","detail":"data Fn8 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn9","module":"Data.Function","detail":"data Fn9 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn10","module":"Data.Function","detail":"data Fn10 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"mkFn0","module":"Data.Function","detail":"mkFn0 :: forall a. (Unit -\u003e a) -\u003e Fn0 a"},{"name":"mkFn1","module":"Data.Function","detail":"mkFn1 :: forall a b. (a -\u003e b) -\u003e Fn1 a b"},{"name":"mkFn2","module":"Data.Function","detail":"mkFn2 :: forall a b c. (a -\u003e b -\u003e c) -\u003e Fn2 a b c"},{"name":"mkFn3","module":"Data.Function","detail":"mkFn3 :: forall a b c d. (a -\u003e b -\u003e c -\u003e d) -\u003e Fn3 a b c d"},{"name":"mkFn4","module":"Data.Function","detail":"mkFn4 :: forall a b c d e. (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e Fn4 a b c d e"},{"name":"mkFn5","module":"Data.Function","detail":"mkFn5 :: forall a b c d e f. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f) -\u003e Fn5 a b c d e f"},{"name":"mkFn6","module":"Data.Function","detail":"mkFn6 :: forall a b c d e f g. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g) -\u003e Fn6 a b c d e f g"},{"name":"mkFn7","module":"Data.Function","detail":"mkFn7 :: forall a b c d e f g h. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h) -\u003e Fn7 a b c d e f g h"},{"name":"mkFn8","module":"Data.Function","detail":"mkFn8 :: forall a b c d e f g h i. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i) -\u003e Fn8 a b c d e f g h i"},{"name":"mkFn9","module":"Data.Function","detail":"mkFn9 :: forall a b c d e f g h i j. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j) -\u003e Fn9 a b c d e f g h i j"},{"name":"mkFn10","module":"Data.Function","detail":"mkFn10 :: forall a b c d e f g h i j k. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e k) -\u003e Fn10 a b c d e f g h i j k"},{"name":"runFn0","module":"Data.Function","detail":"runFn0 :: forall a. Fn0 a -\u003e a"},{"name":"runFn1","module":"Data.Function","detail":"runFn1 :: forall a b. Fn1 a b -\u003e a -\u003e b"},{"name":"runFn2","module":"Data.Function","detail":"runFn2 :: forall a b c. Fn2 a b c -\u003e a -\u003e b -\u003e c"},{"name":"runFn3","module":"Data.Function","detail":"runFn3 :: forall a b c d. Fn3 a b c d -\u003e a -\u003e b -\u003e c -\u003e d"},{"name":"runFn4","module":"Data.Function","detail":"runFn4 :: forall a b c d e. Fn4 a b c d e -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e"},{"name":"runFn5","module":"Data.Function","detail":"runFn5 :: forall a b c d e f. Fn5 a b c d e f -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f"},{"name":"runFn6","module":"Data.Function","detail":"runFn6 :: forall a b c d e f g. Fn6 a b c d e f g -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g"},{"name":"runFn7","module":"Data.Function","detail":"runFn7 :: forall a b c d e f g h. Fn7 a b c d e f g h -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h"},{"name":"runFn8","module":"Data.Function","detail":"runFn8 :: forall a b c d e f g h i. Fn8 a b c d e f g h i -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i"},{"name":"runFn9","module":"Data.Function","detail":"runFn9 :: forall a b c d e f g h i j. Fn9 a b c d e f g h i j -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j"},{"name":"runFn10","module":"Data.Function","detail":"runFn10 :: forall a b c d e f g h i j k. Fn10 a b c d e f g h i j k -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e k"},{"name":"Ref","module":"Data.Eq","detail":"newtype Ref a = Ref a"},{"name":"Ref","module":"Data.Eq","detail":"newtype Ref a = Ref a"},{"name":"liftRef","module":"Data.Eq","detail":"liftRef :: forall a b. (a -\u003e a -\u003e b) -\u003e Ref a -\u003e Ref a -\u003e b"},{"name":"eqRef","module":"Data.Eq","detail":"instance eqRef :: Eq (Ref a)"},{"name":"functorRef","module":"Data.Eq","detail":"instance functorRef :: Functor Ref"},{"name":"unsafeIndex","module":"Prelude.Unsafe","detail":"unsafeIndex :: forall a. [a] -\u003e Number -\u003e a"},{"name":"Eff","module":"Control.Monad.Eff","detail":"data Eff :: # ! -\u003e * -\u003e *"},{"name":"returnE","module":"Control.Monad.Eff","detail":"returnE :: forall e a. a -\u003e Eff e a"},{"name":"bindE","module":"Control.Monad.Eff","detail":"bindE :: forall e a b. Eff e a -\u003e (a -\u003e Eff e b) -\u003e Eff e b"},{"name":"Pure","module":"Control.Monad.Eff","detail":"type Pure a = forall e. Eff e a"},{"name":"runPure","module":"Control.Monad.Eff","detail":"runPure :: forall a. Pure a -\u003e a"},{"name":"functorEff","module":"Control.Monad.Eff","detail":"instance functorEff :: Functor (Eff e)"},{"name":"applyEff","module":"Control.Monad.Eff","detail":"instance applyEff :: Apply (Eff e)"},{"name":"applicativeEff","module":"Control.Monad.Eff","detail":"instance applicativeEff :: Applicative (Eff e)"},{"name":"bindEff","module":"Control.Monad.Eff","detail":"instance bindEff :: Bind (Eff e)"},{"name":"monadEff","module":"Control.Monad.Eff","detail":"instance monadEff :: Monad (Eff e)"},{"name":"untilE","module":"Control.Monad.Eff","detail":"untilE :: forall e. Eff e Boolean -\u003e Eff e Unit"},{"name":"whileE","module":"Control.Monad.Eff","detail":"whileE :: forall e a. Eff e Boolean -\u003e Eff e a -\u003e Eff e Unit"},{"name":"forE","module":"Control.Monad.Eff","detail":"forE :: forall e. Number -\u003e Number -\u003e (Number -\u003e Eff e Unit) -\u003e Eff e Unit"},{"name":"foreachE","module":"Control.Monad.Eff","detail":"foreachE :: forall e a. [a] -\u003e (a -\u003e Eff e Unit) -\u003e Eff e Unit"},{"name":"unsafeInterleaveEff","module":"Control.Monad.Eff.Unsafe","detail":"unsafeInterleaveEff :: forall eff1 eff2 a. Eff eff1 a -\u003e Eff eff2 a"},{"name":"Trace","module":"Debug.Trace","detail":"data Trace :: !"},{"name":"trace","module":"Debug.Trace","detail":"trace :: forall r. String -\u003e Eff (trace :: Trace | r) Unit"},{"name":"print","module":"Debug.Trace","detail":"print :: forall a r. (Show a) =\u003e a -\u003e Eff (trace :: Trace | r) Unit"},{"name":"ST","module":"Control.Monad.ST","detail":"data ST :: * -\u003e !"},{"name":"STRef","module":"Control.Monad.ST","detail":"data STRef :: * -\u003e * -\u003e *"},{"name":"STArray","module":"Control.Monad.ST","detail":"data STArray :: * -\u003e * -\u003e *"},{"name":"newSTRef","module":"Control.Monad.ST","detail":"newSTRef :: forall a h r. a -\u003e Eff (st :: ST h | r) (STRef h a)"},{"name":"readSTRef","module":"Control.Monad.ST","detail":"readSTRef :: forall a h r. STRef h a -\u003e Eff (st :: ST h | r) a"},{"name":"modifySTRef","module":"Control.Monad.ST","detail":"modifySTRef :: forall a h r. STRef h a -\u003e (a -\u003e a) -\u003e Eff (st :: ST h | r) a"},{"name":"writeSTRef","module":"Control.Monad.ST","detail":"writeSTRef :: forall a h r. STRef h a -\u003e a -\u003e Eff (st :: ST h | r) a"},{"name":"newSTArray","module":"Control.Monad.ST","detail":"newSTArray :: forall a h r. Number -\u003e a -\u003e Eff (st :: ST h | r) (STArray h a)"},{"name":"peekSTArray","module":"Control.Monad.ST","detail":"peekSTArray :: forall a h r. STArray h a -\u003e Eff (st :: ST h | r) a"},{"name":"pokeSTArray","module":"Control.Monad.ST","detail":"pokeSTArray :: forall a h r. STArray h a -\u003e Number -\u003e a -\u003e Eff (st :: ST h | r) a"},{"name":"runST","module":"Control.Monad.ST","detail":"runST :: forall a r. (forall h. Eff (st :: ST h | r) a) -\u003e Eff r a"},{"name":"runSTArray","module":"Control.Monad.ST","detail":"runSTArray :: forall a r. (forall h. Eff (st :: ST h | r) (STArray h a)) -\u003e Eff r [a]"},{"name":"TestEither","module":"Test.QuickCheck.Either","detail":"data TestEither a b = TestEither (Either a b)"},{"name":"TestEither","module":"Test.QuickCheck.Either","detail":"data TestEither a b = TestEither (Either a b)"},{"name":"runTestEither","module":"Test.QuickCheck.Either","detail":"runTestEither :: forall a b. TestEither a b -\u003e Either a b"},{"name":"lift","module":"Test.QuickCheck.Either","detail":"lift :: forall a b c. (Either a b -\u003e Either a b -\u003e c) -\u003e TestEither a b -\u003e TestEither a b -\u003e c"},{"name":"arbEither","module":"Test.QuickCheck.Either","detail":"instance arbEither :: (Arbitrary a, Arbitrary b) =\u003e Arbitrary (TestEither a b)"},{"name":"showTestEither","module":"Test.QuickCheck.Either","detail":"instance showTestEither :: (Show a, Show b) =\u003e Show (TestEither a b)"},{"name":"eqTestEither","module":"Test.QuickCheck.Either","detail":"instance eqTestEither :: (Eq a, Eq b) =\u003e Eq (TestEither a b)"},{"name":"ordTestEither","module":"Test.QuickCheck.Either","detail":"instance ordTestEither :: (Ord a, Ord b) =\u003e Ord (TestEither a b)"},{"name":"functorTestEither","module":"Test.QuickCheck.Either","detail":"instance functorTestEither :: Functor (TestEither a)"},{"name":"applyTestEither","module":"Test.QuickCheck.Either","detail":"instance applyTestEither :: Apply (TestEither a)"},{"name":"applicativeTestEither","module":"Test.QuickCheck.Either","detail":"instance applicativeTestEither :: Applicative (TestEither a)"},{"name":"bindTestEither","module":"Test.QuickCheck.Either","detail":"instance bindTestEither :: Bind (TestEither a)"},{"name":"monadTestEither","module":"Test.QuickCheck.Either","detail":"instance monadTestEither :: Monad (TestEither a)"},{"name":"TestMaybe","module":"Test.QuickCheck.Maybe","detail":"data TestMaybe a = TestMaybe (Maybe a)"},{"name":"TestMaybe","module":"Test.QuickCheck.Maybe","detail":"data TestMaybe a = TestMaybe (Maybe a)"},{"name":"runTestMaybe","module":"Test.QuickCheck.Maybe","detail":"runTestMaybe :: forall a. TestMaybe a -\u003e Maybe a"},{"name":"lift","module":"Test.QuickCheck.Maybe","detail":"lift :: forall a b. (Maybe a -\u003e Maybe a -\u003e b) -\u003e TestMaybe a -\u003e TestMaybe a -\u003e b"},{"name":"arbMaybe","module":"Test.QuickCheck.Maybe","detail":"instance arbMaybe :: (Arbitrary a) =\u003e Arbitrary (TestMaybe a)"},{"name":"showTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance showTestMaybe :: (Show a, Show b) =\u003e Show (TestMaybe a)"},{"name":"eqTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance eqTestMaybe :: (Eq a) =\u003e Eq (TestMaybe a)"},{"name":"ordTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance ordTestMaybe :: (Ord a) =\u003e Ord (TestMaybe a)"},{"name":"functorTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance functorTestMaybe :: Functor TestMaybe"},{"name":"applyTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance applyTestMaybe :: Apply TestMaybe"},{"name":"applicativeTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance applicativeTestMaybe :: Applicative TestMaybe"},{"name":"alternativeTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance alternativeTestMaybe :: Alternative TestMaybe"},{"name":"bindTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance bindTestMaybe :: Bind TestMaybe"},{"name":"monadTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance monadTestMaybe :: Monad TestMaybe"},{"name":"TestTuple","module":"Test.QuickCheck.Tuple","detail":"data TestTuple a b = TestTuple (Tuple a b)"},{"name":"TestTuple","module":"Test.QuickCheck.Tuple","detail":"data TestTuple a b = TestTuple (Tuple a b)"},{"name":"runTestTuple","module":"Test.QuickCheck.Tuple","detail":"runTestTuple :: forall a b. TestTuple a b -\u003e Tuple a b"},{"name":"lift","module":"Test.QuickCheck.Tuple","detail":"lift :: forall a b c. (Tuple a b -\u003e Tuple a b -\u003e c) -\u003e TestTuple a b -\u003e TestTuple a b -\u003e c"},{"name":"arbTuple","module":"Test.QuickCheck.Tuple","detail":"instance arbTuple :: (Arbitrary a, Arbitrary b) =\u003e Arbitrary (TestTuple a b)"},{"name":"showTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance showTestTuple :: (Show a, Show b) =\u003e Show (TestTuple a b)"},{"name":"eqTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance eqTestTuple :: (Eq a, Eq b) =\u003e Eq (TestTuple a b)"},{"name":"ordTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance ordTestTuple :: (Ord a, Ord b) =\u003e Ord (TestTuple a b)"},{"name":"functorTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance functorTestTuple :: Functor (TestTuple a)"},{"name":"applyTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance applyTestTuple :: (Semigroup a) =\u003e Apply (TestTuple a)"},{"name":"applicativeTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance applicativeTestTuple :: (Monoid a) =\u003e Applicative (TestTuple a)"},{"name":"bindTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance bindTestTuple :: (Semigroup a) =\u003e Bind (TestTuple a)"},{"name":"monadTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance monadTestTuple :: (Monoid a) =\u003e Monad (TestTuple a)"},{"name":"head","module":"Data.Array.Unsafe","detail":"head :: forall a. [a] -\u003e a"},{"name":"tail","module":"Data.Array.Unsafe","detail":"tail :: forall a. [a] -\u003e [a]"},{"name":"last","module":"Data.Array.Unsafe","detail":"last :: forall a. [a] -\u003e a"},{"name":"init","module":"Data.Array.Unsafe","detail":"init :: forall a. [a] -\u003e [a]"},{"name":"(!!)","module":"Data.Array","detail":"(!!) :: forall a. [a] -\u003e Number -\u003e Maybe a"},{"name":"snoc","module":"Data.Array","detail":"snoc :: forall a. [a] -\u003e a -\u003e [a]"},{"name":"singleton","module":"Data.Array","detail":"singleton :: forall a. a -\u003e [a]"},{"name":"head","module":"Data.Array","detail":"head :: forall a. [a] -\u003e Maybe a"},{"name":"last","module":"Data.Array","detail":"last :: forall a. [a] -\u003e Maybe a"},{"name":"tail","module":"Data.Array","detail":"tail :: forall a. [a] -\u003e Maybe [a]"},{"name":"init","module":"Data.Array","detail":"init :: forall a. [a] -\u003e Maybe [a]"},{"name":"null","module":"Data.Array","detail":"null :: forall a. [a] -\u003e Boolean"},{"name":"length","module":"Data.Array","detail":"length :: forall a. [a] -\u003e Number"},{"name":"findIndex","module":"Data.Array","detail":"findIndex :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e Number"},{"name":"findLastIndex","module":"Data.Array","detail":"findLastIndex :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e Number"},{"name":"elemIndex","module":"Data.Array","detail":"elemIndex :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e Number"},{"name":"elemLastIndex","module":"Data.Array","detail":"elemLastIndex :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e Number"},{"name":"append","module":"Data.Array","detail":"append :: forall a. [a] -\u003e [a] -\u003e [a]"},{"name":"concat","module":"Data.Array","detail":"concat :: forall a. [[a]] -\u003e [a]"},{"name":"reverse","module":"Data.Array","detail":"reverse :: forall a. [a] -\u003e [a]"},{"name":"drop","module":"Data.Array","detail":"drop :: forall a. Number -\u003e [a] -\u003e [a]"},{"name":"take","module":"Data.Array","detail":"take :: forall a. Number -\u003e [a] -\u003e [a]"},{"name":"slice","module":"Data.Array","detail":"slice :: forall a. Number -\u003e Number -\u003e [a] -\u003e [a]"},{"name":"insertAt","module":"Data.Array","detail":"insertAt :: forall a. Number -\u003e a -\u003e [a] -\u003e [a]"},{"name":"deleteAt","module":"Data.Array","detail":"deleteAt :: forall a. Number -\u003e Number -\u003e [a] -\u003e [a]"},{"name":"updateAt","module":"Data.Array","detail":"updateAt :: forall a. Number -\u003e a -\u003e [a] -\u003e [a]"},{"name":"deleteBy","module":"Data.Array","detail":"deleteBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e a -\u003e [a] -\u003e [a]"},{"name":"delete","module":"Data.Array","detail":"delete :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e [a]"},{"name":"(\\\\)","module":"Data.Array","detail":"(\\\\) :: forall a. (Eq a) =\u003e [a] -\u003e [a] -\u003e [a]"},{"name":"intersectBy","module":"Data.Array","detail":"intersectBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a] -\u003e [a]"},{"name":"intersect","module":"Data.Array","detail":"intersect :: forall a. (Eq a) =\u003e [a] -\u003e [a] -\u003e [a]"},{"name":"concatMap","module":"Data.Array","detail":"concatMap :: forall a b. (a -\u003e [b]) -\u003e [a] -\u003e [b]"},{"name":"map","module":"Data.Array","detail":"map :: forall a b. (a -\u003e b) -\u003e [a] -\u003e [b]"},{"name":"mapMaybe","module":"Data.Array","detail":"mapMaybe :: forall a b. (a -\u003e Maybe b) -\u003e [a] -\u003e [b]"},{"name":"catMaybes","module":"Data.Array","detail":"catMaybes :: forall a. [Maybe a] -\u003e [a]"},{"name":"filter","module":"Data.Array","detail":"filter :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e [a]"},{"name":"range","module":"Data.Array","detail":"range :: Number -\u003e Number -\u003e [Number]"},{"name":"zipWith","module":"Data.Array","detail":"zipWith :: forall a b c. (a -\u003e b -\u003e c) -\u003e [a] -\u003e [b] -\u003e [c]"},{"name":"nub","module":"Data.Array","detail":"nub :: forall a. (Eq a) =\u003e [a] -\u003e [a]"},{"name":"nubBy","module":"Data.Array","detail":"nubBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a]"},{"name":"sort","module":"Data.Array","detail":"sort :: forall a. (Ord a) =\u003e [a] -\u003e [a]"},{"name":"sortBy","module":"Data.Array","detail":"sortBy :: forall a. (a -\u003e a -\u003e Ordering) -\u003e [a] -\u003e [a]"},{"name":"sortJS","module":"Data.Array","detail":"sortJS :: forall a. (a -\u003e a -\u003e Number) -\u003e [a] -\u003e [a]"},{"name":"group","module":"Data.Array","detail":"group :: forall a. (Eq a) =\u003e [a] -\u003e [[a]]"},{"name":"group'","module":"Data.Array","detail":"group' :: forall a. (Ord a) =\u003e [a] -\u003e [[a]]"},{"name":"groupBy","module":"Data.Array","detail":"groupBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [[a]]"},{"name":"span","module":"Data.Array","detail":"span :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e { rest :: [a], init :: [a] }"},{"name":"functorArray","module":"Data.Array","detail":"instance functorArray :: Functor Prim.Array"},{"name":"applyArray","module":"Data.Array","detail":"instance applyArray :: Apply Prim.Array"},{"name":"applicativeArray","module":"Data.Array","detail":"instance applicativeArray :: Applicative Prim.Array"},{"name":"bindArray","module":"Data.Array","detail":"instance bindArray :: Bind Prim.Array"},{"name":"monadArray","module":"Data.Array","detail":"instance monadArray :: Monad Prim.Array"},{"name":"semigroupArray","module":"Data.Array","detail":"instance semigroupArray :: Semigroup [a]"},{"name":"alternativeArray","module":"Data.Array","detail":"instance alternativeArray :: Alternative Prim.Array"},{"name":"Kleisli","module":"Control.Arrow.Kleisli","detail":"data Kleisli m a b = Kleisli (a -\u003e m b)"},{"name":"Kleisli","module":"Control.Arrow.Kleisli","detail":"data Kleisli m a b = Kleisli (a -\u003e m b)"},{"name":"runKleisli","module":"Control.Arrow.Kleisli","detail":"runKleisli :: forall m a b. Kleisli m a b -\u003e a -\u003e m b"},{"name":"semigroupoidKleisli","module":"Control.Arrow.Kleisli","detail":"instance semigroupoidKleisli :: (Monad m) =\u003e Semigroupoid (Kleisli m)"},{"name":"categoryKleisli","module":"Control.Arrow.Kleisli","detail":"instance categoryKleisli :: (Monad m) =\u003e Category (Kleisli m)"},{"name":"arrowKleisli","module":"Control.Arrow.Kleisli","detail":"instance arrowKleisli :: (Monad m) =\u003e Arrow (Kleisli m)"},{"name":"Arrow","module":"Control.Arrow","detail":"class (Category a) \u003c= Arrow a where"},{"name":"arr","module":"Control.Arrow","detail":"arr :: forall b c. (b -\u003e c) -\u003e a b c"},{"name":"first","module":"Control.Arrow","detail":"first :: forall b c d. a b c -\u003e a (Tuple b d) (Tuple c d)"},{"name":"arrowFunction","module":"Control.Arrow","detail":"instance arrowFunction :: Arrow Prim.Function"},{"name":"second","module":"Control.Arrow","detail":"second :: forall a b c d. (Arrow a) =\u003e a b c -\u003e a (Tuple d b) (Tuple d c)"},{"name":"(***)","module":"Control.Arrow","detail":"(***) :: forall a b b' c c'. (Arrow a) =\u003e a b c -\u003e a b' c' -\u003e a (Tuple b b') (Tuple c c')"},{"name":"(&&&)","module":"Control.Arrow","detail":"(&&&) :: forall a b b' c c'. (Arrow a) =\u003e a b c -\u003e a b c' -\u003e a b (Tuple c c')"},{"name":"ArrowZero","module":"Control.Arrow","detail":"class ArrowZero a where"},{"name":"azero","module":"Control.Arrow","detail":"azero :: forall b c. a b c"},{"name":"ArrowPlus","module":"Control.Arrow","detail":"class ArrowPlus a where"},{"name":"(\u003c+\u003e)","module":"Control.Arrow","detail":"(\u003c+\u003e) :: forall b c. a b c -\u003e a b c -\u003e a b c"},{"name":"Biapplicative","module":"Control.Biapplicative","detail":"class (Biapply w) \u003c= Biapplicative w where"},{"name":"bipure","module":"Control.Biapplicative","detail":"bipure :: forall a b. a -\u003e b -\u003e w a b"},{"name":"biapplicativeTuple","module":"Control.Biapplicative","detail":"instance biapplicativeTuple :: Biapplicative Tuple"},{"name":"(\u003c\u003c$\u003e\u003e)","module":"Control.Biapply","detail":"(\u003c\u003c$\u003e\u003e) :: forall a b. (a -\u003e b) -\u003e a -\u003e b"},{"name":"Biapply","module":"Control.Biapply","detail":"class (Bifunctor w) \u003c= Biapply w where"},{"name":"(\u003c\u003c*\u003e\u003e)","module":"Control.Biapply","detail":"(\u003c\u003c*\u003e\u003e) :: forall a b c d. w (a -\u003e b) (c -\u003e d) -\u003e w a c -\u003e w b d"},{"name":"(*\u003e\u003e)","module":"Control.Biapply","detail":"(*\u003e\u003e) :: forall w a b c d. (Biapply w) =\u003e w a b -\u003e w c d -\u003e w c d"},{"name":"(\u003c\u003c*)","module":"Control.Biapply","detail":"(\u003c\u003c*) :: forall w a b c d. (Biapply w) =\u003e w a b -\u003e w c d -\u003e w a b"},{"name":"bilift2","module":"Control.Biapply","detail":"bilift2 :: forall w a b c d e f. (Biapply w) =\u003e (a -\u003e b -\u003e c) -\u003e (d -\u003e e -\u003e f) -\u003e w a d -\u003e w b e -\u003e w c f"},{"name":"bilift3","module":"Control.Biapply","detail":"bilift3 :: forall w a b c d e f g h. (Biapply w) =\u003e (a -\u003e b -\u003e c -\u003e d) -\u003e (e -\u003e f -\u003e g -\u003e h) -\u003e w a e -\u003e w b f -\u003e w c g -\u003e w d h"},{"name":"biapplyTuple","module":"Control.Biapply","detail":"instance biapplyTuple :: Biapply Tuple"},{"name":"Bifoldable","module":"Data.Bifoldable","detail":"class Bifoldable p where"},{"name":"bifoldr","module":"Data.Bifoldable","detail":"bifoldr :: forall a b c. (a -\u003e c -\u003e c) -\u003e (b -\u003e c -\u003e c) -\u003e c -\u003e p a b -\u003e c"},{"name":"bifoldl","module":"Data.Bifoldable","detail":"bifoldl :: forall a b c. (c -\u003e a -\u003e c) -\u003e (c -\u003e b -\u003e c) -\u003e c -\u003e p a b -\u003e c"},{"name":"bifoldMap","module":"Data.Bifoldable","detail":"bifoldMap :: forall m a b. (Monoid m) =\u003e (a -\u003e m) -\u003e (b -\u003e m) -\u003e p a b -\u003e m"},{"name":"bifoldableTuple","module":"Data.Bifoldable","detail":"instance bifoldableTuple :: Bifoldable Tuple"},{"name":"bifoldableEither","module":"Data.Bifoldable","detail":"instance bifoldableEither :: Bifoldable Either"},{"name":"bifold","module":"Data.Bifoldable","detail":"bifold :: forall t m. (Bifoldable t, Monoid m) =\u003e t m m -\u003e m"},{"name":"bitraverse_","module":"Data.Bifoldable","detail":"bitraverse_ :: forall t f a b c d. (Bifoldable t, Applicative f) =\u003e (a -\u003e f c) -\u003e (b -\u003e f d) -\u003e t a b -\u003e f Unit"},{"name":"bifor_","module":"Data.Bifoldable","detail":"bifor_ :: forall t f a b c d. (Bifoldable t, Applicative f) =\u003e t a b -\u003e (a -\u003e f c) -\u003e (b -\u003e f d) -\u003e f Unit"},{"name":"bisequence_","module":"Data.Bifoldable","detail":"bisequence_ :: forall t f a b. (Bifoldable t, Applicative f) =\u003e t (f a) (f b) -\u003e f Unit"},{"name":"biany","module":"Data.Bifoldable","detail":"biany :: forall t a b. (Bifoldable t) =\u003e (a -\u003e Boolean) -\u003e (b -\u003e Boolean) -\u003e t a b -\u003e Boolean"},{"name":"biall","module":"Data.Bifoldable","detail":"biall :: forall t a b. (Bifoldable t) =\u003e (a -\u003e Boolean) -\u003e (b -\u003e Boolean) -\u003e t a b -\u003e Boolean"},{"name":"Clown","module":"Data.Bifunctor.Clown","detail":"data Clown f a b = Clown (f a)"},{"name":"Clown","module":"Data.Bifunctor.Clown","detail":"data Clown f a b = Clown (f a)"},{"name":"runClown","module":"Data.Bifunctor.Clown","detail":"runClown :: forall f a b. Clown f a b -\u003e f a"},{"name":"clownBifunctor","module":"Data.Bifunctor.Clown","detail":"instance clownBifunctor :: (Functor f) =\u003e Bifunctor (Clown f)"},{"name":"clownFunctor","module":"Data.Bifunctor.Clown","detail":"instance clownFunctor :: Functor (Clown f a)"},{"name":"clownBiapply","module":"Data.Bifunctor.Clown","detail":"instance clownBiapply :: (Apply f) =\u003e Biapply (Clown f)"},{"name":"clownBiapplicative","module":"Data.Bifunctor.Clown","detail":"instance clownBiapplicative :: (Applicative f) =\u003e Biapplicative (Clown f)"},{"name":"clownBifoldable","module":"Data.Bifunctor.Clown","detail":"instance clownBifoldable :: (Foldable f) =\u003e Bifoldable (Clown f)"},{"name":"clownFoldable","module":"Data.Bifunctor.Clown","detail":"instance clownFoldable :: Foldable (Clown f a)"},{"name":"clownBitraversable","module":"Data.Bifunctor.Clown","detail":"instance clownBitraversable :: (Traversable f) =\u003e Bitraversable (Clown f)"},{"name":"clownTraversable","module":"Data.Bifunctor.Clown","detail":"instance clownTraversable :: Traversable (Clown f a)"},{"name":"Flip","module":"Data.Bifunctor.Flip","detail":"data Flip p a b = Flip (p b a)"},{"name":"Flip","module":"Data.Bifunctor.Flip","detail":"data Flip p a b = Flip (p b a)"},{"name":"runFlip","module":"Data.Bifunctor.Flip","detail":"runFlip :: forall p a b. Flip p a b -\u003e p b a"},{"name":"flipBifunctor","module":"Data.Bifunctor.Flip","detail":"instance flipBifunctor :: (Bifunctor p) =\u003e Bifunctor (Flip p)"},{"name":"flipFunctor","module":"Data.Bifunctor.Flip","detail":"instance flipFunctor :: (Bifunctor p) =\u003e Functor (Flip p a)"},{"name":"flipBiapply","module":"Data.Bifunctor.Flip","detail":"instance flipBiapply :: (Biapply p) =\u003e Biapply (Flip p)"},{"name":"flipBiapplicative","module":"Data.Bifunctor.Flip","detail":"instance flipBiapplicative :: (Biapplicative p) =\u003e Biapplicative (Flip p)"},{"name":"flipBifoldable","module":"Data.Bifunctor.Flip","detail":"instance flipBifoldable :: (Bifoldable p) =\u003e Bifoldable (Flip p)"},{"name":"flipFoldable","module":"Data.Bifunctor.Flip","detail":"instance flipFoldable :: (Bifoldable p) =\u003e Foldable (Flip p a)"},{"name":"flipBitraversable","module":"Data.Bifunctor.Flip","detail":"instance flipBitraversable :: (Bitraversable p) =\u003e Bitraversable (Flip p)"},{"name":"flipTraversable","module":"Data.Bifunctor.Flip","detail":"instance flipTraversable :: (Bitraversable p) =\u003e Traversable (Flip p a)"},{"name":"Join","module":"Data.Bifunctor.Join","detail":"data Join p a = Join (p a a)"},{"name":"Join","module":"Data.Bifunctor.Join","detail":"data Join p a = Join (p a a)"},{"name":"runJoin","module":"Data.Bifunctor.Join","detail":"runJoin :: forall p a. Join p a -\u003e p a a"},{"name":"joinFunctor","module":"Data.Bifunctor.Join","detail":"instance joinFunctor :: (Bifunctor p) =\u003e Functor (Join p)"},{"name":"joinApply","module":"Data.Bifunctor.Join","detail":"instance joinApply :: (Biapply p) =\u003e Apply (Join p)"},{"name":"joinApplicative","module":"Data.Bifunctor.Join","detail":"instance joinApplicative :: (Biapplicative p) =\u003e Applicative (Join p)"},{"name":"joinFoldable","module":"Data.Bifunctor.Join","detail":"instance joinFoldable :: (Bifoldable p) =\u003e Foldable (Join p)"},{"name":"joinTraversable","module":"Data.Bifunctor.Join","detail":"instance joinTraversable :: (Bitraversable p) =\u003e Traversable (Join p)"},{"name":"Joker","module":"Data.Bifunctor.Joker","detail":"data Joker g a b = Joker (g b)"},{"name":"Joker","module":"Data.Bifunctor.Joker","detail":"data Joker g a b = Joker (g b)"},{"name":"runJoker","module":"Data.Bifunctor.Joker","detail":"runJoker :: forall g a b. Joker g a b -\u003e g b"},{"name":"jokerBifunctor","module":"Data.Bifunctor.Joker","detail":"instance jokerBifunctor :: (Functor g) =\u003e Bifunctor (Joker g)"},{"name":"jokerFunctor","module":"Data.Bifunctor.Joker","detail":"instance jokerFunctor :: (Functor g) =\u003e Functor (Joker g a)"},{"name":"jokerBiapply","module":"Data.Bifunctor.Joker","detail":"instance jokerBiapply :: (Apply g) =\u003e Biapply (Joker g)"},{"name":"jokerBiapplicative","module":"Data.Bifunctor.Joker","detail":"instance jokerBiapplicative :: (Applicative g) =\u003e Biapplicative (Joker g)"},{"name":"jokerBifoldable","module":"Data.Bifunctor.Joker","detail":"instance jokerBifoldable :: (Foldable g) =\u003e Bifoldable (Joker g)"},{"name":"jokerFoldable","module":"Data.Bifunctor.Joker","detail":"instance jokerFoldable :: (Foldable g) =\u003e Foldable (Joker g a)"},{"name":"jokerBitraversable","module":"Data.Bifunctor.Joker","detail":"instance jokerBitraversable :: (Traversable g) =\u003e Bitraversable (Joker g)"},{"name":"jokerTraversable","module":"Data.Bifunctor.Joker","detail":"instance jokerTraversable :: (Traversable g) =\u003e Traversable (Joker g a)"},{"name":"Product","module":"Data.Bifunctor.Product","detail":"data Product f g a b = Pair (f a b) (g a b)"},{"name":"Pair","module":"Data.Bifunctor.Product","detail":"data Product f g a b = Pair (f a b) (g a b)"},{"name":"productBifunctor","module":"Data.Bifunctor.Product","detail":"instance productBifunctor :: (Bifunctor f, Bifunctor g) =\u003e Bifunctor (Product f g)"},{"name":"productBiapply","module":"Data.Bifunctor.Product","detail":"instance productBiapply :: (Biapply f, Biapply g) =\u003e Biapply (Product f g)"},{"name":"productBiapplicative","module":"Data.Bifunctor.Product","detail":"instance productBiapplicative :: (Biapplicative f, Biapplicative g) =\u003e Biapplicative (Product f g)"},{"name":"productBifoldable","module":"Data.Bifunctor.Product","detail":"instance productBifoldable :: (Bifoldable f, Bifoldable g) =\u003e Bifoldable (Product f g)"},{"name":"productBitraversable","module":"Data.Bifunctor.Product","detail":"instance productBitraversable :: (Bitraversable f, Bitraversable g) =\u003e Bitraversable (Product f g)"},{"name":"Wrap","module":"Data.Bifunctor.Wrap","detail":"data Wrap p a b = Wrap (p a b)"},{"name":"Wrap","module":"Data.Bifunctor.Wrap","detail":"data Wrap p a b = Wrap (p a b)"},{"name":"unwrap","module":"Data.Bifunctor.Wrap","detail":"unwrap :: forall p a b. Wrap p a b -\u003e p a b"},{"name":"wrapBifunctor","module":"Data.Bifunctor.Wrap","detail":"instance wrapBifunctor :: (Bifunctor p) =\u003e Bifunctor (Wrap p)"},{"name":"wrapFunctor","module":"Data.Bifunctor.Wrap","detail":"instance wrapFunctor :: (Bifunctor p) =\u003e Functor (Wrap p a)"},{"name":"wrapBiapply","module":"Data.Bifunctor.Wrap","detail":"instance wrapBiapply :: (Biapply p) =\u003e Biapply (Wrap p)"},{"name":"wrapBiapplicative","module":"Data.Bifunctor.Wrap","detail":"instance wrapBiapplicative :: (Biapplicative p) =\u003e Biapplicative (Wrap p)"},{"name":"wrapBifoldable","module":"Data.Bifunctor.Wrap","detail":"instance wrapBifoldable :: (Bifoldable p) =\u003e Bifoldable (Wrap p)"},{"name":"wrapFoldable","module":"Data.Bifunctor.Wrap","detail":"instance wrapFoldable :: (Bifoldable p) =\u003e Foldable (Wrap p a)"},{"name":"wrapBitraversable","module":"Data.Bifunctor.Wrap","detail":"instance wrapBitraversable :: (Bitraversable p) =\u003e Bitraversable (Wrap p)"},{"name":"wrapTraversable","module":"Data.Bifunctor.Wrap","detail":"instance wrapTraversable :: (Bitraversable p) =\u003e Traversable (Wrap p a)"},{"name":"Bifunctor","module":"Data.Bifunctor","detail":"class Bifunctor f where"},{"name":"bimap","module":"Data.Bifunctor","detail":"bimap :: forall a b c d. (a -\u003e b) -\u003e (c -\u003e d) -\u003e f a c -\u003e f b d"},{"name":"lmap","module":"Data.Bifunctor","detail":"lmap :: forall f a b c. (Bifunctor f) =\u003e (a -\u003e b) -\u003e f a c -\u003e f b c"},{"name":"rmap","module":"Data.Bifunctor","detail":"rmap :: forall f a b c. (Bifunctor f) =\u003e (b -\u003e c) -\u003e f a b -\u003e f a c"},{"name":"bifunctorEither","module":"Data.Bifunctor","detail":"instance bifunctorEither :: Bifunctor Either"},{"name":"bifunctorTuple","module":"Data.Bifunctor","detail":"instance bifunctorTuple :: Bifunctor Tuple"},{"name":"Bitraversable","module":"Data.Bitraversable","detail":"class (Bifunctor t, Bifoldable t) \u003c= Bitraversable t where"},{"name":"bitraverse","module":"Data.Bitraversable","detail":"bitraverse :: forall f a b c d. (Applicative f) =\u003e (a -\u003e f c) -\u003e (b -\u003e f d) -\u003e t a b -\u003e f (t c d)"},{"name":"bisequence","module":"Data.Bitraversable","detail":"bisequence :: forall f a b. (Applicative f) =\u003e t (f a) (f b) -\u003e f (t a b)"},{"name":"bitraversableTuple","module":"Data.Bitraversable","detail":"instance bitraversableTuple :: Bitraversable Tuple"},{"name":"bitraversableEither","module":"Data.Bitraversable","detail":"instance bitraversableEither :: Bitraversable Either"},{"name":"bifor","module":"Data.Bitraversable","detail":"bifor :: forall t f a b c d. (Bitraversable t, Applicative f) =\u003e t a b -\u003e (a -\u003e f c) -\u003e (b -\u003e f d) -\u003e f (t c d)"},{"name":"Canvas","module":"Graphics.Canvas","detail":"data Canvas :: !"},{"name":"CanvasElement","module":"Graphics.Canvas","detail":"data CanvasElement :: *"},{"name":"Context2D","module":"Graphics.Canvas","detail":"data Context2D :: *"},{"name":"getContext2D","module":"Graphics.Canvas","detail":"getContext2D :: forall eff. CanvasElement -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"setLineWidth","module":"Graphics.Canvas","detail":"setLineWidth :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"setFillStyle","module":"Graphics.Canvas","detail":"setFillStyle :: forall eff. String -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"setStrokeStyle","module":"Graphics.Canvas","detail":"setStrokeStyle :: forall eff. String -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"setShadowColor","module":"Graphics.Canvas","detail":"setShadowColor :: forall eff. String -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"setShadowBlur","module":"Graphics.Canvas","detail":"setShadowBlur :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"setShadowOffsetX","module":"Graphics.Canvas","detail":"setShadowOffsetX :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"setShadowOffsetY","module":"Graphics.Canvas","detail":"setShadowOffsetY :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"beginPath","module":"Graphics.Canvas","detail":"beginPath :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"stroke","module":"Graphics.Canvas","detail":"stroke :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"fill","module":"Graphics.Canvas","detail":"fill :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"clip","module":"Graphics.Canvas","detail":"clip :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"lineTo","module":"Graphics.Canvas","detail":"lineTo :: forall eff. Context2D -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"moveTo","module":"Graphics.Canvas","detail":"moveTo :: forall eff. Context2D -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"strokePath","module":"Graphics.Canvas","detail":"strokePath :: forall eff a. Context2D -\u003e Eff (canvas :: Canvas | eff) a -\u003e Eff (canvas :: Canvas | eff) a"},{"name":"fillPath","module":"Graphics.Canvas","detail":"fillPath :: forall eff a. Context2D -\u003e Eff (canvas :: Canvas | eff) a -\u003e Eff (canvas :: Canvas | eff) a"},{"name":"Arc","module":"Graphics.Canvas","detail":"type Arc  = { end :: Number, start :: Number, r :: Number, cy :: Number, cx :: Number }"},{"name":"arc","module":"Graphics.Canvas","detail":"arc :: forall eff. Context2D -\u003e Arc -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"Rectangle","module":"Graphics.Canvas","detail":"type Rectangle  = { h :: Number, w :: Number, y :: Number, x :: Number }"},{"name":"rect","module":"Graphics.Canvas","detail":"rect :: forall eff. Context2D -\u003e Rectangle -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"fillRect","module":"Graphics.Canvas","detail":"fillRect :: forall eff. Context2D -\u003e Rectangle -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"strokeRect","module":"Graphics.Canvas","detail":"strokeRect :: forall eff. Context2D -\u003e Rectangle -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"clearRect","module":"Graphics.Canvas","detail":"clearRect :: forall eff. Context2D -\u003e Rectangle -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"ScaleTransform","module":"Graphics.Canvas","detail":"type ScaleTransform  = { scaleY :: Number, scaleX :: Number }"},{"name":"scale","module":"Graphics.Canvas","detail":"scale :: forall eff. ScaleTransform -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"rotate","module":"Graphics.Canvas","detail":"rotate :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"TranslateTransform","module":"Graphics.Canvas","detail":"type TranslateTransform  = { translateY :: Number, translateX :: Number }"},{"name":"translate","module":"Graphics.Canvas","detail":"translate :: forall eff. TranslateTransform -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"Transform","module":"Graphics.Canvas","detail":"type Transform  = { m32 :: Number, m31 :: Number, m22 :: Number, m21 :: Number, m12 :: Number, m11 :: Number }"},{"name":"transform","module":"Graphics.Canvas","detail":"transform :: forall eff. Transform -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"save","module":"Graphics.Canvas","detail":"save :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"restore","module":"Graphics.Canvas","detail":"restore :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"withContext","module":"Graphics.Canvas","detail":"withContext :: forall eff a. Context2D -\u003e Eff (canvas :: Canvas | eff) a -\u003e Eff (canvas :: Canvas | eff) a"},{"name":"(\u003c*)","module":"Control.Apply","detail":"(\u003c*) :: forall a b f. (Apply f) =\u003e f a -\u003e f b -\u003e f a"},{"name":"(*\u003e)","module":"Control.Apply","detail":"(*\u003e) :: forall a b f. (Apply f) =\u003e f a -\u003e f b -\u003e f b"},{"name":"lift2","module":"Control.Apply","detail":"lift2 :: forall a b c f. (Apply f) =\u003e (a -\u003e b -\u003e c) -\u003e f a -\u003e f b -\u003e f c"},{"name":"lift3","module":"Control.Apply","detail":"lift3 :: forall a b c d f. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d) -\u003e f a -\u003e f b -\u003e f c -\u003e f d"},{"name":"lift4","module":"Control.Apply","detail":"lift4 :: forall a b c d e f. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e"},{"name":"lift5","module":"Control.Apply","detail":"lift5 :: forall a b c d e f g. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e g) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e -\u003e f g"},{"name":"forever","module":"Control.Apply","detail":"forever :: forall a b f. (Apply f) =\u003e f a -\u003e f b"},{"name":"(=\u003c\u003c)","module":"Control.Bind","detail":"(=\u003c\u003c) :: forall a b m. (Bind m) =\u003e (a -\u003e m b) -\u003e m a -\u003e m b"},{"name":"(\u003e=\u003e)","module":"Control.Bind","detail":"(\u003e=\u003e) :: forall a b c m. (Bind m) =\u003e (a -\u003e m b) -\u003e (b -\u003e m c) -\u003e a -\u003e m c"},{"name":"(\u003c=\u003c)","module":"Control.Bind","detail":"(\u003c=\u003c) :: forall a b c m. (Bind m) =\u003e (b -\u003e m c) -\u003e (a -\u003e m b) -\u003e a -\u003e m c"},{"name":"join","module":"Control.Bind","detail":"join :: forall a m. (Bind m) =\u003e m (m a) -\u003e m a"},{"name":"ifM","module":"Control.Bind","detail":"ifM :: forall a m. (Bind m) =\u003e m Boolean -\u003e m a -\u003e m a -\u003e m a"},{"name":"replicateM","module":"Control.Monad","detail":"replicateM :: forall m a. (Monad m) =\u003e Number -\u003e m a -\u003e m [a]"},{"name":"foldM","module":"Control.Monad","detail":"foldM :: forall m a b. (Monad m) =\u003e (a -\u003e b -\u003e m a) -\u003e a -\u003e [b] -\u003e m a"},{"name":"when","module":"Control.Monad","detail":"when :: forall m. (Monad m) =\u003e Boolean -\u003e m Unit -\u003e m Unit"},{"name":"unless","module":"Control.Monad","detail":"unless :: forall m. (Monad m) =\u003e Boolean -\u003e m Unit -\u003e m Unit"},{"name":"jsDateMethod","module":"Data.Date","detail":"jsDateMethod :: forall a. String -\u003e JSDate -\u003e a"},{"name":"jsDateConstructor","module":"Data.Date","detail":"jsDateConstructor :: forall a. a -\u003e JSDate"},{"name":"jsDateFromRecord","module":"Data.Date","detail":"jsDateFromRecord :: { milliseconds :: Number, seconds :: Number, minutes :: Number, hours :: Number, day :: Number, month :: Number, year :: Number } -\u003e JSDate"},{"name":"JSDate","module":"Data.Date","detail":"data JSDate :: *"},{"name":"Now","module":"Data.Date","detail":"data Now :: !"},{"name":"Date","module":"Data.Date","detail":"data Date = DateTime JSDate"},{"name":"DateTime","module":"Data.Date","detail":"data Date = DateTime JSDate"},{"name":"eqDate","module":"Data.Date","detail":"instance eqDate :: Eq Date"},{"name":"ordDate","module":"Data.Date","detail":"instance ordDate :: Ord Date"},{"name":"liftOp","module":"Data.Date","detail":"liftOp :: forall b. (Number -\u003e Number -\u003e b) -\u003e Date -\u003e Date -\u003e b"},{"name":"Year","module":"Data.Date","detail":"type Year  = Number"},{"name":"Month","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"January","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"February","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"March","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"April","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"May","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"June","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"July","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"August","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"September","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"October","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"November","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"December","module":"Data.Date","detail":"data Month = January | February | March | April | May | June | July | August | September | October | November | December"},{"name":"Day","module":"Data.Date","detail":"type Day  = Number"},{"name":"DayOfWeek","module":"Data.Date","detail":"data DayOfWeek = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday"},{"name":"Sunday","module":"Data.Date","detail":"data DayOfWeek = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday"},{"name":"Monday","module":"Data.Date","detail":"data DayOfWeek = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday"},{"name":"Tuesday","module":"Data.Date","detail":"data DayOfWeek = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday"},{"name":"Wednesday","module":"Data.Date","detail":"data DayOfWeek = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday"},{"name":"Thursday","module":"Data.Date","detail":"data DayOfWeek = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday"},{"name":"Friday","module":"Data.Date","detail":"data DayOfWeek = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday"},{"name":"Saturday","module":"Data.Date","detail":"data DayOfWeek = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday"},{"name":"Hours","module":"Data.Date","detail":"type Hours  = Number"},{"name":"Minutes","module":"Data.Date","detail":"type Minutes  = Number"},{"name":"Seconds","module":"Data.Date","detail":"type Seconds  = Number"},{"name":"Milliseconds","module":"Data.Date","detail":"type Milliseconds  = Number"},{"name":"enumMonth","module":"Data.Date","detail":"instance enumMonth :: Enum Month"},{"name":"showMonth","module":"Data.Date","detail":"instance showMonth :: Show Month"},{"name":"enumDayOfWeek","module":"Data.Date","detail":"instance enumDayOfWeek :: Enum DayOfWeek"},{"name":"showDayOfWeek","module":"Data.Date","detail":"instance showDayOfWeek :: Show DayOfWeek"},{"name":"fromJSDate","module":"Data.Date","detail":"fromJSDate :: JSDate -\u003e Maybe Date"},{"name":"toJSDate","module":"Data.Date","detail":"toJSDate :: Date -\u003e JSDate"},{"name":"liftDate","module":"Data.Date","detail":"liftDate :: forall a. (JSDate -\u003e a) -\u003e Date -\u003e a"},{"name":"nowImpl","module":"Data.Date","detail":"nowImpl :: forall e. (JSDate -\u003e Date) -\u003e Eff (now :: Now | e) Date"},{"name":"now","module":"Data.Date","detail":"now :: forall e. Eff (now :: Now | e) Date"},{"name":"dateTime","module":"Data.Date","detail":"dateTime :: Year -\u003e Month -\u003e Day -\u003e Hours -\u003e Minutes -\u003e Seconds -\u003e Milliseconds -\u003e Maybe Date"},{"name":"date","module":"Data.Date","detail":"date :: Year -\u003e Month -\u003e Day -\u003e Maybe Date"},{"name":"year","module":"Data.Date","detail":"year :: Date -\u003e Year"},{"name":"yearUTC","module":"Data.Date","detail":"yearUTC :: Date -\u003e Year"},{"name":"month","module":"Data.Date","detail":"month :: Date -\u003e Month"},{"name":"monthUTC","module":"Data.Date","detail":"monthUTC :: Date -\u003e Month"},{"name":"day","module":"Data.Date","detail":"day :: Date -\u003e Day"},{"name":"dayUTC","module":"Data.Date","detail":"dayUTC :: Date -\u003e Day"},{"name":"dayOfWeek","module":"Data.Date","detail":"dayOfWeek :: Date -\u003e DayOfWeek"},{"name":"dayOfWeekUTC","module":"Data.Date","detail":"dayOfWeekUTC :: Date -\u003e DayOfWeek"},{"name":"hour","module":"Data.Date","detail":"hour :: Date -\u003e Hours"},{"name":"hourUTC","module":"Data.Date","detail":"hourUTC :: Date -\u003e Hours"},{"name":"minute","module":"Data.Date","detail":"minute :: Date -\u003e Minutes"},{"name":"minuteUTC","module":"Data.Date","detail":"minuteUTC :: Date -\u003e Minutes"},{"name":"second","module":"Data.Date","detail":"second :: Date -\u003e Seconds"},{"name":"secondUTC","module":"Data.Date","detail":"secondUTC :: Date -\u003e Seconds"},{"name":"millisecond","module":"Data.Date","detail":"millisecond :: Date -\u003e Seconds"},{"name":"millisecondUTC","module":"Data.Date","detail":"millisecondUTC :: Date -\u003e Seconds"},{"name":"timezoneOffset","module":"Data.Date","detail":"timezoneOffset :: Date -\u003e Minutes"},{"name":"toEpochMilliseconds","module":"Data.Date","detail":"toEpochMilliseconds :: Date -\u003e Milliseconds"},{"name":"fromEpochMilliseconds","module":"Data.Date","detail":"fromEpochMilliseconds :: Milliseconds -\u003e Maybe Date"},{"name":"fromString","module":"Data.Date","detail":"fromString :: String -\u003e Maybe Date"},{"name":"showDate","module":"Data.Date","detail":"instance showDate :: Show Date"},{"name":"Drawing","module":"Graphics.Canvas.Drawing","detail":"data Drawing = Path [Tuple Number Number] | Rectangle Rectangle | Arc Arc | Composite [Drawing] | Scaled Rectangle Drawing"},{"name":"Path","module":"Graphics.Canvas.Drawing","detail":"data Drawing = Path [Tuple Number Number] | Rectangle Rectangle | Arc Arc | Composite [Drawing] | Scaled Rectangle Drawing"},{"name":"Rectangle","module":"Graphics.Canvas.Drawing","detail":"data Drawing = Path [Tuple Number Number] | Rectangle Rectangle | Arc Arc | Composite [Drawing] | Scaled Rectangle Drawing"},{"name":"Arc","module":"Graphics.Canvas.Drawing","detail":"data Drawing = Path [Tuple Number Number] | Rectangle Rectangle | Arc Arc | Composite [Drawing] | Scaled Rectangle Drawing"},{"name":"Composite","module":"Graphics.Canvas.Drawing","detail":"data Drawing = Path [Tuple Number Number] | Rectangle Rectangle | Arc Arc | Composite [Drawing] | Scaled Rectangle Drawing"},{"name":"Scaled","module":"Graphics.Canvas.Drawing","detail":"data Drawing = Path [Tuple Number Number] | Rectangle Rectangle | Arc Arc | Composite [Drawing] | Scaled Rectangle Drawing"},{"name":"semigroupDrawing","module":"Graphics.Canvas.Drawing","detail":"instance semigroupDrawing :: Semigroup Drawing"},{"name":"monoidDrawing","module":"Graphics.Canvas.Drawing","detail":"instance monoidDrawing :: Monoid Drawing"},{"name":"everywhere","module":"Graphics.Canvas.Drawing","detail":"everywhere :: (Drawing -\u003e Drawing) -\u003e Drawing -\u003e Drawing"},{"name":"renderIn","module":"Graphics.Canvas.Drawing","detail":"renderIn :: forall eff. Rectangle -\u003e Context2D -\u003e Drawing -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"name":"Either","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"name":"Left","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"name":"Right","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"name":"either","module":"Data.Either","detail":"either :: forall a b c. (a -\u003e c) -\u003e (b -\u003e c) -\u003e Either a b -\u003e c"},{"name":"isLeft","module":"Data.Either","detail":"isLeft :: forall a b. Either a b -\u003e Boolean"},{"name":"isRight","module":"Data.Either","detail":"isRight :: forall a b. Either a b -\u003e Boolean"},{"name":"functorEither","module":"Data.Either","detail":"instance functorEither :: Functor (Either a)"},{"name":"applyEither","module":"Data.Either","detail":"instance applyEither :: Apply (Either e)"},{"name":"applicativeEither","module":"Data.Either","detail":"instance applicativeEither :: Applicative (Either e)"},{"name":"bindEither","module":"Data.Either","detail":"instance bindEither :: Bind (Either e)"},{"name":"monadEither","module":"Data.Either","detail":"instance monadEither :: Monad (Either e)"},{"name":"showEither","module":"Data.Either","detail":"instance showEither :: (Show a, Show b) =\u003e Show (Either a b)"},{"name":"eqEither","module":"Data.Either","detail":"instance eqEither :: (Eq a, Eq b) =\u003e Eq (Either a b)"},{"name":"ordEither","module":"Data.Either","detail":"instance ordEither :: (Ord a, Ord b) =\u003e Ord (Either a b)"},{"name":"Enum","module":"Data.Enum","detail":"class Enum a where"},{"name":"toEnum","module":"Data.Enum","detail":"toEnum :: Number -\u003e Maybe a"},{"name":"fromEnum","module":"Data.Enum","detail":"fromEnum :: a -\u003e Number"},{"name":"succ","module":"Data.Enum","detail":"succ :: forall a. (Enum a) =\u003e a -\u003e Maybe a"},{"name":"pred","module":"Data.Enum","detail":"pred :: forall a. (Enum a) =\u003e a -\u003e Maybe a"},{"name":"Exception","module":"Control.Monad.Eff.Exception","detail":"data Exception :: !"},{"name":"Error","module":"Control.Monad.Eff.Exception","detail":"data Error :: *"},{"name":"showError","module":"Control.Monad.Eff.Exception","detail":"instance showError :: Show Error"},{"name":"showErrorImpl","module":"Control.Monad.Eff.Exception","detail":"showErrorImpl :: Error -\u003e String"},{"name":"error","module":"Control.Monad.Eff.Exception","detail":"error :: String -\u003e Error"},{"name":"message","module":"Control.Monad.Eff.Exception","detail":"message :: Error -\u003e String"},{"name":"throwException","module":"Control.Monad.Eff.Exception","detail":"throwException :: forall a eff. Error -\u003e Eff (err :: Exception | eff) a"},{"name":"catchException","module":"Control.Monad.Eff.Exception","detail":"catchException :: forall a eff. (Error -\u003e Eff eff a) -\u003e Eff (err :: Exception | eff) a -\u003e Eff eff a"},{"name":"Foldable","module":"Data.Foldable","detail":"class Foldable f where"},{"name":"foldr","module":"Data.Foldable","detail":"foldr :: forall a b. (a -\u003e b -\u003e b) -\u003e b -\u003e f a -\u003e b"},{"name":"foldl","module":"Data.Foldable","detail":"foldl :: forall a b. (b -\u003e a -\u003e b) -\u003e b -\u003e f a -\u003e b"},{"name":"foldMap","module":"Data.Foldable","detail":"foldMap :: forall a m. (Monoid m) =\u003e (a -\u003e m) -\u003e f a -\u003e m"},{"name":"foldableArray","module":"Data.Foldable","detail":"instance foldableArray :: Foldable Prim.Array"},{"name":"foldableEither","module":"Data.Foldable","detail":"instance foldableEither :: Foldable (Either a)"},{"name":"foldableMaybe","module":"Data.Foldable","detail":"instance foldableMaybe :: Foldable Maybe"},{"name":"foldableRef","module":"Data.Foldable","detail":"instance foldableRef :: Foldable Ref"},{"name":"foldableTuple","module":"Data.Foldable","detail":"instance foldableTuple :: Foldable (Tuple a)"},{"name":"fold","module":"Data.Foldable","detail":"fold :: forall f m. (Foldable f, Monoid m) =\u003e f m -\u003e m"},{"name":"traverse_","module":"Data.Foldable","detail":"traverse_ :: forall a b f m. (Applicative m, Foldable f) =\u003e (a -\u003e m b) -\u003e f a -\u003e m Unit"},{"name":"for_","module":"Data.Foldable","detail":"for_ :: forall a b f m. (Applicative m, Foldable f) =\u003e f a -\u003e (a -\u003e m b) -\u003e m Unit"},{"name":"sequence_","module":"Data.Foldable","detail":"sequence_ :: forall a f m. (Applicative m, Foldable f) =\u003e f (m a) -\u003e m Unit"},{"name":"mconcat","module":"Data.Foldable","detail":"mconcat :: forall f m. (Foldable f, Monoid m) =\u003e f m -\u003e m"},{"name":"and","module":"Data.Foldable","detail":"and :: forall f. (Foldable f) =\u003e f Boolean -\u003e Boolean"},{"name":"or","module":"Data.Foldable","detail":"or :: forall f. (Foldable f) =\u003e f Boolean -\u003e Boolean"},{"name":"any","module":"Data.Foldable","detail":"any :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Boolean"},{"name":"all","module":"Data.Foldable","detail":"all :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Boolean"},{"name":"sum","module":"Data.Foldable","detail":"sum :: forall f. (Foldable f) =\u003e f Number -\u003e Number"},{"name":"product","module":"Data.Foldable","detail":"product :: forall f. (Foldable f) =\u003e f Number -\u003e Number"},{"name":"elem","module":"Data.Foldable","detail":"elem :: forall a f. (Eq a, Foldable f) =\u003e a -\u003e f a -\u003e Boolean"},{"name":"notElem","module":"Data.Foldable","detail":"notElem :: forall a f. (Eq a, Foldable f) =\u003e a -\u003e f a -\u003e Boolean"},{"name":"find","module":"Data.Foldable","detail":"find :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Maybe a"},{"name":"lookup","module":"Data.Foldable","detail":"lookup :: forall a b f. (Eq a, Foldable f) =\u003e a -\u003e f (Tuple a b) -\u003e Maybe b"},{"name":"foldrArray","module":"Data.Foldable","detail":"foldrArray :: forall a b. (a -\u003e b -\u003e b) -\u003e b -\u003e [a] -\u003e b"},{"name":"foldlArray","module":"Data.Foldable","detail":"foldlArray :: forall a b. (b -\u003e a -\u003e b) -\u003e b -\u003e [a] -\u003e b"},{"name":"Traversable","module":"Data.Traversable","detail":"class (Functor t, Foldable t) \u003c= Traversable t where"},{"name":"traverse","module":"Data.Traversable","detail":"traverse :: forall a b m. (Applicative m) =\u003e (a -\u003e m b) -\u003e t a -\u003e m (t b)"},{"name":"sequence","module":"Data.Traversable","detail":"sequence :: forall a m. (Applicative m) =\u003e t (m a) -\u003e m (t a)"},{"name":"traversableArray","module":"Data.Traversable","detail":"instance traversableArray :: Traversable Prim.Array"},{"name":"traversableEither","module":"Data.Traversable","detail":"instance traversableEither :: Traversable (Either a)"},{"name":"traversableRef","module":"Data.Traversable","detail":"instance traversableRef :: Traversable Ref"},{"name":"traversableMaybe","module":"Data.Traversable","detail":"instance traversableMaybe :: Traversable Maybe"},{"name":"traversableTuple","module":"Data.Traversable","detail":"instance traversableTuple :: Traversable (Tuple a)"},{"name":"for","module":"Data.Traversable","detail":"for :: forall a b m t. (Applicative m, Traversable t) =\u003e t a -\u003e (a -\u003e m b) -\u003e m (t b)"},{"name":"zipWithA","module":"Data.Traversable","detail":"zipWithA :: forall m a b c. (Applicative m) =\u003e (a -\u003e b -\u003e m c) -\u003e [a] -\u003e [b] -\u003e m [c]"},{"name":"Foreign","module":"Data.Foreign","detail":"data Foreign :: *"},{"name":"fromStringImpl","module":"Data.Foreign","detail":"fromStringImpl :: Fn3 (String -\u003e Either String Foreign) (Foreign -\u003e Either String Foreign) String (Either String Foreign)"},{"name":"fromString","module":"Data.Foreign","detail":"fromString :: String -\u003e Either String Foreign"},{"name":"readPrimTypeImpl","module":"Data.Foreign","detail":"readPrimTypeImpl :: forall a. Fn4 (String -\u003e Either String a) (a -\u003e Either String a) String Foreign (Either String a)"},{"name":"readPrimType","module":"Data.Foreign","detail":"readPrimType :: forall a. String -\u003e Foreign -\u003e Either String a"},{"name":"readMaybeImpl","module":"Data.Foreign","detail":"readMaybeImpl :: forall a. Fn3 (Maybe Foreign) (Foreign -\u003e Maybe Foreign) Foreign (Maybe Foreign)"},{"name":"readMaybeImpl'","module":"Data.Foreign","detail":"readMaybeImpl' :: Foreign -\u003e Maybe Foreign"},{"name":"readPropImpl","module":"Data.Foreign","detail":"readPropImpl :: forall a. Fn2 a Foreign Foreign"},{"name":"readPropImpl'","module":"Data.Foreign","detail":"readPropImpl' :: String -\u003e Foreign -\u003e Foreign"},{"name":"readIndexImpl'","module":"Data.Foreign","detail":"readIndexImpl' :: Number -\u003e Foreign -\u003e Foreign"},{"name":"readKeysImpl","module":"Data.Foreign","detail":"readKeysImpl :: forall a. Fn4 (String -\u003e Either String a) (a -\u003e Either String a) String Foreign (Either String [String])"},{"name":"readKeysImpl'","module":"Data.Foreign","detail":"readKeysImpl' :: String -\u003e Foreign -\u003e Either String [String]"},{"name":"showForeignImpl","module":"Data.Foreign","detail":"showForeignImpl :: Foreign -\u003e String"},{"name":"showForeign","module":"Data.Foreign","detail":"instance showForeign :: Prelude.Show Foreign"},{"name":"ForeignParser","module":"Data.Foreign","detail":"data ForeignParser a = ForeignParser (Foreign -\u003e Either String a)"},{"name":"ForeignParser","module":"Data.Foreign","detail":"data ForeignParser a = ForeignParser (Foreign -\u003e Either String a)"},{"name":"parseForeign","module":"Data.Foreign","detail":"parseForeign :: forall a. ForeignParser a -\u003e Foreign -\u003e Either String a"},{"name":"parseJSON","module":"Data.Foreign","detail":"parseJSON :: forall a. (ReadForeign a) =\u003e String -\u003e Either String a"},{"name":"functorForeignParser","module":"Data.Foreign","detail":"instance functorForeignParser :: Prelude.Functor ForeignParser"},{"name":"bindForeignParser","module":"Data.Foreign","detail":"instance bindForeignParser :: Prelude.Bind ForeignParser"},{"name":"applyForeignParser","module":"Data.Foreign","detail":"instance applyForeignParser :: Prelude.Apply ForeignParser"},{"name":"applicativeForeignParser","module":"Data.Foreign","detail":"instance applicativeForeignParser :: Prelude.Applicative ForeignParser"},{"name":"monadForeignParser","module":"Data.Foreign","detail":"instance monadForeignParser :: Prelude.Monad ForeignParser"},{"name":"ReadForeign","module":"Data.Foreign","detail":"class ReadForeign a where"},{"name":"read","module":"Data.Foreign","detail":"read :: ForeignParser a"},{"name":"readString","module":"Data.Foreign","detail":"instance readString :: ReadForeign String"},{"name":"readNumber","module":"Data.Foreign","detail":"instance readNumber :: ReadForeign Number"},{"name":"readBoolean","module":"Data.Foreign","detail":"instance readBoolean :: ReadForeign Boolean"},{"name":"readArray","module":"Data.Foreign","detail":"instance readArray :: (ReadForeign a) =\u003e ReadForeign [a]"},{"name":"readMaybe","module":"Data.Foreign","detail":"instance readMaybe :: (ReadForeign a) =\u003e ReadForeign (Maybe a)"},{"name":"prop","module":"Data.Foreign","detail":"prop :: forall a. (ReadForeign a) =\u003e String -\u003e ForeignParser a"},{"name":"index","module":"Data.Foreign","detail":"index :: forall a. (ReadForeign a) =\u003e Number -\u003e ForeignParser a"},{"name":"keys","module":"Data.Foreign","detail":"keys :: String -\u003e ForeignParser [String]"},{"name":"Expr","module":"Main","detail":"data Expr = Var String | Lam String Expr | App Expr Expr"},{"name":"Var","module":"Main","detail":"data Expr = Var String | Lam String Expr | App Expr Expr"},{"name":"Lam","module":"Main","detail":"data Expr = Var String | Lam String Expr | App Expr Expr"},{"name":"App","module":"Main","detail":"data Expr = Var String | Lam String Expr | App Expr Expr"},{"name":"genericExpr","module":"Main","detail":"instance genericExpr :: Generic Expr"},{"name":"s","module":"Main","detail":"s :: Expr"},{"name":"Ty","module":"Data.Generics","detail":"data Ty = TyNum | TyStr | TyBool | TyArr Ty | TyObj [{ value :: Ty, key :: String }] | TyCon { args :: [Ty], tyCon :: String }"},{"name":"TyNum","module":"Data.Generics","detail":"data Ty = TyNum | TyStr | TyBool | TyArr Ty | TyObj [{ value :: Ty, key :: String }] | TyCon { args :: [Ty], tyCon :: String }"},{"name":"TyStr","module":"Data.Generics","detail":"data Ty = TyNum | TyStr | TyBool | TyArr Ty | TyObj [{ value :: Ty, key :: String }] | TyCon { args :: [Ty], tyCon :: String }"},{"name":"TyBool","module":"Data.Generics","detail":"data Ty = TyNum | TyStr | TyBool | TyArr Ty | TyObj [{ value :: Ty, key :: String }] | TyCon { args :: [Ty], tyCon :: String }"},{"name":"TyArr","module":"Data.Generics","detail":"data Ty = TyNum | TyStr | TyBool | TyArr Ty | TyObj [{ value :: Ty, key :: String }] | TyCon { args :: [Ty], tyCon :: String }"},{"name":"TyObj","module":"Data.Generics","detail":"data Ty = TyNum | TyStr | TyBool | TyArr Ty | TyObj [{ value :: Ty, key :: String }] | TyCon { args :: [Ty], tyCon :: String }"},{"name":"TyCon","module":"Data.Generics","detail":"data Ty = TyNum | TyStr | TyBool | TyArr Ty | TyObj [{ value :: Ty, key :: String }] | TyCon { args :: [Ty], tyCon :: String }"},{"name":"showTy","module":"Data.Generics","detail":"instance showTy :: Show Ty"},{"name":"eqTy","module":"Data.Generics","detail":"instance eqTy :: Eq Ty"},{"name":"Tm","module":"Data.Generics","detail":"data Tm = TmNum Number | TmStr String | TmBool Boolean | TmArr [Tm] | TmObj [{ value :: Tm, key :: String }] | TmCon { values :: [Tm], con :: String }"},{"name":"TmNum","module":"Data.Generics","detail":"data Tm = TmNum Number | TmStr String | TmBool Boolean | TmArr [Tm] | TmObj [{ value :: Tm, key :: String }] | TmCon { values :: [Tm], con :: String }"},{"name":"TmStr","module":"Data.Generics","detail":"data Tm = TmNum Number | TmStr String | TmBool Boolean | TmArr [Tm] | TmObj [{ value :: Tm, key :: String }] | TmCon { values :: [Tm], con :: String }"},{"name":"TmBool","module":"Data.Generics","detail":"data Tm = TmNum Number | TmStr String | TmBool Boolean | TmArr [Tm] | TmObj [{ value :: Tm, key :: String }] | TmCon { values :: [Tm], con :: String }"},{"name":"TmArr","module":"Data.Generics","detail":"data Tm = TmNum Number | TmStr String | TmBool Boolean | TmArr [Tm] | TmObj [{ value :: Tm, key :: String }] | TmCon { values :: [Tm], con :: String }"},{"name":"TmObj","module":"Data.Generics","detail":"data Tm = TmNum Number | TmStr String | TmBool Boolean | TmArr [Tm] | TmObj [{ value :: Tm, key :: String }] | TmCon { values :: [Tm], con :: String }"},{"name":"TmCon","module":"Data.Generics","detail":"data Tm = TmNum Number | TmStr String | TmBool Boolean | TmArr [Tm] | TmObj [{ value :: Tm, key :: String }] | TmCon { values :: [Tm], con :: String }"},{"name":"showTm","module":"Data.Generics","detail":"instance showTm :: Show Tm"},{"name":"eqTm","module":"Data.Generics","detail":"instance eqTm :: Eq Tm"},{"name":"eqObjEntry","module":"Data.Generics","detail":"eqObjEntry :: forall k v. (Eq k, Eq v) =\u003e { value :: v, key :: k } -\u003e { value :: v, key :: k } -\u003e Boolean"},{"name":"Proxy","module":"Data.Generics","detail":"data Proxy a = Proxy"},{"name":"Proxy","module":"Data.Generics","detail":"data Proxy a = Proxy"},{"name":"Generic","module":"Data.Generics","detail":"class Generic a where"},{"name":"typeOf","module":"Data.Generics","detail":"typeOf :: Proxy a -\u003e Ty"},{"name":"term","module":"Data.Generics","detail":"term :: a -\u003e Tm"},{"name":"unTerm","module":"Data.Generics","detail":"unTerm :: Tm -\u003e Maybe a"},{"name":"genericNumber","module":"Data.Generics","detail":"instance genericNumber :: Generic Number"},{"name":"genericString","module":"Data.Generics","detail":"instance genericString :: Generic String"},{"name":"genericBoolean","module":"Data.Generics","detail":"instance genericBoolean :: Generic Boolean"},{"name":"elementProxy","module":"Data.Generics","detail":"elementProxy :: forall a. Proxy [a] -\u003e Proxy a"},{"name":"genericArray","module":"Data.Generics","detail":"instance genericArray :: (Generic a) =\u003e Generic [a]"},{"name":"fstProxy","module":"Data.Generics","detail":"fstProxy :: forall a b. Proxy (Tuple a b) -\u003e Proxy a"},{"name":"sndProxy","module":"Data.Generics","detail":"sndProxy :: forall a b. Proxy (Tuple a b) -\u003e Proxy b"},{"name":"genericTuple","module":"Data.Generics","detail":"instance genericTuple :: (Generic a, Generic b) =\u003e Generic (Tuple a b)"},{"name":"maybeProxy","module":"Data.Generics","detail":"maybeProxy :: forall a. Proxy (Maybe a) -\u003e Proxy a"},{"name":"genericMaybe","module":"Data.Generics","detail":"instance genericMaybe :: (Generic a) =\u003e Generic (Maybe a)"},{"name":"leftProxy","module":"Data.Generics","detail":"leftProxy :: forall a b. Proxy (Either a b) -\u003e Proxy a"},{"name":"rightProxy","module":"Data.Generics","detail":"rightProxy :: forall a b. Proxy (Either a b) -\u003e Proxy b"},{"name":"genericEither","module":"Data.Generics","detail":"instance genericEither :: (Generic a, Generic b) =\u003e Generic (Either a b)"},{"name":"sizeOf","module":"Data.Generics","detail":"sizeOf :: Tm -\u003e Number"},{"name":"gsize","module":"Data.Generics","detail":"gsize :: forall a. (Generic a) =\u003e a -\u003e Number"},{"name":"gshow","module":"Data.Generics","detail":"gshow :: forall a. (Generic a) =\u003e a -\u003e String"},{"name":"geq","module":"Data.Generics","detail":"geq :: forall a. (Generic a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"cast","module":"Data.Generics","detail":"cast :: forall a b. (Generic a, Generic b) =\u003e a -\u003e Maybe b"},{"name":"GenericT","module":"Data.Generics","detail":"data GenericT = GenericT (Tm -\u003e Tm)"},{"name":"GenericT","module":"Data.Generics","detail":"data GenericT = GenericT (Tm -\u003e Tm)"},{"name":"runGenericT","module":"Data.Generics","detail":"runGenericT :: GenericT -\u003e Tm -\u003e Tm"},{"name":"mkT","module":"Data.Generics","detail":"mkT :: forall a. (Generic a) =\u003e (a -\u003e a) -\u003e GenericT"},{"name":"gmapTImpl","module":"Data.Generics","detail":"gmapTImpl :: GenericT -\u003e Tm -\u003e Tm"},{"name":"gmapT","module":"Data.Generics","detail":"gmapT :: forall a. (Generic a) =\u003e GenericT -\u003e a -\u003e a"},{"name":"everywhereImpl","module":"Data.Generics","detail":"everywhereImpl :: GenericT -\u003e Tm -\u003e Tm"},{"name":"everywhere","module":"Data.Generics","detail":"everywhere :: forall a. (Generic a) =\u003e GenericT -\u003e a -\u003e a"},{"name":"GenericQ","module":"Data.Generics","detail":"data GenericQ r = GenericQ (Tm -\u003e r)"},{"name":"GenericQ","module":"Data.Generics","detail":"data GenericQ r = GenericQ (Tm -\u003e r)"},{"name":"runGenericQ","module":"Data.Generics","detail":"runGenericQ :: forall r. GenericQ r -\u003e Tm -\u003e r"},{"name":"mkQ","module":"Data.Generics","detail":"mkQ :: forall a r. (Generic a) =\u003e r -\u003e (a -\u003e r) -\u003e GenericQ r"},{"name":"everythingImpl","module":"Data.Generics","detail":"everythingImpl :: forall a r. (r -\u003e r -\u003e r) -\u003e GenericQ r -\u003e Tm -\u003e r"},{"name":"everything","module":"Data.Generics","detail":"everything :: forall a r. (Generic a) =\u003e (r -\u003e r -\u003e r) -\u003e GenericQ r -\u003e a -\u003e r"},{"name":"nan","module":"Global","detail":"nan :: Number"},{"name":"isNaN","module":"Global","detail":"isNaN :: Number -\u003e Boolean"},{"name":"infinity","module":"Global","detail":"infinity :: Number"},{"name":"isFinite","module":"Global","detail":"isFinite :: Number -\u003e Boolean"},{"name":"readInt","module":"Global","detail":"readInt :: Number -\u003e String -\u003e Number"},{"name":"readFloat","module":"Global","detail":"readFloat :: String -\u003e Number"},{"name":"DOM","module":"Control.Monad.JQuery","detail":"data DOM :: !"},{"name":"JQuery","module":"Control.Monad.JQuery","detail":"data JQuery :: *"},{"name":"JQueryEvent","module":"Control.Monad.JQuery","detail":"data JQueryEvent :: *"},{"name":"ready","module":"Control.Monad.JQuery","detail":"ready :: forall eff a. Eff eff a -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"select","module":"Control.Monad.JQuery","detail":"select :: forall eff. String -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"create","module":"Control.Monad.JQuery","detail":"create :: forall eff. String -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"setAttr","module":"Control.Monad.JQuery","detail":"setAttr :: forall eff a. String -\u003e a -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"attr","module":"Control.Monad.JQuery","detail":"attr :: forall eff attr. {  | attr } -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"css","module":"Control.Monad.JQuery","detail":"css :: forall eff css. {  | css } -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"addClass","module":"Control.Monad.JQuery","detail":"addClass :: forall eff. String -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"removeClass","module":"Control.Monad.JQuery","detail":"removeClass :: forall eff. String -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"setProp","module":"Control.Monad.JQuery","detail":"setProp :: forall a eff. String -\u003e a -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"getProp","module":"Control.Monad.JQuery","detail":"getProp :: forall eff. String -\u003e JQuery -\u003e Eff (dom :: DOM | eff) Foreign"},{"name":"append","module":"Control.Monad.JQuery","detail":"append :: forall eff. JQuery -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"appendAtIndex","module":"Control.Monad.JQuery","detail":"appendAtIndex :: forall eff. Number -\u003e JQuery -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"remove","module":"Control.Monad.JQuery","detail":"remove :: forall eff. JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"clear","module":"Control.Monad.JQuery","detail":"clear :: forall eff. JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"before","module":"Control.Monad.JQuery","detail":"before :: forall eff. JQuery -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"appendText","module":"Control.Monad.JQuery","detail":"appendText :: forall eff. String -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"body","module":"Control.Monad.JQuery","detail":"body :: forall eff. Eff (dom :: DOM | eff) JQuery"},{"name":"getText","module":"Control.Monad.JQuery","detail":"getText :: forall eff. JQuery -\u003e Eff (dom :: DOM | eff) String"},{"name":"setText","module":"Control.Monad.JQuery","detail":"setText :: forall eff. String -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"getValue","module":"Control.Monad.JQuery","detail":"getValue :: forall eff. JQuery -\u003e Eff (dom :: DOM | eff) Foreign"},{"name":"setValue","module":"Control.Monad.JQuery","detail":"setValue :: forall eff a. a -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"on","module":"Control.Monad.JQuery","detail":"on :: forall eff a. String -\u003e (JQueryEvent -\u003e JQuery -\u003e Eff eff a) -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"on'","module":"Control.Monad.JQuery","detail":"on' :: forall eff a. String -\u003e String -\u003e (JQueryEvent -\u003e JQuery -\u003e Eff eff a) -\u003e JQuery -\u003e Eff (dom :: DOM | eff) JQuery"},{"name":"preventDefault","module":"Control.Monad.JQuery","detail":"preventDefault :: forall eff. JQueryEvent -\u003e Eff (dom :: DOM | eff) Unit"},{"name":"stopPropagation","module":"Control.Monad.JQuery","detail":"stopPropagation :: forall eff. JQueryEvent -\u003e Eff (dom :: DOM | eff) Unit"},{"name":"stopImmediatePropagation","module":"Control.Monad.JQuery","detail":"stopImmediatePropagation :: forall eff. JQueryEvent -\u003e Eff (dom :: DOM | eff) Unit"},{"name":"List","module":"Data.Lazy.List","detail":"data List a = Nil | Cons a (Lazy (List a))"},{"name":"Nil","module":"Data.Lazy.List","detail":"data List a = Nil | Cons a (Lazy (List a))"},{"name":"Cons","module":"Data.Lazy.List","detail":"data List a = Nil | Cons a (Lazy (List a))"},{"name":"eqList","module":"Data.Lazy.List","detail":"instance eqList :: (Eq a) =\u003e Eq (List a)"},{"name":"showList","module":"Data.Lazy.List","detail":"instance showList :: (Show a) =\u003e Show (List a)"},{"name":"showItems","module":"Data.Lazy.List","detail":"showItems :: [String] -\u003e String"},{"name":"semigroupList","module":"Data.Lazy.List","detail":"instance semigroupList :: Semigroup (List a)"},{"name":"monoidList","module":"Data.Lazy.List","detail":"instance monoidList :: Monoid (List a)"},{"name":"functorList","module":"Data.Lazy.List","detail":"instance functorList :: Functor List"},{"name":"applyList","module":"Data.Lazy.List","detail":"instance applyList :: Apply List"},{"name":"applicativeList","module":"Data.Lazy.List","detail":"instance applicativeList :: Applicative List"},{"name":"bindList","module":"Data.Lazy.List","detail":"instance bindList :: Bind List"},{"name":"monadList","module":"Data.Lazy.List","detail":"instance monadList :: Monad List"},{"name":"toArray","module":"Data.Lazy.List","detail":"toArray :: forall a. List a -\u003e [a]"},{"name":"fromArray","module":"Data.Lazy.List","detail":"fromArray :: forall a. [a] -\u003e List a"},{"name":"repeat","module":"Data.Lazy.List","detail":"repeat :: forall a. a -\u003e List a"},{"name":"take","module":"Data.Lazy.List","detail":"take :: forall a. Number -\u003e List a -\u003e List a"},{"name":"drop","module":"Data.Lazy.List","detail":"drop :: forall a. Number -\u003e List a -\u003e List a"},{"name":"Lazy","module":"Data.Lazy","detail":"data Lazy :: * -\u003e *"},{"name":"defer","module":"Data.Lazy","detail":"defer :: forall a. ({  } -\u003e a) -\u003e Lazy a"},{"name":"force","module":"Data.Lazy","detail":"force :: forall a. Lazy a -\u003e a"},{"name":"functorLazy","module":"Data.Lazy","detail":"instance functorLazy :: Functor Lazy"},{"name":"applyLazy","module":"Data.Lazy","detail":"instance applyLazy :: Apply Lazy"},{"name":"applicativeLazy","module":"Data.Lazy","detail":"instance applicativeLazy :: Applicative Lazy"},{"name":"bindLazy","module":"Data.Lazy","detail":"instance bindLazy :: Bind Lazy"},{"name":"monadLazy","module":"Data.Lazy","detail":"instance monadLazy :: Monad Lazy"},{"name":"eqLazy","module":"Data.Lazy","detail":"instance eqLazy :: (Eq a) =\u003e Eq (Lazy a)"},{"name":"ordLazy","module":"Data.Lazy","detail":"instance ordLazy :: (Ord a) =\u003e Ord (Lazy a)"},{"name":"showLazy","module":"Data.Lazy","detail":"instance showLazy :: (Show a) =\u003e Show (Lazy a)"},{"name":"fix","module":"Data.Lazy","detail":"fix :: forall a. (Lazy a -\u003e Lazy a) -\u003e Lazy a"},{"name":"Edge","module":"Data.Graph","detail":"data Edge k = Edge k k"},{"name":"Edge","module":"Data.Graph","detail":"data Edge k = Edge k k"},{"name":"Graph","module":"Data.Graph","detail":"data Graph k v = Graph [v] [Edge k]"},{"name":"Graph","module":"Data.Graph","detail":"data Graph k v = Graph [v] [Edge k]"},{"name":"Index","module":"Data.Graph","detail":"type Index  = Number"},{"name":"SCC","module":"Data.Graph","detail":"data SCC v = AcyclicSCC v | CyclicSCC [v]"},{"name":"AcyclicSCC","module":"Data.Graph","detail":"data SCC v = AcyclicSCC v | CyclicSCC [v]"},{"name":"CyclicSCC","module":"Data.Graph","detail":"data SCC v = AcyclicSCC v | CyclicSCC [v]"},{"name":"showSCC","module":"Data.Graph","detail":"instance showSCC :: (Show v) =\u003e Show (SCC v)"},{"name":"eqSCC","module":"Data.Graph","detail":"instance eqSCC :: (Eq v) =\u003e Eq (SCC v)"},{"name":"vertices","module":"Data.Graph","detail":"vertices :: forall v. SCC v -\u003e [v]"},{"name":"scc","module":"Data.Graph","detail":"scc :: forall v. (Eq v, Ord v) =\u003e Graph v v -\u003e [SCC v]"},{"name":"scc'","module":"Data.Graph","detail":"scc' :: forall k v. (Eq k, Ord k) =\u003e (v -\u003e k) -\u003e (k -\u003e v) -\u003e Graph k v -\u003e [SCC v]"},{"name":"popUntil","module":"Data.Graph","detail":"popUntil :: forall k v. (Eq k) =\u003e (v -\u003e k) -\u003e v -\u003e [v] -\u003e [v] -\u003e { component :: [v], path :: [v] }"},{"name":"maybeMin","module":"Data.Graph","detail":"maybeMin :: Index -\u003e Maybe Index -\u003e Maybe Index"},{"name":"topSort","module":"Data.Graph","detail":"topSort :: forall v. (Eq v, Ord v) =\u003e Graph v v -\u003e [v]"},{"name":"topSort'","module":"Data.Graph","detail":"topSort' :: forall k v. (Eq k, Ord k) =\u003e (v -\u003e k) -\u003e (k -\u003e v) -\u003e Graph k v -\u003e [v]"},{"name":"Map","module":"Data.Map","detail":"data Map k v = Leaf | Two (Map k v) k v (Map k v) | Three (Map k v) k v (Map k v) k v (Map k v)"},{"name":"Leaf","module":"Data.Map","detail":"data Map k v = Leaf | Two (Map k v) k v (Map k v) | Three (Map k v) k v (Map k v) k v (Map k v)"},{"name":"Two","module":"Data.Map","detail":"data Map k v = Leaf | Two (Map k v) k v (Map k v) | Three (Map k v) k v (Map k v) k v (Map k v)"},{"name":"Three","module":"Data.Map","detail":"data Map k v = Leaf | Two (Map k v) k v (Map k v) | Three (Map k v) k v (Map k v) k v (Map k v)"},{"name":"eqMap","module":"Data.Map","detail":"instance eqMap :: (P.Eq k, P.Eq v) =\u003e P.Eq (Map k v)"},{"name":"showMap","module":"Data.Map","detail":"instance showMap :: (P.Show k, P.Show v) =\u003e P.Show (Map k v)"},{"name":"functorMap","module":"Data.Map","detail":"instance functorMap :: P.Functor (Map k)"},{"name":"showTree","module":"Data.Map","detail":"showTree :: forall k v. (P.Show k, P.Show v) =\u003e Map k v -\u003e String"},{"name":"empty","module":"Data.Map","detail":"empty :: forall k v. Map k v"},{"name":"isEmpty","module":"Data.Map","detail":"isEmpty :: forall k v. Map k v -\u003e Boolean"},{"name":"singleton","module":"Data.Map","detail":"singleton :: forall k v. k -\u003e v -\u003e Map k v"},{"name":"checkValid","module":"Data.Map","detail":"checkValid :: forall k v. Map k v -\u003e Boolean"},{"name":"lookup","module":"Data.Map","detail":"lookup :: forall k v. (P.Ord k) =\u003e k -\u003e Map k v -\u003e Maybe v"},{"name":"member","module":"Data.Map","detail":"member :: forall k v. (P.Ord k) =\u003e k -\u003e Map k v -\u003e Boolean"},{"name":"TreeContext","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"name":"TwoLeft","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"name":"TwoRight","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"name":"ThreeLeft","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"name":"ThreeMiddle","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"name":"ThreeRight","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"name":"fromZipper","module":"Data.Map","detail":"fromZipper :: forall k v. (P.Ord k) =\u003e [TreeContext k v] -\u003e Map k v -\u003e Map k v"},{"name":"KickUp","module":"Data.Map","detail":"data KickUp k v = KickUp (Map k v) k v (Map k v)"},{"name":"KickUp","module":"Data.Map","detail":"data KickUp k v = KickUp (Map k v) k v (Map k v)"},{"name":"insert","module":"Data.Map","detail":"insert :: forall k v. (P.Ord k) =\u003e k -\u003e v -\u003e Map k v -\u003e Map k v"},{"name":"delete","module":"Data.Map","detail":"delete :: forall k v. (P.Ord k) =\u003e k -\u003e Map k v -\u003e Map k v"},{"name":"alter","module":"Data.Map","detail":"alter :: forall k v. (P.Ord k) =\u003e (Maybe v -\u003e Maybe v) -\u003e k -\u003e Map k v -\u003e Map k v"},{"name":"update","module":"Data.Map","detail":"update :: forall k v. (P.Ord k) =\u003e (v -\u003e Maybe v) -\u003e k -\u003e Map k v -\u003e Map k v"},{"name":"toList","module":"Data.Map","detail":"toList :: forall k v. Map k v -\u003e [Tuple k v]"},{"name":"fromList","module":"Data.Map","detail":"fromList :: forall k v. (P.Ord k) =\u003e [Tuple k v] -\u003e Map k v"},{"name":"keys","module":"Data.Map","detail":"keys :: forall k v. Map k v -\u003e [k]"},{"name":"values","module":"Data.Map","detail":"values :: forall k v. Map k v -\u003e [v]"},{"name":"union","module":"Data.Map","detail":"union :: forall k v. (P.Ord k) =\u003e Map k v -\u003e Map k v -\u003e Map k v"},{"name":"unions","module":"Data.Map","detail":"unions :: forall k v. (P.Ord k) =\u003e [Map k v] -\u003e Map k v"},{"name":"map","module":"Data.Map","detail":"map :: forall k a b. (a -\u003e b) -\u003e Map k a -\u003e Map k b"},{"name":"Set","module":"Data.Set","detail":"data Set a = Set (M.Map a P.Unit)"},{"name":"Set","module":"Data.Set","detail":"data Set a = Set (M.Map a P.Unit)"},{"name":"eqSet","module":"Data.Set","detail":"instance eqSet :: (P.Eq a) =\u003e P.Eq (Set a)"},{"name":"showSet","module":"Data.Set","detail":"instance showSet :: (P.Show a) =\u003e P.Show (Set a)"},{"name":"empty","module":"Data.Set","detail":"empty :: forall a. Set a"},{"name":"isEmpty","module":"Data.Set","detail":"isEmpty :: forall a. Set a -\u003e Boolean"},{"name":"singleton","module":"Data.Set","detail":"singleton :: forall a. a -\u003e Set a"},{"name":"checkValid","module":"Data.Set","detail":"checkValid :: forall a. Set a -\u003e Boolean"},{"name":"member","module":"Data.Set","detail":"member :: forall a. (P.Ord a) =\u003e a -\u003e Set a -\u003e Boolean"},{"name":"insert","module":"Data.Set","detail":"insert :: forall a. (P.Ord a) =\u003e a -\u003e Set a -\u003e Set a"},{"name":"delete","module":"Data.Set","detail":"delete :: forall a. (P.Ord a) =\u003e a -\u003e Set a -\u003e Set a"},{"name":"toList","module":"Data.Set","detail":"toList :: forall a. Set a -\u003e [a]"},{"name":"fromList","module":"Data.Set","detail":"fromList :: forall a. (P.Ord a) =\u003e [a] -\u003e Set a"},{"name":"union","module":"Data.Set","detail":"union :: forall a. (P.Ord a) =\u003e Set a -\u003e Set a -\u003e Set a"},{"name":"unions","module":"Data.Set","detail":"unions :: forall a. (P.Ord a) =\u003e [Set a] -\u003e Set a"},{"name":"Radians","module":"Math","detail":"type Radians  = Number"},{"name":"abs","module":"Math","detail":"abs :: Number -\u003e Number"},{"name":"acos","module":"Math","detail":"acos :: Number -\u003e Radians"},{"name":"asin","module":"Math","detail":"asin :: Number -\u003e Radians"},{"name":"atan","module":"Math","detail":"atan :: Number -\u003e Radians"},{"name":"atan2","module":"Math","detail":"atan2 :: Number -\u003e Number -\u003e Radians"},{"name":"ceil","module":"Math","detail":"ceil :: Number -\u003e Number"},{"name":"cos","module":"Math","detail":"cos :: Radians -\u003e Number"},{"name":"exp","module":"Math","detail":"exp :: Number -\u003e Number"},{"name":"floor","module":"Math","detail":"floor :: Number -\u003e Number"},{"name":"log","module":"Math","detail":"log :: Number -\u003e Number"},{"name":"max","module":"Math","detail":"max :: Number -\u003e Number -\u003e Number"},{"name":"min","module":"Math","detail":"min :: Number -\u003e Number -\u003e Number"},{"name":"pow","module":"Math","detail":"pow :: Number -\u003e Number -\u003e Number"},{"name":"round","module":"Math","detail":"round :: Number -\u003e Number"},{"name":"sin","module":"Math","detail":"sin :: Radians -\u003e Number"},{"name":"sqrt","module":"Math","detail":"sqrt :: Number -\u003e Number"},{"name":"tan","module":"Math","detail":"tan :: Radians -\u003e Number"},{"name":"e","module":"Math","detail":"e :: Number"},{"name":"ln2","module":"Math","detail":"ln2 :: Number"},{"name":"ln10","module":"Math","detail":"ln10 :: Number"},{"name":"log2e","module":"Math","detail":"log2e :: Number"},{"name":"log10e","module":"Math","detail":"log10e :: Number"},{"name":"pi","module":"Math","detail":"pi :: Number"},{"name":"sqrt1_2","module":"Math","detail":"sqrt1_2 :: Number"},{"name":"sqrt2","module":"Math","detail":"sqrt2 :: Number"},{"name":"fromJust","module":"Data.Maybe.Unsafe","detail":"fromJust :: forall a. Maybe a -\u003e a"},{"name":"Maybe","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"name":"Nothing","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"name":"Just","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"name":"maybe","module":"Data.Maybe","detail":"maybe :: forall a b. b -\u003e (a -\u003e b) -\u003e Maybe a -\u003e b"},{"name":"fromMaybe","module":"Data.Maybe","detail":"fromMaybe :: forall a. a -\u003e Maybe a -\u003e a"},{"name":"isJust","module":"Data.Maybe","detail":"isJust :: forall a. Maybe a -\u003e Boolean"},{"name":"isNothing","module":"Data.Maybe","detail":"isNothing :: forall a. Maybe a -\u003e Boolean"},{"name":"functorMaybe","module":"Data.Maybe","detail":"instance functorMaybe :: Functor Maybe"},{"name":"applyMaybe","module":"Data.Maybe","detail":"instance applyMaybe :: Apply Maybe"},{"name":"applicativeMaybe","module":"Data.Maybe","detail":"instance applicativeMaybe :: Applicative Maybe"},{"name":"alternativeMaybe","module":"Data.Maybe","detail":"instance alternativeMaybe :: Alternative Maybe"},{"name":"bindMaybe","module":"Data.Maybe","detail":"instance bindMaybe :: Bind Maybe"},{"name":"monadMaybe","module":"Data.Maybe","detail":"instance monadMaybe :: Monad Maybe"},{"name":"showMaybe","module":"Data.Maybe","detail":"instance showMaybe :: (Show a) =\u003e Show (Maybe a)"},{"name":"eqMaybe","module":"Data.Maybe","detail":"instance eqMaybe :: (Eq a) =\u003e Eq (Maybe a)"},{"name":"ordMaybe","module":"Data.Maybe","detail":"instance ordMaybe :: (Ord a) =\u003e Ord (Maybe a)"},{"name":"All","module":"Data.Monoid.All","detail":"data All = All Boolean"},{"name":"All","module":"Data.Monoid.All","detail":"data All = All Boolean"},{"name":"runAll","module":"Data.Monoid.All","detail":"runAll :: All -\u003e Boolean"},{"name":"eqAll","module":"Data.Monoid.All","detail":"instance eqAll :: Eq All"},{"name":"showAll","module":"Data.Monoid.All","detail":"instance showAll :: Show All"},{"name":"semigroupAll","module":"Data.Monoid.All","detail":"instance semigroupAll :: Semigroup All"},{"name":"monoidAll","module":"Data.Monoid.All","detail":"instance monoidAll :: Monoid All"},{"name":"Any","module":"Data.Monoid.Any","detail":"data Any = Any Boolean"},{"name":"Any","module":"Data.Monoid.Any","detail":"data Any = Any Boolean"},{"name":"runAny","module":"Data.Monoid.Any","detail":"runAny :: Any -\u003e Boolean"},{"name":"eqAny","module":"Data.Monoid.Any","detail":"instance eqAny :: Eq Any"},{"name":"showAny","module":"Data.Monoid.Any","detail":"instance showAny :: Show Any"},{"name":"semigroupAny","module":"Data.Monoid.Any","detail":"instance semigroupAny :: Semigroup Any"},{"name":"monoidAny","module":"Data.Monoid.Any","detail":"instance monoidAny :: Monoid Any"},{"name":"Dual","module":"Data.Monoid.Dual","detail":"data Dual a = Dual a"},{"name":"Dual","module":"Data.Monoid.Dual","detail":"data Dual a = Dual a"},{"name":"runDual","module":"Data.Monoid.Dual","detail":"runDual :: forall a. Dual a -\u003e a"},{"name":"eqDual","module":"Data.Monoid.Dual","detail":"instance eqDual :: (Eq a) =\u003e Eq (Dual a)"},{"name":"ordDual","module":"Data.Monoid.Dual","detail":"instance ordDual :: (Ord a) =\u003e Ord (Dual a)"},{"name":"showDual","module":"Data.Monoid.Dual","detail":"instance showDual :: (Show a) =\u003e Show (Dual a)"},{"name":"semigroupDual","module":"Data.Monoid.Dual","detail":"instance semigroupDual :: (Semigroup a) =\u003e Semigroup (Dual a)"},{"name":"monoidDual","module":"Data.Monoid.Dual","detail":"instance monoidDual :: (Monoid a) =\u003e Monoid (Dual a)"},{"name":"Endo","module":"Data.Monoid.Endo","detail":"data Endo a = Endo (a -\u003e a)"},{"name":"Endo","module":"Data.Monoid.Endo","detail":"data Endo a = Endo (a -\u003e a)"},{"name":"runEndo","module":"Data.Monoid.Endo","detail":"runEndo :: forall a. Endo a -\u003e a -\u003e a"},{"name":"semigroupEndo","module":"Data.Monoid.Endo","detail":"instance semigroupEndo :: Semigroup (Endo a)"},{"name":"monoidEndo","module":"Data.Monoid.Endo","detail":"instance monoidEndo :: Monoid (Endo a)"},{"name":"First","module":"Data.Monoid.First","detail":"data First a = First (Maybe a)"},{"name":"First","module":"Data.Monoid.First","detail":"data First a = First (Maybe a)"},{"name":"runFirst","module":"Data.Monoid.First","detail":"runFirst :: forall a. First a -\u003e Maybe a"},{"name":"eqFirst","module":"Data.Monoid.First","detail":"instance eqFirst :: (Eq a) =\u003e Eq (First a)"},{"name":"ordFirst","module":"Data.Monoid.First","detail":"instance ordFirst :: (Ord a) =\u003e Ord (First a)"},{"name":"showFirst","module":"Data.Monoid.First","detail":"instance showFirst :: (Show a) =\u003e Show (First a)"},{"name":"semigroupFirst","module":"Data.Monoid.First","detail":"instance semigroupFirst :: Semigroup (First a)"},{"name":"monoidFirst","module":"Data.Monoid.First","detail":"instance monoidFirst :: Monoid (First a)"},{"name":"Last","module":"Data.Monoid.Last","detail":"data Last a = Last (Maybe a)"},{"name":"Last","module":"Data.Monoid.Last","detail":"data Last a = Last (Maybe a)"},{"name":"runLast","module":"Data.Monoid.Last","detail":"runLast :: forall a. Last a -\u003e Maybe a"},{"name":"eqLast","module":"Data.Monoid.Last","detail":"instance eqLast :: (Eq a) =\u003e Eq (Last a)"},{"name":"ordLast","module":"Data.Monoid.Last","detail":"instance ordLast :: (Ord a) =\u003e Ord (Last a)"},{"name":"showLast","module":"Data.Monoid.Last","detail":"instance showLast :: (Show a) =\u003e Show (Last a)"},{"name":"semigroupLast","module":"Data.Monoid.Last","detail":"instance semigroupLast :: Semigroup (Last a)"},{"name":"monoidLast","module":"Data.Monoid.Last","detail":"instance monoidLast :: Monoid (Last a)"},{"name":"Product","module":"Data.Monoid.Product","detail":"data Product = Product Number"},{"name":"Product","module":"Data.Monoid.Product","detail":"data Product = Product Number"},{"name":"runProduct","module":"Data.Monoid.Product","detail":"runProduct :: Product -\u003e Number"},{"name":"eqProduct","module":"Data.Monoid.Product","detail":"instance eqProduct :: Eq Product"},{"name":"ordProduct","module":"Data.Monoid.Product","detail":"instance ordProduct :: Ord Product"},{"name":"showProduct","module":"Data.Monoid.Product","detail":"instance showProduct :: Show Product"},{"name":"semigroupProduct","module":"Data.Monoid.Product","detail":"instance semigroupProduct :: Semigroup Product"},{"name":"monoidProduct","module":"Data.Monoid.Product","detail":"instance monoidProduct :: Monoid Product"},{"name":"Sum","module":"Data.Monoid.Sum","detail":"data Sum = Sum Number"},{"name":"Sum","module":"Data.Monoid.Sum","detail":"data Sum = Sum Number"},{"name":"runSum","module":"Data.Monoid.Sum","detail":"runSum :: Sum -\u003e Number"},{"name":"eqSum","module":"Data.Monoid.Sum","detail":"instance eqSum :: Eq Sum"},{"name":"ordSum","module":"Data.Monoid.Sum","detail":"instance ordSum :: Ord Sum"},{"name":"showSum","module":"Data.Monoid.Sum","detail":"instance showSum :: Show Sum"},{"name":"semigroupSum","module":"Data.Monoid.Sum","detail":"instance semigroupSum :: Semigroup Sum"},{"name":"monoidSum","module":"Data.Monoid.Sum","detail":"instance monoidSum :: Monoid Sum"},{"name":"Monoid","module":"Data.Monoid","detail":"class (Semigroup m) \u003c= Monoid m where"},{"name":"mempty","module":"Data.Monoid","detail":"mempty :: m"},{"name":"monoidString","module":"Data.Monoid","detail":"instance monoidString :: Monoid String"},{"name":"monoidArray","module":"Data.Monoid","detail":"instance monoidArray :: Monoid [a]"},{"name":"monoidUnit","module":"Data.Monoid","detail":"instance monoidUnit :: Monoid Unit"},{"name":"Lazy1","module":"Node.Args","detail":"class Lazy1 a where"},{"name":"defer","module":"Node.Args","detail":"defer :: forall t. ({  } -\u003e a t) -\u003e a t"},{"name":"ArgsInterp","module":"Node.Args","detail":"class ArgsInterp a where"},{"name":"flagOnly","module":"Node.Args","detail":"flagOnly :: String -\u003e a {  }"},{"name":"argOnly","module":"Node.Args","detail":"argOnly :: a String"},{"name":"flagArg","module":"Node.Args","detail":"flagArg :: String -\u003e a String"},{"name":"Args","module":"Node.Args","detail":"data Args t = Args (forall a. (Applicative a, Alternative a, Lazy1 a, ArgsInterp a) =\u003e a t)"},{"name":"Args","module":"Node.Args","detail":"data Args t = Args (forall a. (Applicative a, Alternative a, Lazy1 a, ArgsInterp a) =\u003e a t)"},{"name":"runArgs","module":"Node.Args","detail":"runArgs :: forall a t. (Applicative a, Alternative a, Lazy1 a, ArgsInterp a) =\u003e Args t -\u003e a t"},{"name":"lazy1Args","module":"Node.Args","detail":"instance lazy1Args :: Lazy1 Args"},{"name":"functorArgs","module":"Node.Args","detail":"instance functorArgs :: Functor Args"},{"name":"applyArgs","module":"Node.Args","detail":"instance applyArgs :: Apply Args"},{"name":"applicativeArgs","module":"Node.Args","detail":"instance applicativeArgs :: Applicative Args"},{"name":"alternativeArgs","module":"Node.Args","detail":"instance alternativeArgs :: Alternative Args"},{"name":"argsInterpArgs","module":"Node.Args","detail":"instance argsInterpArgs :: ArgsInterp Args"},{"name":"many","module":"Node.Args","detail":"many :: forall t. Args t -\u003e Args [t]"},{"name":"many1","module":"Node.Args","detail":"many1 :: forall t. Args t -\u003e Args [t]"},{"name":"opt","module":"Node.Args","detail":"opt :: forall t. Args t -\u003e Args (Maybe t)"},{"name":"flagOpt","module":"Node.Args","detail":"flagOpt :: String -\u003e Args Boolean"},{"name":"RawArg","module":"Node.Args","detail":"data RawArg = Flag String | Argument String"},{"name":"Flag","module":"Node.Args","detail":"data RawArg = Flag String | Argument String"},{"name":"Argument","module":"Node.Args","detail":"data RawArg = Flag String | Argument String"},{"name":"parseRawArgs","module":"Node.Args","detail":"parseRawArgs :: [String] -\u003e [RawArg]"},{"name":"ParsedArg","module":"Node.Args","detail":"data ParsedArg = FlagOnly String | ArgumentOnly String | FlagAndArgument String String"},{"name":"FlagOnly","module":"Node.Args","detail":"data ParsedArg = FlagOnly String | ArgumentOnly String | FlagAndArgument String String"},{"name":"ArgumentOnly","module":"Node.Args","detail":"data ParsedArg = FlagOnly String | ArgumentOnly String | FlagAndArgument String String"},{"name":"FlagAndArgument","module":"Node.Args","detail":"data ParsedArg = FlagOnly String | ArgumentOnly String | FlagAndArgument String String"},{"name":"showParsedArg","module":"Node.Args","detail":"instance showParsedArg :: Show ParsedArg"},{"name":"parseArgs","module":"Node.Args","detail":"parseArgs :: [RawArg] -\u003e [ParsedArg]"},{"name":"ReadArgs","module":"Node.Args","detail":"data ReadArgs a = ReadArgs ([ParsedArg] -\u003e Either String (Tuple a [ParsedArg]))"},{"name":"ReadArgs","module":"Node.Args","detail":"data ReadArgs a = ReadArgs ([ParsedArg] -\u003e Either String (Tuple a [ParsedArg]))"},{"name":"runReadArgs","module":"Node.Args","detail":"runReadArgs :: forall a. ReadArgs a -\u003e [ParsedArg] -\u003e Either String (Tuple a [ParsedArg])"},{"name":"match","module":"Node.Args","detail":"match :: forall t. String -\u003e (ParsedArg -\u003e Maybe t) -\u003e ReadArgs t"},{"name":"match'","module":"Node.Args","detail":"match' :: forall t. String -\u003e (ParsedArg -\u003e Maybe t) -\u003e [ParsedArg] -\u003e [ParsedArg] -\u003e Either String (Tuple t [ParsedArg])"},{"name":"lazy1ReadArgs","module":"Node.Args","detail":"instance lazy1ReadArgs :: Lazy1 ReadArgs"},{"name":"functorReadArgs","module":"Node.Args","detail":"instance functorReadArgs :: Functor ReadArgs"},{"name":"applyReadArgs","module":"Node.Args","detail":"instance applyReadArgs :: Apply ReadArgs"},{"name":"applicativeReadArgs","module":"Node.Args","detail":"instance applicativeReadArgs :: Applicative ReadArgs"},{"name":"alternativeReadArgs","module":"Node.Args","detail":"instance alternativeReadArgs :: Alternative ReadArgs"},{"name":"argsInterpReadArgs","module":"Node.Args","detail":"instance argsInterpReadArgs :: ArgsInterp ReadArgs"},{"name":"readManyArgs","module":"Node.Args","detail":"readManyArgs :: forall a. ReadArgs a -\u003e ReadArgs [a]"},{"name":"readOptArg","module":"Node.Args","detail":"readOptArg :: forall a. ReadArgs a -\u003e ReadArgs (Maybe a)"},{"name":"EArgs","module":"Node.Args","detail":"data EArgs :: !"},{"name":"ArgsError","module":"Node.Args","detail":"data ArgsError = UnknownArgs [ParsedArg] | ArgsError String"},{"name":"UnknownArgs","module":"Node.Args","detail":"data ArgsError = UnknownArgs [ParsedArg] | ArgsError String"},{"name":"ArgsError","module":"Node.Args","detail":"data ArgsError = UnknownArgs [ParsedArg] | ArgsError String"},{"name":"showArgsError","module":"Node.Args","detail":"instance showArgsError :: Show ArgsError"},{"name":"argv","module":"Node.Args","detail":"argv :: forall eff. Eff (args :: EArgs | eff) [String]"},{"name":"readArgs","module":"Node.Args","detail":"readArgs :: forall t eff. Args t -\u003e Eff (args :: EArgs | eff) (Either ArgsError t)"},{"name":"readArgs'","module":"Node.Args","detail":"readArgs' :: forall t eff. Args (Eff eff t) -\u003e Eff (args :: EArgs | eff) (Either ArgsError t)"},{"name":"slice","module":"Node.Buffer.Unsafe","detail":"slice :: Offset -\u003e Offset -\u003e Buffer -\u003e Buffer"},{"name":"Octet","module":"Node.Buffer","detail":"type Octet  = Number"},{"name":"Offset","module":"Node.Buffer","detail":"type Offset  = Number"},{"name":"Buffer","module":"Node.Buffer","detail":"data Buffer :: *"},{"name":"showBuffer","module":"Node.Buffer","detail":"instance showBuffer :: Show Buffer"},{"name":"showImpl","module":"Node.Buffer","detail":"showImpl :: Buffer -\u003e String"},{"name":"BufferWrite","module":"Node.Buffer","detail":"data BufferWrite :: !"},{"name":"BufferValueType","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"UInt8","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"UInt16LE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"UInt16BE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"UInt32LE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"UInt32BE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"Int8","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"Int16LE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"Int16BE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"Int32LE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"Int32BE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"FloatLE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"FloatBE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"DoubleLE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"DoubleBE","module":"Node.Buffer","detail":"data BufferValueType = UInt8 | UInt16LE | UInt16BE | UInt32LE | UInt32BE | Int8 | Int16LE | Int16BE | Int32LE | Int32BE | FloatLE | FloatBE | DoubleLE | DoubleBE"},{"name":"showBufferValueType","module":"Node.Buffer","detail":"instance showBufferValueType :: Show BufferValueType"},{"name":"create","module":"Node.Buffer","detail":"create :: Number -\u003e Buffer"},{"name":"fromArray","module":"Node.Buffer","detail":"fromArray :: [Octet] -\u003e Buffer"},{"name":"fromString","module":"Node.Buffer","detail":"fromString :: String -\u003e Encoding -\u003e Buffer"},{"name":"fromStringImpl","module":"Node.Buffer","detail":"fromStringImpl :: String -\u003e String -\u003e Buffer"},{"name":"read","module":"Node.Buffer","detail":"read :: BufferValueType -\u003e Offset -\u003e Buffer -\u003e Number"},{"name":"readImpl","module":"Node.Buffer","detail":"readImpl :: String -\u003e Offset -\u003e Buffer -\u003e Number"},{"name":"readString","module":"Node.Buffer","detail":"readString :: forall e. Encoding -\u003e Offset -\u003e Offset -\u003e Buffer -\u003e String"},{"name":"readStringImpl","module":"Node.Buffer","detail":"readStringImpl :: String -\u003e Offset -\u003e Offset -\u003e Buffer -\u003e String"},{"name":"toString","module":"Node.Buffer","detail":"toString :: forall e. Encoding -\u003e Buffer -\u003e String"},{"name":"toStringImpl","module":"Node.Buffer","detail":"toStringImpl :: String -\u003e Buffer -\u003e String"},{"name":"write","module":"Node.Buffer","detail":"write :: forall e. BufferValueType -\u003e Number -\u003e Offset -\u003e Buffer -\u003e Eff (buffer :: BufferWrite | e) {  }"},{"name":"writeImpl","module":"Node.Buffer","detail":"writeImpl :: forall e. String -\u003e Number -\u003e Offset -\u003e Buffer -\u003e Eff (buffer :: BufferWrite | e) {  }"},{"name":"writeString","module":"Node.Buffer","detail":"writeString :: forall e. Encoding -\u003e Offset -\u003e Number -\u003e String -\u003e Buffer -\u003e Eff (buffer :: BufferWrite | e) Number"},{"name":"writeStringImpl","module":"Node.Buffer","detail":"writeStringImpl :: forall e. String -\u003e Offset -\u003e Number -\u003e String -\u003e Buffer -\u003e Eff (buffer :: BufferWrite | e) Number"},{"name":"toArray","module":"Node.Buffer","detail":"toArray :: Buffer -\u003e [Octet]"},{"name":"getAtOffset","module":"Node.Buffer","detail":"getAtOffset :: Offset -\u003e Buffer -\u003e Maybe Octet"},{"name":"setAtOffset","module":"Node.Buffer","detail":"setAtOffset :: forall e. Octet -\u003e Offset -\u003e Buffer -\u003e Eff (buffer :: BufferWrite | e) {  }"},{"name":"size","module":"Node.Buffer","detail":"size :: forall e. Buffer -\u003e Number"},{"name":"concat","module":"Node.Buffer","detail":"concat :: [Buffer] -\u003e Buffer"},{"name":"concat'","module":"Node.Buffer","detail":"concat' :: [Buffer] -\u003e Number -\u003e Buffer"},{"name":"copy","module":"Node.Buffer","detail":"copy :: Offset -\u003e Offset -\u003e Buffer -\u003e Offset -\u003e Buffer -\u003e Buffer"},{"name":"fill","module":"Node.Buffer","detail":"fill :: forall e. Octet -\u003e Offset -\u003e Offset -\u003e Buffer -\u003e Eff (buffer :: BufferWrite | e) {  }"},{"name":"Encoding","module":"Node.Encoding","detail":"data Encoding = ASCII | UTF8 | UTF16LE | UCS2 | Base64 | Binary | Hex"},{"name":"ASCII","module":"Node.Encoding","detail":"data Encoding = ASCII | UTF8 | UTF16LE | UCS2 | Base64 | Binary | Hex"},{"name":"UTF8","module":"Node.Encoding","detail":"data Encoding = ASCII | UTF8 | UTF16LE | UCS2 | Base64 | Binary | Hex"},{"name":"UTF16LE","module":"Node.Encoding","detail":"data Encoding = ASCII | UTF8 | UTF16LE | UCS2 | Base64 | Binary | Hex"},{"name":"UCS2","module":"Node.Encoding","detail":"data Encoding = ASCII | UTF8 | UTF16LE | UCS2 | Base64 | Binary | Hex"},{"name":"Base64","module":"Node.Encoding","detail":"data Encoding = ASCII | UTF8 | UTF16LE | UCS2 | Base64 | Binary | Hex"},{"name":"Binary","module":"Node.Encoding","detail":"data Encoding = ASCII | UTF8 | UTF16LE | UCS2 | Base64 | Binary | Hex"},{"name":"Hex","module":"Node.Encoding","detail":"data Encoding = ASCII | UTF8 | UTF16LE | UCS2 | Base64 | Binary | Hex"},{"name":"showEncoding","module":"Node.Encoding","detail":"instance showEncoding :: Show Encoding"},{"name":"byteLengthImpl","module":"Node.Encoding","detail":"byteLengthImpl :: forall e. String -\u003e String -\u003e Number"},{"name":"byteLength","module":"Node.Encoding","detail":"byteLength :: String -\u003e Encoding -\u003e Number"},{"name":"Nullable","module":"Node.FS.Async","detail":"data Nullable :: * -\u003e *"},{"name":"JSCallback","module":"Node.FS.Async","detail":"type JSCallback a = Fn2 (Nullable Error) a Unit"},{"name":"handleCallbackImpl","module":"Node.FS.Async","detail":"handleCallbackImpl :: forall eff a. Fn3 (Error -\u003e Either Error a) (a -\u003e Either Error a) (Callback eff a) (JSCallback a)"},{"name":"handleCallback","module":"Node.FS.Async","detail":"handleCallback :: forall eff a b. Callback eff a -\u003e JSCallback a"},{"name":"fs","module":"Node.FS.Async","detail":"fs :: { appendFile :: forall a opts. Fn4 FilePath a {  | opts } (JSCallback Unit) Unit, writeFile :: forall a opts. Fn4 FilePath a {  | opts } (JSCallback Unit) Unit, readFile :: forall a opts. Fn3 FilePath {  | opts } (JSCallback a) Unit, utimes :: Fn4 FilePath Number Number (JSCallback Unit) Unit, readdir :: Fn2 FilePath (JSCallback [FilePath]) Unit, mkdir :: Fn3 FilePath Number (JSCallback Unit) Unit, rmdir :: Fn2 FilePath (JSCallback Unit) Unit, unlink :: Fn2 FilePath (JSCallback Unit) Unit, realpath :: forall cache. Fn3 FilePath {  | cache } (JSCallback FilePath) Unit, readlink :: Fn2 FilePath (JSCallback FilePath) Unit, symlink :: Fn4 FilePath FilePath String (JSCallback Unit) Unit, link :: Fn3 FilePath FilePath (JSCallback Unit) Unit, stat :: Fn2 FilePath (JSCallback StatsObj) Unit, chmod :: Fn3 FilePath Number (JSCallback Unit) Unit, chown :: Fn4 FilePath Number Number (JSCallback Unit) Unit, truncate :: Fn3 FilePath Number (JSCallback Unit) Unit, rename :: Fn3 FilePath FilePath (JSCallback Unit) Unit }"},{"name":"Callback","module":"Node.FS.Async","detail":"type Callback eff a = Either Error a -\u003e Eff eff Unit"},{"name":"rename","module":"Node.FS.Async","detail":"rename :: forall eff. FilePath -\u003e FilePath -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"truncate","module":"Node.FS.Async","detail":"truncate :: forall eff. FilePath -\u003e Number -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"chown","module":"Node.FS.Async","detail":"chown :: forall eff. FilePath -\u003e Number -\u003e Number -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"chmod","module":"Node.FS.Async","detail":"chmod :: forall eff. FilePath -\u003e Number -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"stat","module":"Node.FS.Async","detail":"stat :: forall eff. FilePath -\u003e Callback eff Stats -\u003e Eff (fs :: FS | eff) Unit"},{"name":"link","module":"Node.FS.Async","detail":"link :: forall eff. FilePath -\u003e FilePath -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"symlink","module":"Node.FS.Async","detail":"symlink :: forall eff. FilePath -\u003e FilePath -\u003e SymlinkType -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"readlink","module":"Node.FS.Async","detail":"readlink :: forall eff. FilePath -\u003e Callback eff FilePath -\u003e Eff (fs :: FS | eff) Unit"},{"name":"realpath","module":"Node.FS.Async","detail":"realpath :: forall eff. FilePath -\u003e Callback eff FilePath -\u003e Eff (fs :: FS | eff) Unit"},{"name":"realpath'","module":"Node.FS.Async","detail":"realpath' :: forall eff cache. FilePath -\u003e {  | cache } -\u003e Callback eff FilePath -\u003e Eff (fs :: FS | eff) Unit"},{"name":"unlink","module":"Node.FS.Async","detail":"unlink :: forall eff. FilePath -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"rmdir","module":"Node.FS.Async","detail":"rmdir :: forall eff. FilePath -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"mkdir","module":"Node.FS.Async","detail":"mkdir :: forall eff. FilePath -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"mkdir'","module":"Node.FS.Async","detail":"mkdir' :: forall eff. FilePath -\u003e Number -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"readdir","module":"Node.FS.Async","detail":"readdir :: forall eff. FilePath -\u003e Callback eff [FilePath] -\u003e Eff (fs :: FS | eff) Unit"},{"name":"utimes","module":"Node.FS.Async","detail":"utimes :: forall eff. FilePath -\u003e Date -\u003e Date -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"readFile","module":"Node.FS.Async","detail":"readFile :: forall eff. FilePath -\u003e Callback eff Buffer -\u003e Eff (fs :: FS | eff) Unit"},{"name":"readTextFile","module":"Node.FS.Async","detail":"readTextFile :: forall eff. Encoding -\u003e FilePath -\u003e Callback eff String -\u003e Eff (fs :: FS | eff) Unit"},{"name":"writeFile","module":"Node.FS.Async","detail":"writeFile :: forall eff. FilePath -\u003e Buffer -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"writeTextFile","module":"Node.FS.Async","detail":"writeTextFile :: forall eff. Encoding -\u003e FilePath -\u003e String -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"appendFile","module":"Node.FS.Async","detail":"appendFile :: forall eff. FilePath -\u003e Buffer -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"appendTextFile","module":"Node.FS.Async","detail":"appendTextFile :: forall eff. Encoding -\u003e FilePath -\u003e String -\u003e Callback eff Unit -\u003e Eff (fs :: FS | eff) Unit"},{"name":"StatsObj","module":"Node.FS.Stats","detail":"type StatsObj  = { isSocket :: Fn0 Boolean, isFIFO :: Fn0 Boolean, isCharacterDevice :: Fn0 Boolean, isBlockDevice :: Fn0 Boolean, isDirectory :: Fn0 Boolean, isFile :: Fn0 Boolean, ctime :: JSDate, mtime :: JSDate, atime :: JSDate, size :: Number, ino :: Number, rdev :: Number, gid :: Number, uid :: Number, nlink :: Number, mode :: Number, dev :: Number }"},{"name":"Stats","module":"Node.FS.Stats","detail":"data Stats = Stats StatsObj"},{"name":"Stats","module":"Node.FS.Stats","detail":"data Stats = Stats StatsObj"},{"name":"showStatsObj","module":"Node.FS.Stats","detail":"showStatsObj :: StatsObj -\u003e String"},{"name":"showStats","module":"Node.FS.Stats","detail":"instance showStats :: Show Stats"},{"name":"statsMethod","module":"Node.FS.Stats","detail":"statsMethod :: Fn2 String StatsObj Boolean"},{"name":"isFile","module":"Node.FS.Stats","detail":"isFile :: Stats -\u003e Boolean"},{"name":"isDirectory","module":"Node.FS.Stats","detail":"isDirectory :: Stats -\u003e Boolean"},{"name":"isBlockDevice","module":"Node.FS.Stats","detail":"isBlockDevice :: Stats -\u003e Boolean"},{"name":"isCharacterDevice","module":"Node.FS.Stats","detail":"isCharacterDevice :: Stats -\u003e Boolean"},{"name":"isFIFO","module":"Node.FS.Stats","detail":"isFIFO :: Stats -\u003e Boolean"},{"name":"isSocket","module":"Node.FS.Stats","detail":"isSocket :: Stats -\u003e Boolean"},{"name":"isSymbolicLink","module":"Node.FS.Stats","detail":"isSymbolicLink :: Stats -\u003e Boolean"},{"name":"accessedTime","module":"Node.FS.Stats","detail":"accessedTime :: Stats -\u003e Date"},{"name":"modifiedTime","module":"Node.FS.Stats","detail":"modifiedTime :: Stats -\u003e Date"},{"name":"statusChangedTime","module":"Node.FS.Stats","detail":"statusChangedTime :: Stats -\u003e Date"},{"name":"fs","module":"Node.FS.Sync","detail":"fs :: { appendFileSync :: forall a opts. Fn3 FilePath a {  | opts } Unit, writeFileSync :: forall a opts. Fn3 FilePath a {  | opts } Unit, readFileSync :: forall a opts. Fn2 FilePath {  | opts } a, utimesSync :: Fn3 FilePath Number Number Unit, readdirSync :: Fn1 FilePath [FilePath], mkdirSync :: Fn2 FilePath Number Unit, rmdirSync :: Fn1 FilePath Unit, unlinkSync :: Fn1 FilePath Unit, realpathSync :: forall cache. Fn2 FilePath {  | cache } FilePath, readlinkSync :: Fn1 FilePath FilePath, symlinkSync :: Fn3 FilePath FilePath String Unit, linkSync :: Fn2 FilePath FilePath Unit, statSync :: Fn1 FilePath StatsObj, chmodSync :: Fn2 FilePath Number Unit, chownSync :: Fn3 FilePath Number Number Unit, truncateSync :: Fn2 FilePath Number Unit, renameSync :: Fn2 FilePath FilePath Unit }"},{"name":"mkEff","module":"Node.FS.Sync","detail":"mkEff :: forall eff a. (Unit -\u003e a) -\u003e Eff eff a"},{"name":"rename","module":"Node.FS.Sync","detail":"rename :: forall eff. FilePath -\u003e FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"truncate","module":"Node.FS.Sync","detail":"truncate :: forall eff. FilePath -\u003e Number -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"chown","module":"Node.FS.Sync","detail":"chown :: forall eff. FilePath -\u003e Number -\u003e Number -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"chmod","module":"Node.FS.Sync","detail":"chmod :: forall eff. FilePath -\u003e Number -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"stat","module":"Node.FS.Sync","detail":"stat :: forall eff. FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) Stats"},{"name":"link","module":"Node.FS.Sync","detail":"link :: forall eff. FilePath -\u003e FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"symlink","module":"Node.FS.Sync","detail":"symlink :: forall eff. FilePath -\u003e FilePath -\u003e SymlinkType -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"readlink","module":"Node.FS.Sync","detail":"readlink :: forall eff. FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) FilePath"},{"name":"realpath","module":"Node.FS.Sync","detail":"realpath :: forall eff. FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) FilePath"},{"name":"realpath'","module":"Node.FS.Sync","detail":"realpath' :: forall eff cache. FilePath -\u003e {  | cache } -\u003e Eff (err :: Exception, fs :: FS | eff) FilePath"},{"name":"unlink","module":"Node.FS.Sync","detail":"unlink :: forall eff. FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"rmdir","module":"Node.FS.Sync","detail":"rmdir :: forall eff. FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"mkdir","module":"Node.FS.Sync","detail":"mkdir :: forall eff. FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"mkdir'","module":"Node.FS.Sync","detail":"mkdir' :: forall eff. FilePath -\u003e Number -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"readdir","module":"Node.FS.Sync","detail":"readdir :: forall eff. FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) [FilePath]"},{"name":"utimes","module":"Node.FS.Sync","detail":"utimes :: forall eff. FilePath -\u003e Date -\u003e Date -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"readFile","module":"Node.FS.Sync","detail":"readFile :: forall eff. FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) Buffer"},{"name":"readTextFile","module":"Node.FS.Sync","detail":"readTextFile :: forall eff. Encoding -\u003e FilePath -\u003e Eff (err :: Exception, fs :: FS | eff) String"},{"name":"writeFile","module":"Node.FS.Sync","detail":"writeFile :: forall eff. FilePath -\u003e Buffer -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"writeTextFile","module":"Node.FS.Sync","detail":"writeTextFile :: forall eff. Encoding -\u003e FilePath -\u003e String -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"appendFile","module":"Node.FS.Sync","detail":"appendFile :: forall eff. FilePath -\u003e Buffer -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"appendTextFile","module":"Node.FS.Sync","detail":"appendTextFile :: forall eff. Encoding -\u003e FilePath -\u003e String -\u003e Eff (err :: Exception, fs :: FS | eff) Unit"},{"name":"FS","module":"Node.FS","detail":"data FS :: !"},{"name":"SymlinkType","module":"Node.FS","detail":"data SymlinkType = FileLink | DirLink | JunctionLink"},{"name":"FileLink","module":"Node.FS","detail":"data SymlinkType = FileLink | DirLink | JunctionLink"},{"name":"DirLink","module":"Node.FS","detail":"data SymlinkType = FileLink | DirLink | JunctionLink"},{"name":"JunctionLink","module":"Node.FS","detail":"data SymlinkType = FileLink | DirLink | JunctionLink"},{"name":"showSymlinkType","module":"Node.FS","detail":"instance showSymlinkType :: Show SymlinkType"},{"name":"eqSymlinkType","module":"Node.FS","detail":"instance eqSymlinkType :: Eq SymlinkType"},{"name":"FilePath","module":"Node.Path","detail":"type FilePath  = String"},{"name":"normalize","module":"Node.Path","detail":"normalize :: FilePath -\u003e FilePath"},{"name":"join","module":"Node.Path","detail":"join :: [FilePath] -\u003e FilePath"},{"name":"resolve","module":"Node.Path","detail":"resolve :: [FilePath] -\u003e FilePath -\u003e FilePath"},{"name":"relative","module":"Node.Path","detail":"relative :: FilePath -\u003e FilePath -\u003e FilePath"},{"name":"dirname","module":"Node.Path","detail":"dirname :: FilePath -\u003e FilePath"},{"name":"basename","module":"Node.Path","detail":"basename :: FilePath -\u003e FilePath"},{"name":"basenameWithoutExt","module":"Node.Path","detail":"basenameWithoutExt :: FilePath -\u003e FilePath -\u003e FilePath"},{"name":"extname","module":"Node.Path","detail":"extname :: FilePath -\u003e FilePath"},{"name":"sep","module":"Node.Path","detail":"sep :: String"},{"name":"delimiter","module":"Node.Path","detail":"delimiter :: String"},{"name":"completion","module":"Main","detail":"completion :: forall eff. Completer eff"},{"name":"Console","module":"Node.ReadLine","detail":"data Console :: !"},{"name":"Interface","module":"Node.ReadLine","detail":"data Interface :: *"},{"name":"InputStream","module":"Node.ReadLine","detail":"data InputStream :: *"},{"name":"OutputStream","module":"Node.ReadLine","detail":"data OutputStream :: *"},{"name":"process","module":"Node.ReadLine","detail":"process :: { stdin :: InputStream, stdout :: OutputStream, stderr :: OutputStream }"},{"name":"Completer","module":"Node.ReadLine","detail":"type Completer eff = String -\u003e Eff eff (Tuple [String] String)"},{"name":"LineHandler","module":"Node.ReadLine","detail":"type LineHandler eff = String -\u003e Eff eff Unit"},{"name":"setLineHandler","module":"Node.ReadLine","detail":"setLineHandler :: forall eff. LineHandler eff -\u003e Interface -\u003e Eff (console :: Console | eff) Interface"},{"name":"prompt","module":"Node.ReadLine","detail":"prompt :: forall eff. Interface -\u003e Eff (console :: Console | eff) Interface"},{"name":"setPrompt","module":"Node.ReadLine","detail":"setPrompt :: forall eff. String -\u003e Number -\u003e Interface -\u003e Eff (console :: Console | eff) Interface"},{"name":"createInterface","module":"Node.ReadLine","detail":"createInterface :: forall eff. InputStream -\u003e OutputStream -\u003e Completer eff -\u003e Eff (console :: Console | eff) Interface"},{"name":"url","module":"Node.URL","detail":"url :: { resolve :: Fn2 String String String, format :: Fn1 URLObjQ String, parse :: Fn1 String URLObjQ }"},{"name":"StringQ","module":"Node.URL","detail":"data StringQ :: *"},{"name":"BooleanQ","module":"Node.URL","detail":"data BooleanQ :: *"},{"name":"URLObjQ","module":"Node.URL","detail":"type URLObjQ  = { slashes :: BooleanQ, search :: StringQ, query :: StringQ, protocol :: StringQ, port :: StringQ, pathname :: StringQ, path :: StringQ, href :: StringQ, hostname :: StringQ, host :: StringQ, hash :: StringQ, auth :: StringQ }"},{"name":"URLObj","module":"Node.URL","detail":"type URLObj  = { slashes :: Maybe Boolean, search :: Maybe String, query :: Maybe String, protocol :: Maybe String, port :: Maybe String, pathname :: Maybe String, path :: Maybe String, href :: Maybe String, hostname :: Maybe String, host :: Maybe String, hash :: Maybe String, auth :: Maybe String }"},{"name":"URL","module":"Node.URL","detail":"data URL = URL URLObj"},{"name":"URL","module":"Node.URL","detail":"data URL = URL URLObj"},{"name":"maybeify","module":"Node.URL","detail":"maybeify :: URLObjQ -\u003e URLObj"},{"name":"unMaybeify","module":"Node.URL","detail":"unMaybeify :: URLObj -\u003e URLObjQ"},{"name":"parens","module":"Main","detail":"parens :: forall m a. (Monad m) =\u003e ParserT String m a -\u003e ParserT String m a"},{"name":"nested","module":"Main","detail":"nested :: forall m. (Functor m, Monad m) =\u003e ParserT String m Number"},{"name":"parseTest","module":"Main","detail":"parseTest :: forall s a eff. (Show a) =\u003e Parser s a -\u003e s -\u003e Eff (trace :: Trace | eff) Unit"},{"name":"opTest","module":"Main","detail":"opTest :: Parser String String"},{"name":"digit","module":"Main","detail":"digit :: Parser String Number"},{"name":"exprTest","module":"Main","detail":"exprTest :: Parser String Number"},{"name":"manySatisfyTest","module":"Main","detail":"manySatisfyTest :: Parser String [String]"},{"name":"fix","module":"Text.Parsing.Parser.Combinators","detail":"fix :: forall m s a. (ParserT m s a -\u003e ParserT m s a) -\u003e ParserT m s a"},{"name":"fix2","module":"Text.Parsing.Parser.Combinators","detail":"fix2 :: forall m s a b. (Tuple (ParserT m s a) (ParserT m s b) -\u003e Tuple (ParserT m s a) (ParserT m s b)) -\u003e Tuple (ParserT m s a) (ParserT m s b)"},{"name":"many","module":"Text.Parsing.Parser.Combinators","detail":"many :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m [a]"},{"name":"many1","module":"Text.Parsing.Parser.Combinators","detail":"many1 :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m [a]"},{"name":"(\u003c?\u003e)","module":"Text.Parsing.Parser.Combinators","detail":"(\u003c?\u003e) :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e String -\u003e ParserT s m a"},{"name":"between","module":"Text.Parsing.Parser.Combinators","detail":"between :: forall m s a open close. (Monad m) =\u003e ParserT s m open -\u003e ParserT s m close -\u003e ParserT s m a -\u003e ParserT s m a"},{"name":"option","module":"Text.Parsing.Parser.Combinators","detail":"option :: forall m s a. (Monad m) =\u003e a -\u003e ParserT s m a -\u003e ParserT s m a"},{"name":"optional","module":"Text.Parsing.Parser.Combinators","detail":"optional :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m {  }"},{"name":"optionMaybe","module":"Text.Parsing.Parser.Combinators","detail":"optionMaybe :: forall m s a. (Functor m, Monad m) =\u003e ParserT s m a -\u003e ParserT s m (Maybe a)"},{"name":"try","module":"Text.Parsing.Parser.Combinators","detail":"try :: forall m s a. (Functor m) =\u003e ParserT s m a -\u003e ParserT s m a"},{"name":"sepBy","module":"Text.Parsing.Parser.Combinators","detail":"sepBy :: forall m s a sep. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m sep -\u003e ParserT s m [a]"},{"name":"sepBy1","module":"Text.Parsing.Parser.Combinators","detail":"sepBy1 :: forall m s a sep. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m sep -\u003e ParserT s m [a]"},{"name":"sepEndBy","module":"Text.Parsing.Parser.Combinators","detail":"sepEndBy :: forall m s a sep. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m sep -\u003e ParserT s m [a]"},{"name":"sepEndBy1","module":"Text.Parsing.Parser.Combinators","detail":"sepEndBy1 :: forall m s a sep. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m sep -\u003e ParserT s m [a]"},{"name":"endBy1","module":"Text.Parsing.Parser.Combinators","detail":"endBy1 :: forall m s a sep. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m sep -\u003e ParserT s m [a]"},{"name":"endBy","module":"Text.Parsing.Parser.Combinators","detail":"endBy :: forall m s a sep. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m sep -\u003e ParserT s m [a]"},{"name":"chainr","module":"Text.Parsing.Parser.Combinators","detail":"chainr :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e a -\u003e ParserT s m a"},{"name":"chainl","module":"Text.Parsing.Parser.Combinators","detail":"chainl :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e a -\u003e ParserT s m a"},{"name":"chainl1","module":"Text.Parsing.Parser.Combinators","detail":"chainl1 :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e ParserT s m a"},{"name":"chainl1'","module":"Text.Parsing.Parser.Combinators","detail":"chainl1' :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e a -\u003e ParserT s m a"},{"name":"chainr1","module":"Text.Parsing.Parser.Combinators","detail":"chainr1 :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e ParserT s m a"},{"name":"chainr1'","module":"Text.Parsing.Parser.Combinators","detail":"chainr1' :: forall m s a. (Monad m) =\u003e ParserT s m a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e a -\u003e ParserT s m a"},{"name":"choice","module":"Text.Parsing.Parser.Combinators","detail":"choice :: forall m s a. (Monad m) =\u003e [ParserT s m a] -\u003e ParserT s m a"},{"name":"Assoc","module":"Text.Parsing.Parser.Expr","detail":"data Assoc = AssocNone | AssocLeft | AssocRight"},{"name":"AssocNone","module":"Text.Parsing.Parser.Expr","detail":"data Assoc = AssocNone | AssocLeft | AssocRight"},{"name":"AssocLeft","module":"Text.Parsing.Parser.Expr","detail":"data Assoc = AssocNone | AssocLeft | AssocRight"},{"name":"AssocRight","module":"Text.Parsing.Parser.Expr","detail":"data Assoc = AssocNone | AssocLeft | AssocRight"},{"name":"Operator","module":"Text.Parsing.Parser.Expr","detail":"data Operator m s a = Infix (ParserT s m (a -\u003e a -\u003e a)) Assoc | Prefix (ParserT s m (a -\u003e a)) | Postfix (ParserT s m (a -\u003e a))"},{"name":"Infix","module":"Text.Parsing.Parser.Expr","detail":"data Operator m s a = Infix (ParserT s m (a -\u003e a -\u003e a)) Assoc | Prefix (ParserT s m (a -\u003e a)) | Postfix (ParserT s m (a -\u003e a))"},{"name":"Prefix","module":"Text.Parsing.Parser.Expr","detail":"data Operator m s a = Infix (ParserT s m (a -\u003e a -\u003e a)) Assoc | Prefix (ParserT s m (a -\u003e a)) | Postfix (ParserT s m (a -\u003e a))"},{"name":"Postfix","module":"Text.Parsing.Parser.Expr","detail":"data Operator m s a = Infix (ParserT s m (a -\u003e a -\u003e a)) Assoc | Prefix (ParserT s m (a -\u003e a)) | Postfix (ParserT s m (a -\u003e a))"},{"name":"OperatorTable","module":"Text.Parsing.Parser.Expr","detail":"type OperatorTable m s a = [[Operator m s a]]"},{"name":"SplitAccum","module":"Text.Parsing.Parser.Expr","detail":"type SplitAccum m s a = { postfix :: [ParserT s m (a -\u003e a)], prefix :: [ParserT s m (a -\u003e a)], nassoc :: [ParserT s m (a -\u003e a -\u003e a)], lassoc :: [ParserT s m (a -\u003e a -\u003e a)], rassoc :: [ParserT s m (a -\u003e a -\u003e a)] }"},{"name":"splitOp","module":"Text.Parsing.Parser.Expr","detail":"splitOp :: forall m s a. Operator m s a -\u003e SplitAccum m s a -\u003e SplitAccum m s a"},{"name":"rassocP","module":"Text.Parsing.Parser.Expr","detail":"rassocP :: forall m a b c s. (Monad m) =\u003e a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e ParserT s m (b -\u003e c) -\u003e ParserT s m b -\u003e ParserT s m (c -\u003e a) -\u003e ParserT s m a"},{"name":"rassocP1","module":"Text.Parsing.Parser.Expr","detail":"rassocP1 :: forall m a b c s. (Monad m) =\u003e a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e ParserT s m (b -\u003e c) -\u003e ParserT s m b -\u003e ParserT s m (c -\u003e a) -\u003e ParserT s m a"},{"name":"lassocP","module":"Text.Parsing.Parser.Expr","detail":"lassocP :: forall m a b c s. (Monad m) =\u003e a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e ParserT s m (b -\u003e c) -\u003e ParserT s m b -\u003e ParserT s m (c -\u003e a) -\u003e ParserT s m a"},{"name":"lassocP1","module":"Text.Parsing.Parser.Expr","detail":"lassocP1 :: forall m a b c s. (Monad m) =\u003e a -\u003e ParserT s m (a -\u003e a -\u003e a) -\u003e ParserT s m (b -\u003e c) -\u003e ParserT s m b -\u003e ParserT s m (c -\u003e a) -\u003e ParserT s m a"},{"name":"nassocP","module":"Text.Parsing.Parser.Expr","detail":"nassocP :: forall m a b c d e s. (Monad m) =\u003e a -\u003e ParserT s m (a -\u003e d -\u003e e) -\u003e ParserT s m (b -\u003e c) -\u003e ParserT s m b -\u003e ParserT s m (c -\u003e d) -\u003e ParserT s m e"},{"name":"termP","module":"Text.Parsing.Parser.Expr","detail":"termP :: forall m s a b c. (Monad m) =\u003e ParserT s m (a -\u003e b) -\u003e ParserT s m a -\u003e ParserT s m (b -\u003e c) -\u003e ParserT s m c"},{"name":"buildExprParser","module":"Text.Parsing.Parser.Expr","detail":"buildExprParser :: forall m s a. (Monad m) =\u003e OperatorTable m s a -\u003e ParserT s m a -\u003e ParserT s m a"},{"name":"eof","module":"Text.Parsing.Parser.String","detail":"eof :: forall m. (Monad m) =\u003e ParserT String m {  }"},{"name":"string","module":"Text.Parsing.Parser.String","detail":"string :: forall m. (Monad m) =\u003e String -\u003e ParserT String m String"},{"name":"char","module":"Text.Parsing.Parser.String","detail":"char :: forall m. (Monad m) =\u003e ParserT String m String"},{"name":"satisfy","module":"Text.Parsing.Parser.String","detail":"satisfy :: forall m. (Monad m) =\u003e (String -\u003e Boolean) -\u003e ParserT String m String"},{"name":"whiteSpace","module":"Text.Parsing.Parser.String","detail":"whiteSpace :: forall m. (Monad m) =\u003e ParserT String m String"},{"name":"LanguageDef","module":"Text.Parsing.Parser.Token","detail":"type LanguageDef s m = { caseSensitive :: Boolean, reservedOpNames :: [String], reservedNames :: [String], opLetter :: ParserT s m String, opStart :: ParserT s m String, identLetter :: ParserT s m String, identStart :: ParserT s m String, nestedComments :: Boolean, commentLine :: String, commentEnd :: String, commentStart :: String }"},{"name":"TokenParser","module":"Text.Parsing.Parser.Token","detail":"type TokenParser s m = { commaSep1 :: forall a. ParserT s m a -\u003e ParserT s m [a], commaSep :: forall a. ParserT s m a -\u003e ParserT s m [a], semiSep1 :: forall a. ParserT s m a -\u003e ParserT s m [a], semiSep :: forall a. ParserT s m a -\u003e ParserT s m [a], dot :: ParserT s m String, colon :: ParserT s m String, comma :: ParserT s m String, semi :: ParserT s m String, brackets :: forall a. ParserT s m a -\u003e ParserT s m a, angles :: forall a. ParserT s m a -\u003e ParserT s m a, braces :: forall a. ParserT s m a -\u003e ParserT s m a, parens :: forall a. ParserT s m a -\u003e ParserT s m a, whiteSpace :: ParserT s m {  }, lexme :: forall a. ParserT s m a -\u003e ParserT s m a, symbol :: String -\u003e ParserT s m Number, octal :: ParserT s m Number, hexadecimal :: ParserT s m Number, decimal :: ParserT s m Number, naturalOrFloat :: ParserT s m Number, float :: ParserT s m Number, integer :: ParserT s m Number, natural :: ParserT s m Number, stringLiteral :: ParserT s m String, charLiteral :: ParserT s m String, reservedOp :: String -\u003e ParserT s m String, operator :: ParserT s m String, reserved :: String -\u003e ParserT s m String, identifier :: ParserT s m String }"},{"name":"ParseError","module":"Text.Parsing.Parser","detail":"data ParseError = ParseError { message :: String }"},{"name":"ParseError","module":"Text.Parsing.Parser","detail":"data ParseError = ParseError { message :: String }"},{"name":"errorParseError","module":"Text.Parsing.Parser","detail":"instance errorParseError :: Error ParseError"},{"name":"ParserT","module":"Text.Parsing.Parser","detail":"data ParserT s m a = ParserT (s -\u003e m { consumed :: Boolean, result :: Either ParseError a, input :: s })"},{"name":"ParserT","module":"Text.Parsing.Parser","detail":"data ParserT s m a = ParserT (s -\u003e m { consumed :: Boolean, result :: Either ParseError a, input :: s })"},{"name":"unParserT","module":"Text.Parsing.Parser","detail":"unParserT :: forall m s a. ParserT s m a -\u003e s -\u003e m { consumed :: Boolean, result :: Either ParseError a, input :: s }"},{"name":"runParserT","module":"Text.Parsing.Parser","detail":"runParserT :: forall m s a. (Monad m) =\u003e s -\u003e ParserT s m a -\u003e m (Either ParseError a)"},{"name":"Parser","module":"Text.Parsing.Parser","detail":"type Parser s a = ParserT s Identity a"},{"name":"runParser","module":"Text.Parsing.Parser","detail":"runParser :: forall s a. s -\u003e Parser s a -\u003e Either ParseError a"},{"name":"functorParserT","module":"Text.Parsing.Parser","detail":"instance functorParserT :: (Functor m) =\u003e Functor (ParserT s m)"},{"name":"applyParserT","module":"Text.Parsing.Parser","detail":"instance applyParserT :: (Monad m) =\u003e Apply (ParserT s m)"},{"name":"applicativeParserT","module":"Text.Parsing.Parser","detail":"instance applicativeParserT :: (Monad m) =\u003e Applicative (ParserT s m)"},{"name":"alternativeParserT","module":"Text.Parsing.Parser","detail":"instance alternativeParserT :: (Monad m) =\u003e Alternative (ParserT s m)"},{"name":"bindParserT","module":"Text.Parsing.Parser","detail":"instance bindParserT :: (Monad m) =\u003e Bind (ParserT s m)"},{"name":"monadParserT","module":"Text.Parsing.Parser","detail":"instance monadParserT :: (Monad m) =\u003e Monad (ParserT s m)"},{"name":"monadTransParserT","module":"Text.Parsing.Parser","detail":"instance monadTransParserT :: MonadTrans (ParserT s)"},{"name":"monadStateParserT","module":"Text.Parsing.Parser","detail":"instance monadStateParserT :: (Monad m) =\u003e MonadState s (ParserT s m)"},{"name":"consume","module":"Text.Parsing.Parser","detail":"consume :: forall s m. (Monad m) =\u003e ParserT s m {  }"},{"name":"fail","module":"Text.Parsing.Parser","detail":"fail :: forall m s a. (Monad m) =\u003e String -\u003e ParserT s m a"},{"name":"Expr","module":"Main","detail":"data Expr = Lam String Expr | App Expr Expr | Var String"},{"name":"Lam","module":"Main","detail":"data Expr = Lam String Expr | App Expr Expr | Var String"},{"name":"App","module":"Main","detail":"data Expr = Lam String Expr | App Expr Expr | Var String"},{"name":"Var","module":"Main","detail":"data Expr = Lam String Expr | App Expr Expr | Var String"},{"name":"parenthesize","module":"Main","detail":"parenthesize :: forall u a. Pattern u a String -\u003e Pattern u a String"},{"name":"var","module":"Main","detail":"var :: forall u. Pattern u Expr String"},{"name":"var'","module":"Main","detail":"var' :: Expr -\u003e Maybe String"},{"name":"lam","module":"Main","detail":"lam :: forall u. Pattern u Expr (Tuple String Expr)"},{"name":"lam'","module":"Main","detail":"lam' :: Expr -\u003e Maybe (Tuple String Expr)"},{"name":"app","module":"Main","detail":"app :: forall u. Pattern u Expr (Tuple Expr Expr)"},{"name":"app'","module":"Main","detail":"app' :: Expr -\u003e Maybe (Tuple Expr Expr)"},{"name":"expr","module":"Main","detail":"expr :: forall u. Pattern u Expr String"},{"name":"opTable","module":"Main","detail":"opTable :: forall u. OperatorTable u Expr String"},{"name":"printExpr","module":"Main","detail":"printExpr :: Expr -\u003e String"},{"name":"testExpr","module":"Main","detail":"testExpr :: Expr"},{"name":"Pattern","module":"Text.Pretty.PatternArrows","detail":"data Pattern u a b = Pattern (a -\u003e StateT u Maybe b)"},{"name":"Pattern","module":"Text.Pretty.PatternArrows","detail":"data Pattern u a b = Pattern (a -\u003e StateT u Maybe b)"},{"name":"runPattern","module":"Text.Pretty.PatternArrows","detail":"runPattern :: forall u a b. Pattern u a b -\u003e a -\u003e StateT u Maybe b"},{"name":"functorPattern","module":"Text.Pretty.PatternArrows","detail":"instance functorPattern :: Functor (Pattern u a)"},{"name":"semigroupoidPattern","module":"Text.Pretty.PatternArrows","detail":"instance semigroupoidPattern :: Semigroupoid (Pattern u)"},{"name":"categoryPattern","module":"Text.Pretty.PatternArrows","detail":"instance categoryPattern :: Category (Pattern u)"},{"name":"arrowPattern","module":"Text.Pretty.PatternArrows","detail":"instance arrowPattern :: Arrow (Pattern u)"},{"name":"arrowZeroPattern","module":"Text.Pretty.PatternArrows","detail":"instance arrowZeroPattern :: ArrowZero (Pattern u)"},{"name":"arrowPlusPattern","module":"Text.Pretty.PatternArrows","detail":"instance arrowPlusPattern :: ArrowPlus (Pattern u)"},{"name":"pattern","module":"Text.Pretty.PatternArrows","detail":"pattern :: forall u a b. Pattern u a b -\u003e u -\u003e a -\u003e Maybe b"},{"name":"mkPattern","module":"Text.Pretty.PatternArrows","detail":"mkPattern :: forall u a b. (a -\u003e Maybe b) -\u003e Pattern u a b"},{"name":"mkPattern'","module":"Text.Pretty.PatternArrows","detail":"mkPattern' :: forall u a b. (a -\u003e StateT u Maybe b) -\u003e Pattern u a b"},{"name":"fix","module":"Text.Pretty.PatternArrows","detail":"fix :: forall u a r. (Pattern u a r -\u003e Pattern u a r) -\u003e Pattern u a r"},{"name":"chainl","module":"Text.Pretty.PatternArrows","detail":"chainl :: forall u a r. Pattern u a (Tuple a a) -\u003e (r -\u003e r -\u003e r) -\u003e Pattern u a r -\u003e Pattern u a r"},{"name":"chainr","module":"Text.Pretty.PatternArrows","detail":"chainr :: forall u a r. Pattern u a (Tuple a a) -\u003e (r -\u003e r -\u003e r) -\u003e Pattern u a r -\u003e Pattern u a r"},{"name":"wrap'","module":"Text.Pretty.PatternArrows","detail":"wrap' :: forall u a s r. Pattern u a (Tuple s a) -\u003e (s -\u003e r -\u003e r) -\u003e Pattern u a r -\u003e Pattern u a r"},{"name":"split'","module":"Text.Pretty.PatternArrows","detail":"split' :: forall u a s t r. Pattern u a (Tuple s t) -\u003e (s -\u003e t -\u003e r) -\u003e Pattern u a r"},{"name":"Op","module":"Text.Pretty.PatternArrows","detail":"class Op op where"},{"name":"assocL","module":"Text.Pretty.PatternArrows","detail":"assocL :: forall u a r. Pattern u a (Tuple a a) -\u003e (r -\u003e r -\u003e r) -\u003e op u a r"},{"name":"assocR","module":"Text.Pretty.PatternArrows","detail":"assocR :: forall u a r. Pattern u a (Tuple a a) -\u003e (r -\u003e r -\u003e r) -\u003e op u a r"},{"name":"wrap","module":"Text.Pretty.PatternArrows","detail":"wrap :: forall u a s r. Pattern u a (Tuple s a) -\u003e (s -\u003e r -\u003e r) -\u003e op u a r"},{"name":"split","module":"Text.Pretty.PatternArrows","detail":"split :: forall u a s t r. Pattern u a (Tuple s t) -\u003e (s -\u003e t -\u003e r) -\u003e op u a r"},{"name":"Operator","module":"Text.Pretty.PatternArrows","detail":"data Operator u a r = Operator (forall op. (Op op) =\u003e op u a r)"},{"name":"Operator","module":"Text.Pretty.PatternArrows","detail":"data Operator u a r = Operator (forall op. (Op op) =\u003e op u a r)"},{"name":"OperatorTable","module":"Text.Pretty.PatternArrows","detail":"data OperatorTable u a r = OperatorTable [[Operator u a r]]"},{"name":"OperatorTable","module":"Text.Pretty.PatternArrows","detail":"data OperatorTable u a r = OperatorTable [[Operator u a r]]"},{"name":"runOperatorTable","module":"Text.Pretty.PatternArrows","detail":"runOperatorTable :: forall u a r. OperatorTable u a r -\u003e [[Operator u a r]]"},{"name":"foldl1","module":"Text.Pretty.PatternArrows","detail":"foldl1 :: forall a. (a -\u003e a -\u003e a) -\u003e [a] -\u003e a"},{"name":"PatternEndo","module":"Text.Pretty.PatternArrows","detail":"data PatternEndo u a r = PatternEndo (Pattern u a r -\u003e Pattern u a r)"},{"name":"PatternEndo","module":"Text.Pretty.PatternArrows","detail":"data PatternEndo u a r = PatternEndo (Pattern u a r -\u003e Pattern u a r)"},{"name":"runPatternEndo","module":"Text.Pretty.PatternArrows","detail":"runPatternEndo :: forall u a r. PatternEndo u a r -\u003e Pattern u a r -\u003e Pattern u a r"},{"name":"opPatternEndo","module":"Text.Pretty.PatternArrows","detail":"instance opPatternEndo :: Op PatternEndo"},{"name":"toPatternEndo","module":"Text.Pretty.PatternArrows","detail":"toPatternEndo :: forall u a r. Operator u a r -\u003e Pattern u a r -\u003e Pattern u a r"},{"name":"buildPrettyPrinter","module":"Text.Pretty.PatternArrows","detail":"buildPrettyPrinter :: forall u a r. OperatorTable u a r -\u003e Pattern u a r -\u003e Pattern u a r"},{"name":"testConst","module":"PreludeTests","detail":"testConst :: Number -\u003e Number -\u003e Number -\u003e Boolean"},{"name":"mkMessage","module":"PreludeTests","detail":"mkMessage :: (Number -\u003e Number) -\u003e String"},{"name":"LCG","module":"Test.QuickCheck.LCG","detail":"type LCG  = Number"},{"name":"Gen","module":"Test.QuickCheck.LCG","detail":"data Gen a = Gen (LCG -\u003e { newSeed :: LCG, value :: a })"},{"name":"Gen","module":"Test.QuickCheck.LCG","detail":"data Gen a = Gen (LCG -\u003e { newSeed :: LCG, value :: a })"},{"name":"runGen","module":"Test.QuickCheck.LCG","detail":"runGen :: forall a. Gen a -\u003e LCG -\u003e { newSeed :: LCG, value :: a }"},{"name":"evalGen","module":"Test.QuickCheck.LCG","detail":"evalGen :: forall a. Gen a -\u003e LCG -\u003e a"},{"name":"randomSeed","module":"Test.QuickCheck.LCG","detail":"randomSeed :: forall eff. Eff (random :: Random | eff) Number"},{"name":"lcgM","module":"Test.QuickCheck.LCG","detail":"lcgM :: Number"},{"name":"lcgC","module":"Test.QuickCheck.LCG","detail":"lcgC :: Number"},{"name":"lcgN","module":"Test.QuickCheck.LCG","detail":"lcgN :: Number"},{"name":"lcgNext","module":"Test.QuickCheck.LCG","detail":"lcgNext :: Number -\u003e Number"},{"name":"lcgStep","module":"Test.QuickCheck.LCG","detail":"lcgStep :: Gen Number"},{"name":"uniform","module":"Test.QuickCheck.LCG","detail":"uniform :: Gen Number"},{"name":"float32ToInt32","module":"Test.QuickCheck.LCG","detail":"float32ToInt32 :: Number -\u003e Number"},{"name":"perturbGen","module":"Test.QuickCheck.LCG","detail":"perturbGen :: forall a. Number -\u003e Gen a -\u003e Gen a"},{"name":"functorGen","module":"Test.QuickCheck.LCG","detail":"instance functorGen :: Functor Gen"},{"name":"applyGen","module":"Test.QuickCheck.LCG","detail":"instance applyGen :: Apply Gen"},{"name":"applicativeGen","module":"Test.QuickCheck.LCG","detail":"instance applicativeGen :: Applicative Gen"},{"name":"bindGen","module":"Test.QuickCheck.LCG","detail":"instance bindGen :: Bind Gen"},{"name":"monadGen","module":"Test.QuickCheck.LCG","detail":"instance monadGen :: Monad Gen"},{"name":"Arbitrary","module":"Test.QuickCheck","detail":"class Arbitrary t where"},{"name":"arbitrary","module":"Test.QuickCheck","detail":"arbitrary :: Gen t"},{"name":"CoArbitrary","module":"Test.QuickCheck","detail":"class CoArbitrary t where"},{"name":"coarbitrary","module":"Test.QuickCheck","detail":"coarbitrary :: forall r. t -\u003e Gen r -\u003e Gen r"},{"name":"Result","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"name":"Success","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"name":"Failed","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"name":"showResult","module":"Test.QuickCheck","detail":"instance showResult :: Show Result"},{"name":"(\u003c?\u003e)","module":"Test.QuickCheck","detail":"(\u003c?\u003e) :: Boolean -\u003e String -\u003e Result"},{"name":"arbNumber","module":"Test.QuickCheck","detail":"instance arbNumber :: Arbitrary Number"},{"name":"coarbNumber","module":"Test.QuickCheck","detail":"instance coarbNumber :: CoArbitrary Number"},{"name":"arbBoolean","module":"Test.QuickCheck","detail":"instance arbBoolean :: Arbitrary Boolean"},{"name":"coarbBoolean","module":"Test.QuickCheck","detail":"instance coarbBoolean :: CoArbitrary Boolean"},{"name":"arbFunction","module":"Test.QuickCheck","detail":"instance arbFunction :: (CoArbitrary a, Arbitrary b) =\u003e Arbitrary (a -\u003e b)"},{"name":"repeatable","module":"Test.QuickCheck","detail":"repeatable :: forall a b. (a -\u003e Gen b) -\u003e Gen (a -\u003e b)"},{"name":"coarbFunction","module":"Test.QuickCheck","detail":"instance coarbFunction :: (Arbitrary a, CoArbitrary b) =\u003e CoArbitrary (a -\u003e b)"},{"name":"arbArray","module":"Test.QuickCheck","detail":"instance arbArray :: (Arbitrary a) =\u003e Arbitrary [a]"},{"name":"coarbArray","module":"Test.QuickCheck","detail":"instance coarbArray :: (CoArbitrary a) =\u003e CoArbitrary [a]"},{"name":"Testable","module":"Test.QuickCheck","detail":"class Testable prop where"},{"name":"test","module":"Test.QuickCheck","detail":"test :: prop -\u003e Gen Result"},{"name":"testableResult","module":"Test.QuickCheck","detail":"instance testableResult :: Testable Result"},{"name":"testableBoolean","module":"Test.QuickCheck","detail":"instance testableBoolean :: Testable Boolean"},{"name":"testableFunction","module":"Test.QuickCheck","detail":"instance testableFunction :: (Arbitrary t, Testable prop) =\u003e Testable (t -\u003e prop)"},{"name":"quickCheckPure","module":"Test.QuickCheck","detail":"quickCheckPure :: forall prop. (Testable prop) =\u003e Number -\u003e Number -\u003e prop -\u003e [Result]"},{"name":"QC","module":"Test.QuickCheck","detail":"type QC a = forall eff. Eff (err :: Exception, random :: Random, trace :: Trace | eff) a"},{"name":"quickCheck'","module":"Test.QuickCheck","detail":"quickCheck' :: forall prop. (Testable prop) =\u003e Number -\u003e prop -\u003e QC Unit"},{"name":"quickCheck","module":"Test.QuickCheck","detail":"quickCheck :: forall prop. (Testable prop) =\u003e prop -\u003e QC Unit"},{"name":"Random","module":"Control.Monad.Eff.Random","detail":"data Random :: !"},{"name":"random","module":"Control.Monad.Eff.Random","detail":"random :: forall e. Eff (random :: Random | e) Number"},{"name":"unsafeRunRef","module":"Control.Monad.Eff.Ref.Unsafe","detail":"unsafeRunRef :: forall eff a. Eff (ref :: Ref | eff) a -\u003e Eff eff a"},{"name":"Ref","module":"Control.Monad.Eff.Ref","detail":"data Ref :: !"},{"name":"RefVal","module":"Control.Monad.Eff.Ref","detail":"data RefVal :: * -\u003e *"},{"name":"newRef","module":"Control.Monad.Eff.Ref","detail":"newRef :: forall s r. s -\u003e Eff (ref :: Ref | r) (RefVal s)"},{"name":"readRef","module":"Control.Monad.Eff.Ref","detail":"readRef :: forall s r. RefVal s -\u003e Eff (ref :: Ref | r) s"},{"name":"modifyRef","module":"Control.Monad.Eff.Ref","detail":"modifyRef :: forall s r. RefVal s -\u003e (s -\u003e s) -\u003e Eff (ref :: Ref | r) Unit"},{"name":"writeRef","module":"Control.Monad.Eff.Ref","detail":"writeRef :: forall s r. RefVal s -\u003e s -\u003e Eff (ref :: Ref | r) Unit"},{"name":"makeHtml","module":"Showdown","detail":"makeHtml :: String -\u003e String"},{"name":"converter","module":"Showdown","detail":"converter :: forall r. {  | r } -\u003e String -\u003e String"},{"name":"many","module":"Text.Parsing.StringParser.Combinators","detail":"many :: forall a. Parser a -\u003e Parser [a]"},{"name":"many1","module":"Text.Parsing.StringParser.Combinators","detail":"many1 :: forall a. Parser a -\u003e Parser [a]"},{"name":"(\u003c?\u003e)","module":"Text.Parsing.StringParser.Combinators","detail":"(\u003c?\u003e) :: forall a. Parser a -\u003e String -\u003e Parser a"},{"name":"fix","module":"Text.Parsing.StringParser.Combinators","detail":"fix :: forall a. (Parser a -\u003e Parser a) -\u003e Parser a"},{"name":"between","module":"Text.Parsing.StringParser.Combinators","detail":"between :: forall a open close. Parser open -\u003e Parser close -\u003e Parser a -\u003e Parser a"},{"name":"option","module":"Text.Parsing.StringParser.Combinators","detail":"option :: forall a. a -\u003e Parser a -\u003e Parser a"},{"name":"optional","module":"Text.Parsing.StringParser.Combinators","detail":"optional :: forall a. Parser a -\u003e Parser {  }"},{"name":"optionMaybe","module":"Text.Parsing.StringParser.Combinators","detail":"optionMaybe :: forall a. Parser a -\u003e Parser (Maybe a)"},{"name":"sepBy","module":"Text.Parsing.StringParser.Combinators","detail":"sepBy :: forall a sep. Parser a -\u003e Parser sep -\u003e Parser [a]"},{"name":"sepBy1","module":"Text.Parsing.StringParser.Combinators","detail":"sepBy1 :: forall a sep. Parser a -\u003e Parser sep -\u003e Parser [a]"},{"name":"sepEndBy","module":"Text.Parsing.StringParser.Combinators","detail":"sepEndBy :: forall a sep. Parser a -\u003e Parser sep -\u003e Parser [a]"},{"name":"sepEndBy1","module":"Text.Parsing.StringParser.Combinators","detail":"sepEndBy1 :: forall a sep. Parser a -\u003e Parser sep -\u003e Parser [a]"},{"name":"endBy1","module":"Text.Parsing.StringParser.Combinators","detail":"endBy1 :: forall a sep. Parser a -\u003e Parser sep -\u003e Parser [a]"},{"name":"endBy","module":"Text.Parsing.StringParser.Combinators","detail":"endBy :: forall a sep. Parser a -\u003e Parser sep -\u003e Parser [a]"},{"name":"chainr","module":"Text.Parsing.StringParser.Combinators","detail":"chainr :: forall a. Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e a -\u003e Parser a"},{"name":"chainl","module":"Text.Parsing.StringParser.Combinators","detail":"chainl :: forall a. Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e a -\u003e Parser a"},{"name":"chainl1","module":"Text.Parsing.StringParser.Combinators","detail":"chainl1 :: forall a. Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e Parser a"},{"name":"chainl1'","module":"Text.Parsing.StringParser.Combinators","detail":"chainl1' :: forall a. Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e a -\u003e Parser a"},{"name":"chainr1","module":"Text.Parsing.StringParser.Combinators","detail":"chainr1 :: forall a. Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e Parser a"},{"name":"chainr1'","module":"Text.Parsing.StringParser.Combinators","detail":"chainr1' :: forall a. Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e a -\u003e Parser a"},{"name":"choice","module":"Text.Parsing.StringParser.Combinators","detail":"choice :: forall a. [Parser a] -\u003e Parser a"},{"name":"Assoc","module":"Text.Parsing.StringParser.Expr","detail":"data Assoc = AssocNone | AssocLeft | AssocRight"},{"name":"AssocNone","module":"Text.Parsing.StringParser.Expr","detail":"data Assoc = AssocNone | AssocLeft | AssocRight"},{"name":"AssocLeft","module":"Text.Parsing.StringParser.Expr","detail":"data Assoc = AssocNone | AssocLeft | AssocRight"},{"name":"AssocRight","module":"Text.Parsing.StringParser.Expr","detail":"data Assoc = AssocNone | AssocLeft | AssocRight"},{"name":"Operator","module":"Text.Parsing.StringParser.Expr","detail":"data Operator a = Infix (Parser (a -\u003e a -\u003e a)) Assoc | Prefix (Parser (a -\u003e a)) | Postfix (Parser (a -\u003e a))"},{"name":"Infix","module":"Text.Parsing.StringParser.Expr","detail":"data Operator a = Infix (Parser (a -\u003e a -\u003e a)) Assoc | Prefix (Parser (a -\u003e a)) | Postfix (Parser (a -\u003e a))"},{"name":"Prefix","module":"Text.Parsing.StringParser.Expr","detail":"data Operator a = Infix (Parser (a -\u003e a -\u003e a)) Assoc | Prefix (Parser (a -\u003e a)) | Postfix (Parser (a -\u003e a))"},{"name":"Postfix","module":"Text.Parsing.StringParser.Expr","detail":"data Operator a = Infix (Parser (a -\u003e a -\u003e a)) Assoc | Prefix (Parser (a -\u003e a)) | Postfix (Parser (a -\u003e a))"},{"name":"OperatorTable","module":"Text.Parsing.StringParser.Expr","detail":"type OperatorTable a = [[Operator a]]"},{"name":"SplitAccum","module":"Text.Parsing.StringParser.Expr","detail":"type SplitAccum a = { postfix :: [Parser (a -\u003e a)], prefix :: [Parser (a -\u003e a)], nassoc :: [Parser (a -\u003e a -\u003e a)], lassoc :: [Parser (a -\u003e a -\u003e a)], rassoc :: [Parser (a -\u003e a -\u003e a)] }"},{"name":"buildExprParser","module":"Text.Parsing.StringParser.Expr","detail":"buildExprParser :: forall a. OperatorTable a -\u003e Parser a -\u003e Parser a"},{"name":"eof","module":"Text.Parsing.StringParser.String","detail":"eof :: Parser {  }"},{"name":"anyChar","module":"Text.Parsing.StringParser.String","detail":"anyChar :: Parser String"},{"name":"string","module":"Text.Parsing.StringParser.String","detail":"string :: String -\u003e Parser String"},{"name":"Pos","module":"Text.Parsing.StringParser","detail":"type Pos  = Number"},{"name":"PosString","module":"Text.Parsing.StringParser","detail":"type PosString  = { pos :: Pos, str :: String }"},{"name":"ParseError","module":"Text.Parsing.StringParser","detail":"data ParseError = ParseError String"},{"name":"ParseError","module":"Text.Parsing.StringParser","detail":"data ParseError = ParseError String"},{"name":"showParseError","module":"Text.Parsing.StringParser","detail":"instance showParseError :: Show ParseError"},{"name":"Parser","module":"Text.Parsing.StringParser","detail":"data Parser a = Parser (forall r. PosString -\u003e (Pos -\u003e ParseError -\u003e r) -\u003e (a -\u003e PosString -\u003e r) -\u003e r)"},{"name":"Parser","module":"Text.Parsing.StringParser","detail":"data Parser a = Parser (forall r. PosString -\u003e (Pos -\u003e ParseError -\u003e r) -\u003e (a -\u003e PosString -\u003e r) -\u003e r)"},{"name":"unParser","module":"Text.Parsing.StringParser","detail":"unParser :: forall a r. Parser a -\u003e PosString -\u003e (Pos -\u003e ParseError -\u003e r) -\u003e (a -\u003e PosString -\u003e r) -\u003e r"},{"name":"runParser","module":"Text.Parsing.StringParser","detail":"runParser :: forall a. Parser a -\u003e String -\u003e Either ParseError a"},{"name":"functorParser","module":"Text.Parsing.StringParser","detail":"instance functorParser :: Functor Parser"},{"name":"applyParser","module":"Text.Parsing.StringParser","detail":"instance applyParser :: Apply Parser"},{"name":"applicativeParser","module":"Text.Parsing.StringParser","detail":"instance applicativeParser :: Applicative Parser"},{"name":"bindParser","module":"Text.Parsing.StringParser","detail":"instance bindParser :: Bind Parser"},{"name":"monadParser","module":"Text.Parsing.StringParser","detail":"instance monadParser :: Monad Parser"},{"name":"alternativeParser","module":"Text.Parsing.StringParser","detail":"instance alternativeParser :: Alternative Parser"},{"name":"fail","module":"Text.Parsing.StringParser","detail":"fail :: forall a. String -\u003e Parser a"},{"name":"try","module":"Text.Parsing.StringParser","detail":"try :: forall a. Parser a -\u003e Parser a"},{"name":"Regex","module":"Data.String.Regex","detail":"data Regex :: *"},{"name":"showRegex'","module":"Data.String.Regex","detail":"showRegex' :: Regex -\u003e String"},{"name":"showRegex","module":"Data.String.Regex","detail":"instance showRegex :: Show Regex"},{"name":"RegexFlags","module":"Data.String.Regex","detail":"type RegexFlags  = { unicode :: Boolean, sticky :: Boolean, multiline :: Boolean, ignoreCase :: Boolean, global :: Boolean }"},{"name":"regex'","module":"Data.String.Regex","detail":"regex' :: String -\u003e String -\u003e Regex"},{"name":"regex","module":"Data.String.Regex","detail":"regex :: String -\u003e RegexFlags -\u003e Regex"},{"name":"source","module":"Data.String.Regex","detail":"source :: Regex -\u003e String"},{"name":"flags","module":"Data.String.Regex","detail":"flags :: Regex -\u003e RegexFlags"},{"name":"renderFlags","module":"Data.String.Regex","detail":"renderFlags :: RegexFlags -\u003e String"},{"name":"parseFlags","module":"Data.String.Regex","detail":"parseFlags :: String -\u003e RegexFlags"},{"name":"test","module":"Data.String.Regex","detail":"test :: Regex -\u003e String -\u003e Boolean"},{"name":"match","module":"Data.String.Regex","detail":"match :: Regex -\u003e String -\u003e [String]"},{"name":"replace","module":"Data.String.Regex","detail":"replace :: Regex -\u003e String -\u003e String -\u003e String"},{"name":"replace'","module":"Data.String.Regex","detail":"replace' :: Regex -\u003e (String -\u003e [String] -\u003e String) -\u003e String -\u003e String"},{"name":"search","module":"Data.String.Regex","detail":"search :: Regex -\u003e String -\u003e Number"},{"name":"charAt","module":"Data.String","detail":"charAt :: Number -\u003e String -\u003e String"},{"name":"charCodeAt","module":"Data.String","detail":"charCodeAt :: Number -\u003e String -\u003e Number"},{"name":"fromCharCode","module":"Data.String","detail":"fromCharCode :: Number -\u003e String"},{"name":"indexOf","module":"Data.String","detail":"indexOf :: String -\u003e String -\u003e Number"},{"name":"indexOf'","module":"Data.String","detail":"indexOf' :: String -\u003e Number -\u003e String -\u003e Number"},{"name":"lastIndexOf","module":"Data.String","detail":"lastIndexOf :: String -\u003e String -\u003e Number"},{"name":"lastIndexOf'","module":"Data.String","detail":"lastIndexOf' :: String -\u003e Number -\u003e String -\u003e Number"},{"name":"length","module":"Data.String","detail":"length :: String -\u003e Number"},{"name":"localeCompare","module":"Data.String","detail":"localeCompare :: String -\u003e String -\u003e Number"},{"name":"replace","module":"Data.String","detail":"replace :: String -\u003e String -\u003e String -\u003e String"},{"name":"take","module":"Data.String","detail":"take :: Number -\u003e String -\u003e String"},{"name":"drop","module":"Data.String","detail":"drop :: Number -\u003e String -\u003e String"},{"name":"split","module":"Data.String","detail":"split :: String -\u003e String -\u003e [String]"},{"name":"toLower","module":"Data.String","detail":"toLower :: String -\u003e String"},{"name":"toUpper","module":"Data.String","detail":"toUpper :: String -\u003e String"},{"name":"trim","module":"Data.String","detail":"trim :: String -\u003e String"},{"name":"joinWith","module":"Data.String","detail":"joinWith :: String -\u003e [String] -\u003e String"},{"name":"TeletypeF","module":"Main","detail":"data TeletypeF a = PutStrLn String a | GetLine (String -\u003e a)"},{"name":"PutStrLn","module":"Main","detail":"data TeletypeF a = PutStrLn String a | GetLine (String -\u003e a)"},{"name":"GetLine","module":"Main","detail":"data TeletypeF a = PutStrLn String a | GetLine (String -\u003e a)"},{"name":"teletypeFFunctor","module":"Main","detail":"instance teletypeFFunctor :: Functor TeletypeF"},{"name":"Teletype","module":"Main","detail":"type Teletype  = Free TeletypeF"},{"name":"putStrLn","module":"Main","detail":"putStrLn :: String -\u003e Teletype {  }"},{"name":"getLine","module":"Main","detail":"getLine :: Teletype String"},{"name":"runF","module":"Main","detail":"runF :: forall a. TeletypeF a -\u003e Eff (trace :: Trace) a"},{"name":"run","module":"Main","detail":"run :: forall a. Teletype a -\u003e Eff (trace :: Trace) a"},{"name":"testReader","module":"Main","detail":"testReader :: Reader String String"},{"name":"incState","module":"Main","detail":"incState :: forall eff a. State Number Unit"},{"name":"testState","module":"Main","detail":"testState :: forall eff a. State Number String"},{"name":"testWriter","module":"Main","detail":"testWriter :: Writer String Number"},{"name":"MonadCont","module":"Control.Monad.Cont.Class","detail":"class MonadCont m where"},{"name":"callCC","module":"Control.Monad.Cont.Class","detail":"callCC :: forall a b. ((a -\u003e m b) -\u003e m a) -\u003e m a"},{"name":"monadContContT","module":"Control.Monad.Cont.Class","detail":"instance monadContContT :: (Monad m) =\u003e MonadCont (Cont.ContT r m)"},{"name":"monadContErrorT","module":"Control.Monad.Cont.Class","detail":"instance monadContErrorT :: (Error e, MonadCont m) =\u003e MonadCont (ErrorT e m)"},{"name":"monadContMaybeT","module":"Control.Monad.Cont.Class","detail":"instance monadContMaybeT :: (MonadCont m) =\u003e MonadCont (MaybeT m)"},{"name":"monadContReaderT","module":"Control.Monad.Cont.Class","detail":"instance monadContReaderT :: (MonadCont m) =\u003e MonadCont (ReaderT r m)"},{"name":"monadContStateT","module":"Control.Monad.Cont.Class","detail":"instance monadContStateT :: (MonadCont m) =\u003e MonadCont (StateT s m)"},{"name":"monadWriterT","module":"Control.Monad.Cont.Class","detail":"instance monadWriterT :: (Monoid w, MonadCont m) =\u003e MonadCont (WriterT w m)"},{"name":"ContT","module":"Control.Monad.Cont.Trans","detail":"newtype ContT r m a = ContT ((a -\u003e m r) -\u003e m r)"},{"name":"ContT","module":"Control.Monad.Cont.Trans","detail":"newtype ContT r m a = ContT ((a -\u003e m r) -\u003e m r)"},{"name":"runContT","module":"Control.Monad.Cont.Trans","detail":"runContT :: forall r m a. ContT r m a -\u003e (a -\u003e m r) -\u003e m r"},{"name":"mapContT","module":"Control.Monad.Cont.Trans","detail":"mapContT :: forall r m a. (m r -\u003e m r) -\u003e ContT r m a -\u003e ContT r m a"},{"name":"withContT","module":"Control.Monad.Cont.Trans","detail":"withContT :: forall r m a b. ((b -\u003e m r) -\u003e a -\u003e m r) -\u003e ContT r m a -\u003e ContT r m b"},{"name":"callCC","module":"Control.Monad.Cont.Trans","detail":"callCC :: forall r m a b. ((a -\u003e ContT r m b) -\u003e ContT r m a) -\u003e ContT r m a"},{"name":"functorContT","module":"Control.Monad.Cont.Trans","detail":"instance functorContT :: (Monad m) =\u003e Functor (ContT r m)"},{"name":"appluContT","module":"Control.Monad.Cont.Trans","detail":"instance appluContT :: (Functor m, Monad m) =\u003e Apply (ContT r m)"},{"name":"applicativeContT","module":"Control.Monad.Cont.Trans","detail":"instance applicativeContT :: (Functor m, Monad m) =\u003e Applicative (ContT r m)"},{"name":"bindContT","module":"Control.Monad.Cont.Trans","detail":"instance bindContT :: (Monad m) =\u003e Bind (ContT r m)"},{"name":"monadContT","module":"Control.Monad.Cont.Trans","detail":"instance monadContT :: (Monad m) =\u003e Monad (ContT r m)"},{"name":"monadTransContT","module":"Control.Monad.Cont.Trans","detail":"instance monadTransContT :: MonadTrans (ContT r)"},{"name":"MonadError","module":"Control.Monad.Error.Class","detail":"class MonadError e m where"},{"name":"throwError","module":"Control.Monad.Error.Class","detail":"throwError :: forall a. e -\u003e m a"},{"name":"catchError","module":"Control.Monad.Error.Class","detail":"catchError :: forall a. m a -\u003e (e -\u003e m a) -\u003e m a"},{"name":"monadErrorError","module":"Control.Monad.Error.Class","detail":"instance monadErrorError :: (Error e) =\u003e MonadError e (Either e)"},{"name":"monadErrorErrorT","module":"Control.Monad.Error.Class","detail":"instance monadErrorErrorT :: (Monad m, Error e) =\u003e MonadError e (ErrorT e m)"},{"name":"monadErrorMaybeT","module":"Control.Monad.Error.Class","detail":"instance monadErrorMaybeT :: (Monad m, MonadError e m) =\u003e MonadError e (MaybeT m)"},{"name":"monadErrorReaderT","module":"Control.Monad.Error.Class","detail":"instance monadErrorReaderT :: (Monad m, MonadError e m) =\u003e MonadError e (ReaderT r m)"},{"name":"monadErrorWriterT","module":"Control.Monad.Error.Class","detail":"instance monadErrorWriterT :: (Monad m, Monoid w, MonadError e m) =\u003e MonadError e (WriterT w m)"},{"name":"monadErrorStateT","module":"Control.Monad.Error.Class","detail":"instance monadErrorStateT :: (Monad m, MonadError e m) =\u003e MonadError e (StateT s m)"},{"name":"ErrorT","module":"Control.Monad.Error.Trans","detail":"newtype ErrorT e m a = ErrorT (m (Either e a))"},{"name":"ErrorT","module":"Control.Monad.Error.Trans","detail":"newtype ErrorT e m a = ErrorT (m (Either e a))"},{"name":"runErrorT","module":"Control.Monad.Error.Trans","detail":"runErrorT :: forall e m a. ErrorT e m a -\u003e m (Either e a)"},{"name":"mapErrorT","module":"Control.Monad.Error.Trans","detail":"mapErrorT :: forall e1 e2 m1 m2 a b. (m1 (Either e1 a) -\u003e m2 (Either e2 b)) -\u003e ErrorT e1 m1 a -\u003e ErrorT e2 m2 b"},{"name":"functorErrorT","module":"Control.Monad.Error.Trans","detail":"instance functorErrorT :: (Functor m) =\u003e Functor (ErrorT e m)"},{"name":"applyErrorT","module":"Control.Monad.Error.Trans","detail":"instance applyErrorT :: (Functor m, Monad m) =\u003e Apply (ErrorT e m)"},{"name":"applicativeErrorT","module":"Control.Monad.Error.Trans","detail":"instance applicativeErrorT :: (Functor m, Monad m) =\u003e Applicative (ErrorT e m)"},{"name":"alternativeErrorT","module":"Control.Monad.Error.Trans","detail":"instance alternativeErrorT :: (Monad m, Error e) =\u003e Alternative (ErrorT e m)"},{"name":"bindErrorT","module":"Control.Monad.Error.Trans","detail":"instance bindErrorT :: (Monad m, Error e) =\u003e Bind (ErrorT e m)"},{"name":"monadErrorT","module":"Control.Monad.Error.Trans","detail":"instance monadErrorT :: (Monad m, Error e) =\u003e Monad (ErrorT e m)"},{"name":"monadTransErrorT","module":"Control.Monad.Error.Trans","detail":"instance monadTransErrorT :: (Error e) =\u003e MonadTrans (ErrorT e)"},{"name":"liftListenError","module":"Control.Monad.Error.Trans","detail":"liftListenError :: forall e m a w. (Monad m) =\u003e (m (Either e a) -\u003e m (Tuple (Either e a) w)) -\u003e ErrorT e m a -\u003e ErrorT e m (Tuple a w)"},{"name":"liftPassError","module":"Control.Monad.Error.Trans","detail":"liftPassError :: forall e m a w. (Monad m) =\u003e (m (Tuple (Either e a) (w -\u003e w)) -\u003e m (Either e a)) -\u003e ErrorT e m (Tuple a (w -\u003e w)) -\u003e ErrorT e m a"},{"name":"liftCallCCError","module":"Control.Monad.Error.Trans","detail":"liftCallCCError :: forall e m a b. (((Either e a -\u003e m (Either e b)) -\u003e m (Either e a)) -\u003e m (Either e a)) -\u003e ((a -\u003e ErrorT e m b) -\u003e ErrorT e m a) -\u003e ErrorT e m a"},{"name":"Error","module":"Control.Monad.Error","detail":"class Error a where"},{"name":"noMsg","module":"Control.Monad.Error","detail":"noMsg :: a"},{"name":"strMsg","module":"Control.Monad.Error","detail":"strMsg :: String -\u003e a"},{"name":"errorString","module":"Control.Monad.Error","detail":"instance errorString :: Error String"},{"name":"errorEitherAlternative","module":"Control.Monad.Error","detail":"instance errorEitherAlternative :: (Error e) =\u003e Alternative (Either e)"},{"name":"Free","module":"Control.Monad.Free","detail":"data Free f a = Pure a | Free (f (Free f a)) | Gosub (forall s. (forall r. (Unit -\u003e Free f r) -\u003e (r -\u003e Free f a) -\u003e s) -\u003e s)"},{"name":"Pure","module":"Control.Monad.Free","detail":"data Free f a = Pure a | Free (f (Free f a)) | Gosub (forall s. (forall r. (Unit -\u003e Free f r) -\u003e (r -\u003e Free f a) -\u003e s) -\u003e s)"},{"name":"Free","module":"Control.Monad.Free","detail":"data Free f a = Pure a | Free (f (Free f a)) | Gosub (forall s. (forall r. (Unit -\u003e Free f r) -\u003e (r -\u003e Free f a) -\u003e s) -\u003e s)"},{"name":"Gosub","module":"Control.Monad.Free","detail":"data Free f a = Pure a | Free (f (Free f a)) | Gosub (forall s. (forall r. (Unit -\u003e Free f r) -\u003e (r -\u003e Free f a) -\u003e s) -\u003e s)"},{"name":"MonadFree","module":"Control.Monad.Free","detail":"class MonadFree f m where"},{"name":"wrap","module":"Control.Monad.Free","detail":"wrap :: forall a. f (m a) -\u003e m a"},{"name":"functorFree","module":"Control.Monad.Free","detail":"instance functorFree :: (Functor f) =\u003e Functor (Free f)"},{"name":"applyFree","module":"Control.Monad.Free","detail":"instance applyFree :: (Functor f) =\u003e Apply (Free f)"},{"name":"applicativeFree","module":"Control.Monad.Free","detail":"instance applicativeFree :: (Functor f) =\u003e Applicative (Free f)"},{"name":"bindFree","module":"Control.Monad.Free","detail":"instance bindFree :: (Functor f) =\u003e Bind (Free f)"},{"name":"monadFree","module":"Control.Monad.Free","detail":"instance monadFree :: (Functor f) =\u003e Monad (Free f)"},{"name":"monadTransFree","module":"Control.Monad.Free","detail":"instance monadTransFree :: MonadTrans Free"},{"name":"monadFreeFree","module":"Control.Monad.Free","detail":"instance monadFreeFree :: (Functor f) =\u003e MonadFree f (Free f)"},{"name":"liftF","module":"Control.Monad.Free","detail":"liftF :: forall f m a. (Functor f, Monad m, MonadFree f m) =\u003e f a -\u003e m a"},{"name":"pureF","module":"Control.Monad.Free","detail":"pureF :: forall f a. (Applicative f) =\u003e a -\u003e Free f a"},{"name":"iterM","module":"Control.Monad.Free","detail":"iterM :: forall f m a. (Functor f, Monad m) =\u003e (forall a. f (m a) -\u003e m a) -\u003e Free f a -\u003e m a"},{"name":"goM","module":"Control.Monad.Free","detail":"goM :: forall f m a. (Functor f, Monad m) =\u003e (f (Free f a) -\u003e m (Free f a)) -\u003e Free f a -\u003e m a"},{"name":"resumeGosub","module":"Control.Monad.Free","detail":"resumeGosub :: forall f a. (Functor f) =\u003e Free f a -\u003e Either (f (Free f a)) (Free f a)"},{"name":"isGosub","module":"Control.Monad.Free","detail":"isGosub :: forall f a. Free f a -\u003e Boolean"},{"name":"unsafeFreeToEither","module":"Control.Monad.Free","detail":"unsafeFreeToEither :: forall f a. Free f a -\u003e Either (f (Free f a)) a"},{"name":"unsafeLeft","module":"Control.Monad.Free","detail":"unsafeLeft :: forall a b. Either a b -\u003e a"},{"name":"unsafeRight","module":"Control.Monad.Free","detail":"unsafeRight :: forall a b. Either a b -\u003e b"},{"name":"resumeImpl","module":"Control.Monad.Free","detail":"resumeImpl :: forall f a. Fn6 (Free f a -\u003e Boolean) (Either (f (Free f a)) a -\u003e Boolean) (Free f a -\u003e Either (f (Free f a)) a) (Either (f (Free f a)) a -\u003e a) (Free f a -\u003e Either (f (Free f a)) (Free f a)) (Free f a) (Either (f (Free f a)) a)"},{"name":"resume","module":"Control.Monad.Free","detail":"resume :: forall f a. (Functor f) =\u003e Free f a -\u003e Either (f (Free f a)) a"},{"name":"goImpl","module":"Control.Monad.Free","detail":"goImpl :: forall f a. Fn6 (Free f a -\u003e Either (f (Free f a)) a) (Either (f (Free f a)) a -\u003e Boolean) (Either (f (Free f a)) a -\u003e f (Free f a)) (Either (f (Free f a)) a -\u003e a) (f (Free f a) -\u003e Free f a) (Free f a) a"},{"name":"go","module":"Control.Monad.Free","detail":"go :: forall f a. (Functor f) =\u003e (f (Free f a) -\u003e Free f a) -\u003e Free f a -\u003e a"},{"name":"goEffImpl","module":"Control.Monad.Free","detail":"goEffImpl :: forall e f a. Fn6 (Free f a -\u003e Either (f (Free f a)) a) (Either (f (Free f a)) a -\u003e Boolean) (Either (f (Free f a)) a -\u003e f (Free f a)) (Either (f (Free f a)) a -\u003e a) (f (Free f a) -\u003e Eff e (Free f a)) (Free f a) (Eff e a)"},{"name":"goEff","module":"Control.Monad.Free","detail":"goEff :: forall e f a. (Functor f) =\u003e (f (Free f a) -\u003e Eff e (Free f a)) -\u003e Free f a -\u003e Eff e a"},{"name":"Identity","module":"Control.Monad.Identity","detail":"newtype Identity a = Identity a"},{"name":"Identity","module":"Control.Monad.Identity","detail":"newtype Identity a = Identity a"},{"name":"runIdentity","module":"Control.Monad.Identity","detail":"runIdentity :: forall a. Identity a -\u003e a"},{"name":"functorIdentity","module":"Control.Monad.Identity","detail":"instance functorIdentity :: Functor Identity"},{"name":"applyIdentity","module":"Control.Monad.Identity","detail":"instance applyIdentity :: Apply Identity"},{"name":"applicativeIdentity","module":"Control.Monad.Identity","detail":"instance applicativeIdentity :: Applicative Identity"},{"name":"bindIdentity","module":"Control.Monad.Identity","detail":"instance bindIdentity :: Bind Identity"},{"name":"monadIdentity","module":"Control.Monad.Identity","detail":"instance monadIdentity :: Monad Identity"},{"name":"MaybeT","module":"Control.Monad.Maybe.Trans","detail":"newtype MaybeT m a = MaybeT (m (Maybe a))"},{"name":"MaybeT","module":"Control.Monad.Maybe.Trans","detail":"newtype MaybeT m a = MaybeT (m (Maybe a))"},{"name":"functorMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance functorMaybeT :: (Monad m) =\u003e Functor (MaybeT m)"},{"name":"applyMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance applyMaybeT :: (Monad m) =\u003e Apply (MaybeT m)"},{"name":"applicativeMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance applicativeMaybeT :: (Monad m) =\u003e Applicative (MaybeT m)"},{"name":"bindMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance bindMaybeT :: (Monad m) =\u003e Bind (MaybeT m)"},{"name":"monadMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance monadMaybeT :: (Monad m) =\u003e Monad (MaybeT m)"},{"name":"monadTransMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance monadTransMaybeT :: MonadTrans MaybeT"},{"name":"runMaybeT","module":"Control.Monad.Maybe.Trans","detail":"runMaybeT :: forall m a. MaybeT m a -\u003e m (Maybe a)"},{"name":"mapMaybeT","module":"Control.Monad.Maybe.Trans","detail":"mapMaybeT :: forall m1 m2 a b. (m1 (Maybe a) -\u003e m2 (Maybe b)) -\u003e MaybeT m1 a -\u003e MaybeT m2 b"},{"name":"liftCatchMaybe","module":"Control.Monad.Maybe.Trans","detail":"liftCatchMaybe :: forall m e a. (m (Maybe a) -\u003e (e -\u003e m (Maybe a)) -\u003e m (Maybe a)) -\u003e MaybeT m a -\u003e (e -\u003e MaybeT m a) -\u003e MaybeT m a"},{"name":"liftListenMaybe","module":"Control.Monad.Maybe.Trans","detail":"liftListenMaybe :: forall m a w. (Monad m) =\u003e (m (Maybe a) -\u003e m (Tuple (Maybe a) w)) -\u003e MaybeT m a -\u003e MaybeT m (Tuple a w)"},{"name":"liftPassMaybe","module":"Control.Monad.Maybe.Trans","detail":"liftPassMaybe :: forall m a w. (Monad m) =\u003e (m (Tuple (Maybe a) (w -\u003e w)) -\u003e m (Maybe a)) -\u003e MaybeT m (Tuple a (w -\u003e w)) -\u003e MaybeT m a"},{"name":"liftCallCCMaybe","module":"Control.Monad.Maybe.Trans","detail":"liftCallCCMaybe :: forall m a b. (((Maybe a -\u003e m (Maybe b)) -\u003e m (Maybe a)) -\u003e m (Maybe a)) -\u003e ((a -\u003e MaybeT m b) -\u003e MaybeT m a) -\u003e MaybeT m a"},{"name":"MonadReader","module":"Control.Monad.Reader.Class","detail":"class MonadReader r m where"},{"name":"ask","module":"Control.Monad.Reader.Class","detail":"ask :: m r"},{"name":"local","module":"Control.Monad.Reader.Class","detail":"local :: forall a. (r -\u003e r) -\u003e m a -\u003e m a"},{"name":"reader","module":"Control.Monad.Reader.Class","detail":"reader :: forall r m a. (Monad m, MonadReader r m) =\u003e (r -\u003e a) -\u003e m a"},{"name":"monadReaderFun","module":"Control.Monad.Reader.Class","detail":"instance monadReaderFun :: MonadReader r (Prim.Function r)"},{"name":"monadReaderReaderT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderReaderT :: (Monad m) =\u003e MonadReader r (ReaderT r m)"},{"name":"monadReaderErrorT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderErrorT :: (Monad m, Error e, MonadReader r m) =\u003e MonadReader r (ErrorT e m)"},{"name":"monadReaderMaybeT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderMaybeT :: (Monad m, MonadReader r m) =\u003e MonadReader r (MaybeT m)"},{"name":"monadReaderWriterT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderWriterT :: (Monad m, Monoid w, MonadReader r m) =\u003e MonadReader r (WriterT w m)"},{"name":"monadReaderStateT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderStateT :: (Monad m, MonadReader r m) =\u003e MonadReader r (StateT s m)"},{"name":"monadReaderRWST","module":"Control.Monad.Reader.Class","detail":"instance monadReaderRWST :: (Monad m, Monoid w) =\u003e MonadReader r (RWST r w s m)"},{"name":"ReaderT","module":"Control.Monad.Reader.Trans","detail":"newtype ReaderT r m a = ReaderT (r -\u003e m a)"},{"name":"ReaderT","module":"Control.Monad.Reader.Trans","detail":"newtype ReaderT r m a = ReaderT (r -\u003e m a)"},{"name":"runReaderT","module":"Control.Monad.Reader.Trans","detail":"runReaderT :: forall r m a. ReaderT r m a -\u003e r -\u003e m a"},{"name":"withReaderT","module":"Control.Monad.Reader.Trans","detail":"withReaderT :: forall r1 r2 m a b. (r2 -\u003e r1) -\u003e ReaderT r1 m a -\u003e ReaderT r2 m a"},{"name":"mapReaderT","module":"Control.Monad.Reader.Trans","detail":"mapReaderT :: forall r m1 m2 a b. (m1 a -\u003e m2 b) -\u003e ReaderT r m1 a -\u003e ReaderT r m2 b"},{"name":"liftReaderT","module":"Control.Monad.Reader.Trans","detail":"liftReaderT :: forall r m a. m a -\u003e ReaderT r m a"},{"name":"functorReaderT","module":"Control.Monad.Reader.Trans","detail":"instance functorReaderT :: (Functor m) =\u003e Functor (ReaderT r m)"},{"name":"applyReaderT","module":"Control.Monad.Reader.Trans","detail":"instance applyReaderT :: (Applicative m) =\u003e Apply (ReaderT r m)"},{"name":"applicativeReaderT","module":"Control.Monad.Reader.Trans","detail":"instance applicativeReaderT :: (Applicative m) =\u003e Applicative (ReaderT r m)"},{"name":"alternativeReaderT","module":"Control.Monad.Reader.Trans","detail":"instance alternativeReaderT :: (Alternative m) =\u003e Alternative (ReaderT r m)"},{"name":"bindReaderT","module":"Control.Monad.Reader.Trans","detail":"instance bindReaderT :: (Monad m) =\u003e Bind (ReaderT r m)"},{"name":"monadReaderT","module":"Control.Monad.Reader.Trans","detail":"instance monadReaderT :: (Monad m) =\u003e Monad (ReaderT r m)"},{"name":"monadTransReaderT","module":"Control.Monad.Reader.Trans","detail":"instance monadTransReaderT :: MonadTrans (ReaderT r)"},{"name":"liftCatchReader","module":"Control.Monad.Reader.Trans","detail":"liftCatchReader :: forall r m e a. (m a -\u003e (e -\u003e m a) -\u003e m a) -\u003e ReaderT r m a -\u003e (e -\u003e ReaderT r m a) -\u003e ReaderT r m a"},{"name":"liftCallCCReader","module":"Control.Monad.Reader.Trans","detail":"liftCallCCReader :: forall r m a b. (((a -\u003e m b) -\u003e m a) -\u003e m a) -\u003e ((a -\u003e ReaderT r m b) -\u003e ReaderT r m a) -\u003e ReaderT r m a"},{"name":"Reader","module":"Control.Monad.Reader","detail":"type Reader r = ReaderT r Identity"},{"name":"runReader","module":"Control.Monad.Reader","detail":"runReader :: forall r a. Reader r a -\u003e r -\u003e a"},{"name":"withReader","module":"Control.Monad.Reader","detail":"withReader :: forall r1 r2 a b. (r2 -\u003e r1) -\u003e Reader r1 a -\u003e Reader r2 a"},{"name":"mapReader","module":"Control.Monad.Reader","detail":"mapReader :: forall r a b. (a -\u003e b) -\u003e Reader r a -\u003e Reader r b"},{"name":"MonadRWS","module":"Control.Monad.RWS.Class","detail":"class (Monad m, Monoid w, MonadReader r m, MonadWriter w m, MonadState s m) \u003c= MonadRWS r w s m where"},{"name":"monadRWSRWST","module":"Control.Monad.RWS.Class","detail":"instance monadRWSRWST :: (Monad m, Monoid w) =\u003e MonadRWS r w s (RWST r w s m)"},{"name":"monadRWSErrorT","module":"Control.Monad.RWS.Class","detail":"instance monadRWSErrorT :: (Monad m, Monoid w, MonadRWS r w s m, MonadReader r m, MonadWriter w m, MonadState s m, Error e) =\u003e MonadRWS r w s (ErrorT e m)"},{"name":"monadRWSMaybeT","module":"Control.Monad.RWS.Class","detail":"instance monadRWSMaybeT :: (Monad m, Monoid w, MonadRWS r w s m, MonadReader r m, MonadWriter w m, MonadState s m) =\u003e MonadRWS r w s (MaybeT m)"},{"name":"See","module":"Control.Monad.RWS.Trans","detail":"type See s a w = { log :: w, result :: a, state :: s }"},{"name":"mkSee","module":"Control.Monad.RWS.Trans","detail":"mkSee :: forall s a w. (Monoid w) =\u003e s -\u003e a -\u003e w -\u003e See s a w"},{"name":"RWST","module":"Control.Monad.RWS.Trans","detail":"newtype RWST r w s m a = RWST (r -\u003e s -\u003e m (See s a w))"},{"name":"RWST","module":"Control.Monad.RWS.Trans","detail":"newtype RWST r w s m a = RWST (r -\u003e s -\u003e m (See s a w))"},{"name":"runRWST","module":"Control.Monad.RWS.Trans","detail":"runRWST :: forall r w s m a. RWST r w s m a -\u003e r -\u003e s -\u003e m (See s a w)"},{"name":"evalRWST","module":"Control.Monad.RWS.Trans","detail":"evalRWST :: forall r w s m a. (Monad m) =\u003e RWST r w s m a -\u003e r -\u003e s -\u003e m (Tuple a w)"},{"name":"execRWST","module":"Control.Monad.RWS.Trans","detail":"execRWST :: forall r w s m a. (Monad m) =\u003e RWST r w s m a -\u003e r -\u003e s -\u003e m (Tuple s w)"},{"name":"mapRWST","module":"Control.Monad.RWS.Trans","detail":"mapRWST :: forall r w1 w2 s m1 m2 a1 a2. (m1 (See s a1 w1) -\u003e m2 (See s a2 w2)) -\u003e RWST r w1 s m1 a1 -\u003e RWST r w2 s m2 a2"},{"name":"withRWST","module":"Control.Monad.RWS.Trans","detail":"withRWST :: forall r1 r2 w s m a. (r2 -\u003e s -\u003e Tuple r1 s) -\u003e RWST r1 w s m a -\u003e RWST r2 w s m a"},{"name":"functorRWST","module":"Control.Monad.RWS.Trans","detail":"instance functorRWST :: (Functor m) =\u003e Functor (RWST r w s m)"},{"name":"applyRWST","module":"Control.Monad.RWS.Trans","detail":"instance applyRWST :: (Apply m, Semigroup w) =\u003e Apply (RWST r w s m)"},{"name":"bindRWST","module":"Control.Monad.RWS.Trans","detail":"instance bindRWST :: (Bind m, Semigroup w) =\u003e Bind (RWST r w s m)"},{"name":"applicativeRWST","module":"Control.Monad.RWS.Trans","detail":"instance applicativeRWST :: (Applicative m, Monoid w) =\u003e Applicative (RWST r w s m)"},{"name":"monadRWST","module":"Control.Monad.RWS.Trans","detail":"instance monadRWST :: (Monad m, Monoid w) =\u003e Monad (RWST r w s m)"},{"name":"monadTransRWST","module":"Control.Monad.RWS.Trans","detail":"instance monadTransRWST :: (Monoid w) =\u003e MonadTrans (RWST r w s)"},{"name":"RWS","module":"Control.Monad.RWS","detail":"type RWS r w s = RWST r w s Identity"},{"name":"rws","module":"Control.Monad.RWS","detail":"rws :: forall r w s a. (r -\u003e s -\u003e See s a w) -\u003e RWS r w s a"},{"name":"runRWS","module":"Control.Monad.RWS","detail":"runRWS :: forall r w s a. RWS r w s a -\u003e r -\u003e s -\u003e See s a w"},{"name":"evalRWS","module":"Control.Monad.RWS","detail":"evalRWS :: forall r w s a. RWS r w s a -\u003e r -\u003e s -\u003e Tuple a w"},{"name":"execRWS","module":"Control.Monad.RWS","detail":"execRWS :: forall r w s a. RWS r w s a -\u003e r -\u003e s -\u003e Tuple s w"},{"name":"mapRWS","module":"Control.Monad.RWS","detail":"mapRWS :: forall r w1 w2 s a1 a2. (See s a1 w1 -\u003e See s a2 w2) -\u003e RWS r w1 s a1 -\u003e RWS r w2 s a2"},{"name":"withRWS","module":"Control.Monad.RWS","detail":"withRWS :: forall r1 r2 w s a. (r2 -\u003e s -\u003e Tuple r1 s) -\u003e RWS r1 w s a -\u003e RWS r2 w s a"},{"name":"ask","module":"Control.Monad.RWS","detail":"ask :: forall r w s m. (Applicative m, Monoid w) =\u003e RWST r w s m r"},{"name":"local","module":"Control.Monad.RWS","detail":"local :: forall r w s m a. (r -\u003e r) -\u003e RWST r w s m a -\u003e RWST r w s m a"},{"name":"reader","module":"Control.Monad.RWS","detail":"reader :: forall r w s m a. (Applicative m, Monoid w) =\u003e (r -\u003e a) -\u003e RWST r w s m a"},{"name":"writer","module":"Control.Monad.RWS","detail":"writer :: forall r w s m a. (Applicative m) =\u003e Tuple a w -\u003e RWST r w s m a"},{"name":"listen","module":"Control.Monad.RWS","detail":"listen :: forall r w s m a. (Monad m) =\u003e RWST r w s m a -\u003e RWST r w s m (Tuple a w)"},{"name":"pass","module":"Control.Monad.RWS","detail":"pass :: forall r w s m a. (Monad m) =\u003e RWST r w s m (Tuple a (w -\u003e w)) -\u003e RWST r w s m a"},{"name":"tell","module":"Control.Monad.RWS","detail":"tell :: forall r w s m. (Applicative m) =\u003e w -\u003e RWST r w s m Unit"},{"name":"listens","module":"Control.Monad.RWS","detail":"listens :: forall r w s m a b. (Monad m) =\u003e (w -\u003e b) -\u003e RWST r w s m a -\u003e RWST r w s m (Tuple a b)"},{"name":"censor","module":"Control.Monad.RWS","detail":"censor :: forall r w s m a. (Monad m) =\u003e (w -\u003e w) -\u003e RWST r w s m a -\u003e RWST r w s m a"},{"name":"state","module":"Control.Monad.RWS","detail":"state :: forall r w s m a. (Applicative m, Monoid w) =\u003e (s -\u003e Tuple a s) -\u003e RWST r w s m a"},{"name":"get","module":"Control.Monad.RWS","detail":"get :: forall r w s m. (Applicative m, Monoid w) =\u003e RWST r w s m s"},{"name":"gets","module":"Control.Monad.RWS","detail":"gets :: forall r w s m a. (Applicative m, Monoid w) =\u003e (s -\u003e a) -\u003e RWST r w s m a"},{"name":"put","module":"Control.Monad.RWS","detail":"put :: forall r w s m. (Applicative m, Monoid w) =\u003e s -\u003e RWST r w s m Unit"},{"name":"modify","module":"Control.Monad.RWS","detail":"modify :: forall r w s m. (Applicative m, Monoid w) =\u003e (s -\u003e s) -\u003e RWST r w s m Unit"},{"name":"MonadState","module":"Control.Monad.State.Class","detail":"class MonadState s m where"},{"name":"state","module":"Control.Monad.State.Class","detail":"state :: forall a. (s -\u003e Tuple a s) -\u003e m a"},{"name":"get","module":"Control.Monad.State.Class","detail":"get :: forall m s. (Monad m, MonadState s m) =\u003e m s"},{"name":"gets","module":"Control.Monad.State.Class","detail":"gets :: forall s m a. (Monad m, MonadState s m) =\u003e (s -\u003e a) -\u003e m a"},{"name":"put","module":"Control.Monad.State.Class","detail":"put :: forall m s. (Monad m, MonadState s m) =\u003e s -\u003e m Unit"},{"name":"modify","module":"Control.Monad.State.Class","detail":"modify :: forall s m. (Monad m, MonadState s m) =\u003e (s -\u003e s) -\u003e m Unit"},{"name":"monadStateStateT","module":"Control.Monad.State.Class","detail":"instance monadStateStateT :: (Monad m) =\u003e MonadState s (StateT s m)"},{"name":"monadStateStateT1","module":"Control.Monad.State.Class","detail":"instance monadStateStateT1 :: (Monad m, MonadState s m) =\u003e MonadState s (StateT s1 m)"},{"name":"monadStateErrorT","module":"Control.Monad.State.Class","detail":"instance monadStateErrorT :: (Monad m, Error e, MonadState s m) =\u003e MonadState s (ErrorT e m)"},{"name":"monadStateMaybeT","module":"Control.Monad.State.Class","detail":"instance monadStateMaybeT :: (Monad m, MonadState s m) =\u003e MonadState s (MaybeT m)"},{"name":"monadStateReaderT","module":"Control.Monad.State.Class","detail":"instance monadStateReaderT :: (Monad m, MonadState s m) =\u003e MonadState s (ReaderT r m)"},{"name":"monadStateWriterT","module":"Control.Monad.State.Class","detail":"instance monadStateWriterT :: (Monad m, Monoid w, MonadState s m) =\u003e MonadState s (WriterT w m)"},{"name":"monadStateRWST","module":"Control.Monad.State.Class","detail":"instance monadStateRWST :: (Monad m, Monoid w) =\u003e MonadState s (RWST r w s m)"},{"name":"StateT","module":"Control.Monad.State.Trans","detail":"newtype StateT s m a = StateT (s -\u003e m (Tuple a s))"},{"name":"StateT","module":"Control.Monad.State.Trans","detail":"newtype StateT s m a = StateT (s -\u003e m (Tuple a s))"},{"name":"runStateT","module":"Control.Monad.State.Trans","detail":"runStateT :: forall s m a. StateT s m a -\u003e s -\u003e m (Tuple a s)"},{"name":"evalStateT","module":"Control.Monad.State.Trans","detail":"evalStateT :: forall s m a. (Monad m) =\u003e StateT s m a -\u003e s -\u003e m a"},{"name":"execStateT","module":"Control.Monad.State.Trans","detail":"execStateT :: forall s m a. (Monad m) =\u003e StateT s m a -\u003e s -\u003e m s"},{"name":"mapStateT","module":"Control.Monad.State.Trans","detail":"mapStateT :: forall s m1 m2 a b. (m1 (Tuple a s) -\u003e m2 (Tuple b s)) -\u003e StateT s m1 a -\u003e StateT s m2 b"},{"name":"withStateT","module":"Control.Monad.State.Trans","detail":"withStateT :: forall s m a. (s -\u003e s) -\u003e StateT s m a -\u003e StateT s m a"},{"name":"functorStateT","module":"Control.Monad.State.Trans","detail":"instance functorStateT :: (Monad m) =\u003e Functor (StateT s m)"},{"name":"applyStateT","module":"Control.Monad.State.Trans","detail":"instance applyStateT :: (Monad m) =\u003e Apply (StateT s m)"},{"name":"applicativeStateT","module":"Control.Monad.State.Trans","detail":"instance applicativeStateT :: (Monad m) =\u003e Applicative (StateT s m)"},{"name":"alternativeStateT","module":"Control.Monad.State.Trans","detail":"instance alternativeStateT :: (Alternative m) =\u003e Alternative (StateT s m)"},{"name":"bindStateT","module":"Control.Monad.State.Trans","detail":"instance bindStateT :: (Monad m) =\u003e Bind (StateT s m)"},{"name":"monadStateT","module":"Control.Monad.State.Trans","detail":"instance monadStateT :: (Monad m) =\u003e Monad (StateT s m)"},{"name":"monadTransStateT","module":"Control.Monad.State.Trans","detail":"instance monadTransStateT :: MonadTrans (StateT s)"},{"name":"liftCatchState","module":"Control.Monad.State.Trans","detail":"liftCatchState :: forall s m e a. (m (Tuple a s) -\u003e (e -\u003e m (Tuple a s)) -\u003e m (Tuple a s)) -\u003e StateT s m a -\u003e (e -\u003e StateT s m a) -\u003e StateT s m a"},{"name":"liftListenState","module":"Control.Monad.State.Trans","detail":"liftListenState :: forall s m a w. (Monad m) =\u003e (m (Tuple a s) -\u003e m (Tuple (Tuple a s) w)) -\u003e StateT s m a -\u003e StateT s m (Tuple a w)"},{"name":"liftPassState","module":"Control.Monad.State.Trans","detail":"liftPassState :: forall s m a b w. (Monad m) =\u003e (m (Tuple (Tuple a s) b) -\u003e m (Tuple a s)) -\u003e StateT s m (Tuple a b) -\u003e StateT s m a"},{"name":"liftCallCCState","module":"Control.Monad.State.Trans","detail":"liftCallCCState :: forall s m a b. (((Tuple a s -\u003e m (Tuple b s)) -\u003e m (Tuple a s)) -\u003e m (Tuple a s)) -\u003e ((a -\u003e StateT s m b) -\u003e StateT s m a) -\u003e StateT s m a"},{"name":"liftCallCCState'","module":"Control.Monad.State.Trans","detail":"liftCallCCState' :: forall s m a b. (((Tuple a s -\u003e m (Tuple b s)) -\u003e m (Tuple a s)) -\u003e m (Tuple a s)) -\u003e ((a -\u003e StateT s m b) -\u003e StateT s m a) -\u003e StateT s m a"},{"name":"State","module":"Control.Monad.State","detail":"type State s = StateT s Identity"},{"name":"runState","module":"Control.Monad.State","detail":"runState :: forall s a. State s a -\u003e s -\u003e Tuple a s"},{"name":"evalState","module":"Control.Monad.State","detail":"evalState :: forall s a. State s a -\u003e s -\u003e a"},{"name":"execState","module":"Control.Monad.State","detail":"execState :: forall s a. State s a -\u003e s -\u003e s"},{"name":"mapState","module":"Control.Monad.State","detail":"mapState :: forall s a b. (Tuple a s -\u003e Tuple b s) -\u003e State s a -\u003e State s b"},{"name":"withState","module":"Control.Monad.State","detail":"withState :: forall s a. (s -\u003e s) -\u003e State s a -\u003e State s a"},{"name":"Delay","module":"Control.Monad.Trampoline","detail":"newtype Delay a = Delay (Unit -\u003e a)"},{"name":"Delay","module":"Control.Monad.Trampoline","detail":"newtype Delay a = Delay (Unit -\u003e a)"},{"name":"delayFunctor","module":"Control.Monad.Trampoline","detail":"instance delayFunctor :: Functor Delay"},{"name":"delayApply","module":"Control.Monad.Trampoline","detail":"instance delayApply :: Apply Delay"},{"name":"delayApplicative","module":"Control.Monad.Trampoline","detail":"instance delayApplicative :: Applicative Delay"},{"name":"Trampoline","module":"Control.Monad.Trampoline","detail":"type Trampoline a = Free Delay a"},{"name":"done","module":"Control.Monad.Trampoline","detail":"done :: forall a. a -\u003e Trampoline a"},{"name":"suspend","module":"Control.Monad.Trampoline","detail":"suspend :: forall a. Trampoline a -\u003e Trampoline a"},{"name":"delay","module":"Control.Monad.Trampoline","detail":"delay :: forall a. (Unit -\u003e a) -\u003e Trampoline a"},{"name":"runTrampoline","module":"Control.Monad.Trampoline","detail":"runTrampoline :: forall a. Trampoline a -\u003e a"},{"name":"MonadTrans","module":"Control.Monad.Trans","detail":"class MonadTrans t where"},{"name":"lift","module":"Control.Monad.Trans","detail":"lift :: forall m a. (Monad m) =\u003e m a -\u003e t m a"},{"name":"MonadWriter","module":"Control.Monad.Writer.Class","detail":"class MonadWriter w m where"},{"name":"writer","module":"Control.Monad.Writer.Class","detail":"writer :: forall a. Tuple a w -\u003e m a"},{"name":"listen","module":"Control.Monad.Writer.Class","detail":"listen :: forall a. m a -\u003e m (Tuple a w)"},{"name":"pass","module":"Control.Monad.Writer.Class","detail":"pass :: forall a. m (Tuple a (w -\u003e w)) -\u003e m a"},{"name":"tell","module":"Control.Monad.Writer.Class","detail":"tell :: forall w m a. (Monoid w, Monad m, MonadWriter w m) =\u003e w -\u003e m Unit"},{"name":"listens","module":"Control.Monad.Writer.Class","detail":"listens :: forall w m a b. (Monoid w, Monad m, MonadWriter w m) =\u003e (w -\u003e b) -\u003e m a -\u003e m (Tuple a b)"},{"name":"censor","module":"Control.Monad.Writer.Class","detail":"censor :: forall w m a. (Monoid w, Monad m, MonadWriter w m) =\u003e (w -\u003e w) -\u003e m a -\u003e m a"},{"name":"monadWriterWriterT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterWriterT :: (Monoid w, Monad m) =\u003e MonadWriter w (WriterT w m)"},{"name":"monadWriterErrorT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterErrorT :: (Monad m, Error e, MonadWriter w m) =\u003e MonadWriter w (ErrorT e m)"},{"name":"monadWriterMaybeT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterMaybeT :: (Monad m, MonadWriter w m) =\u003e MonadWriter w (MaybeT m)"},{"name":"monadWriterStateT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterStateT :: (Monad m, MonadWriter w m) =\u003e MonadWriter w (StateT s m)"},{"name":"monadWriterReaderT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterReaderT :: (Monad m, MonadWriter w m) =\u003e MonadWriter w (ReaderT r m)"},{"name":"monadWriterRWST","module":"Control.Monad.Writer.Class","detail":"instance monadWriterRWST :: (Monad m, Monoid w) =\u003e MonadWriter w (RWST r w s m)"},{"name":"WriterT","module":"Control.Monad.Writer.Trans","detail":"newtype WriterT w m a = WriterT (m (Tuple a w))"},{"name":"WriterT","module":"Control.Monad.Writer.Trans","detail":"newtype WriterT w m a = WriterT (m (Tuple a w))"},{"name":"runWriterT","module":"Control.Monad.Writer.Trans","detail":"runWriterT :: forall w m a. WriterT w m a -\u003e m (Tuple a w)"},{"name":"mapWriterT","module":"Control.Monad.Writer.Trans","detail":"mapWriterT :: forall w1 w2 m1 m2 a b. (m1 (Tuple a w1) -\u003e m2 (Tuple b w2)) -\u003e WriterT w1 m1 a -\u003e WriterT w2 m2 b"},{"name":"functorWriterT","module":"Control.Monad.Writer.Trans","detail":"instance functorWriterT :: (Functor m) =\u003e Functor (WriterT w m)"},{"name":"applyWriterT","module":"Control.Monad.Writer.Trans","detail":"instance applyWriterT :: (Monoid w, Functor m, Applicative m) =\u003e Apply (WriterT w m)"},{"name":"applicativeWriterT","module":"Control.Monad.Writer.Trans","detail":"instance applicativeWriterT :: (Monoid w, Functor m, Applicative m) =\u003e Applicative (WriterT w m)"},{"name":"alternativeWriterT","module":"Control.Monad.Writer.Trans","detail":"instance alternativeWriterT :: (Monoid w, Alternative m) =\u003e Alternative (WriterT w m)"},{"name":"bindWriterT","module":"Control.Monad.Writer.Trans","detail":"instance bindWriterT :: (Monoid w, Monad m) =\u003e Bind (WriterT w m)"},{"name":"monadWriterT","module":"Control.Monad.Writer.Trans","detail":"instance monadWriterT :: (Monoid w, Monad m) =\u003e Monad (WriterT w m)"},{"name":"monadTransWriterT","module":"Control.Monad.Writer.Trans","detail":"instance monadTransWriterT :: (Monoid w) =\u003e MonadTrans (WriterT w)"},{"name":"liftCatchWriter","module":"Control.Monad.Writer.Trans","detail":"liftCatchWriter :: forall w m e a. (m (Tuple a w) -\u003e (e -\u003e m (Tuple a w)) -\u003e m (Tuple a w)) -\u003e WriterT w m a -\u003e (e -\u003e WriterT w m a) -\u003e WriterT w m a"},{"name":"liftCallCCWriter","module":"Control.Monad.Writer.Trans","detail":"liftCallCCWriter :: forall w m a b. (Monoid w) =\u003e (((Tuple a w -\u003e m (Tuple b w)) -\u003e m (Tuple a w)) -\u003e m (Tuple a w)) -\u003e ((a -\u003e WriterT w m b) -\u003e WriterT w m a) -\u003e WriterT w m a"},{"name":"Writer","module":"Control.Monad.Writer","detail":"type Writer w = WriterT w Identity"},{"name":"runWriter","module":"Control.Monad.Writer","detail":"runWriter :: forall w a. Writer w a -\u003e Tuple a w"},{"name":"execWriter","module":"Control.Monad.Writer","detail":"execWriter :: forall w a. Writer w a -\u003e w"},{"name":"mapWriter","module":"Control.Monad.Writer","detail":"mapWriter :: forall w1 w2 a b. (Tuple a w1 -\u003e Tuple b w2) -\u003e Writer w1 a -\u003e Writer w2 b"},{"name":"Tuple","module":"Data.Tuple","detail":"data Tuple a b = Tuple a b"},{"name":"Tuple","module":"Data.Tuple","detail":"data Tuple a b = Tuple a b"},{"name":"showTuple","module":"Data.Tuple","detail":"instance showTuple :: (Show a, Show b) =\u003e Show (Tuple a b)"},{"name":"eqTuple","module":"Data.Tuple","detail":"instance eqTuple :: (Eq a, Eq b) =\u003e Eq (Tuple a b)"},{"name":"ordTuple","module":"Data.Tuple","detail":"instance ordTuple :: (Ord a, Ord b) =\u003e Ord (Tuple a b)"},{"name":"functorTuple","module":"Data.Tuple","detail":"instance functorTuple :: Functor (Tuple a)"},{"name":"applyTuple","module":"Data.Tuple","detail":"instance applyTuple :: (Semigroup a) =\u003e Apply (Tuple a)"},{"name":"applicativeTuple","module":"Data.Tuple","detail":"instance applicativeTuple :: (Monoid a) =\u003e Applicative (Tuple a)"},{"name":"bindTuple","module":"Data.Tuple","detail":"instance bindTuple :: (Semigroup a) =\u003e Bind (Tuple a)"},{"name":"monadTuple","module":"Data.Tuple","detail":"instance monadTuple :: (Monoid a) =\u003e Monad (Tuple a)"},{"name":"fst","module":"Data.Tuple","detail":"fst :: forall a b. Tuple a b -\u003e a"},{"name":"snd","module":"Data.Tuple","detail":"snd :: forall a b. Tuple a b -\u003e b"},{"name":"curry","module":"Data.Tuple","detail":"curry :: forall a b c. (Tuple a b -\u003e c) -\u003e a -\u003e b -\u003e c"},{"name":"uncurry","module":"Data.Tuple","detail":"uncurry :: forall a b c. (a -\u003e b -\u003e c) -\u003e Tuple a b -\u003e c"},{"name":"zip","module":"Data.Tuple","detail":"zip :: forall a b. [a] -\u003e [b] -\u003e [Tuple a b]"},{"name":"unzip","module":"Data.Tuple","detail":"unzip :: forall a b. [Tuple a b] -\u003e Tuple [a] [b]"},{"name":"swap","module":"Data.Tuple","detail":"swap :: forall a b. Tuple a b -\u003e Tuple b a"},{"name":"V","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"name":"Invalid","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"name":"Valid","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"name":"invalid","module":"Data.Validation","detail":"invalid :: forall err result. err -\u003e V err result"},{"name":"runV","module":"Data.Validation","detail":"runV :: forall err result r. (err -\u003e r) -\u003e (result -\u003e r) -\u003e V err result -\u003e r"},{"name":"isValid","module":"Data.Validation","detail":"isValid :: forall err result r. V err result -\u003e Boolean"},{"name":"showV","module":"Data.Validation","detail":"instance showV :: (Show err, Show result) =\u003e Show (V err result)"},{"name":"functorV","module":"Data.Validation","detail":"instance functorV :: Functor (V err)"},{"name":"applyV","module":"Data.Validation","detail":"instance applyV :: (Semigroup err) =\u003e Apply (V err)"},{"name":"applicativeV","module":"Data.Validation","detail":"instance applicativeV :: (Semigroup err) =\u003e Applicative (V err)"},{"name":"Storage","module":"Browser.WebStorage","detail":"class Storage s where"},{"name":"clear","module":"Browser.WebStorage","detail":"clear :: s -\u003e s"},{"name":"getItem","module":"Browser.WebStorage","detail":"getItem :: forall v. s -\u003e String -\u003e Maybe v"},{"name":"key","module":"Browser.WebStorage","detail":"key :: s -\u003e Number -\u003e Maybe String"},{"name":"length","module":"Browser.WebStorage","detail":"length :: s -\u003e Number"},{"name":"removeItem","module":"Browser.WebStorage","detail":"removeItem :: s -\u003e String -\u003e s"},{"name":"setItem","module":"Browser.WebStorage","detail":"setItem :: forall v. s -\u003e String -\u003e v -\u003e s"},{"name":"storageLocalStorage","module":"Browser.WebStorage","detail":"instance storageLocalStorage :: Storage LocalStorage"},{"name":"storageSessionStorage","module":"Browser.WebStorage","detail":"instance storageSessionStorage :: Storage SessionStorage"},{"name":"LocalStorage","module":"Browser.WebStorage","detail":"data LocalStorage :: *"},{"name":"SessionStorage","module":"Browser.WebStorage","detail":"data SessionStorage :: *"},{"name":"localStorage","module":"Browser.WebStorage","detail":"localStorage :: LocalStorage"},{"name":"sessionStorage","module":"Browser.WebStorage","detail":"sessionStorage :: SessionStorage"},{"name":"unsafeLength","module":"Browser.WebStorage","detail":"unsafeLength :: forall storage. storage -\u003e Number"},{"name":"unsafeKey","module":"Browser.WebStorage","detail":"unsafeKey :: forall storage. storage -\u003e Number -\u003e Maybe String"},{"name":"unsafeGetItem","module":"Browser.WebStorage","detail":"unsafeGetItem :: forall storage v. storage -\u003e String -\u003e Maybe v"},{"name":"unsafeSetItem","module":"Browser.WebStorage","detail":"unsafeSetItem :: forall storage v. storage -\u003e String -\u003e v -\u003e storage"},{"name":"unsafeRemoveItem","module":"Browser.WebStorage","detail":"unsafeRemoveItem :: forall storage. storage -\u003e String -\u003e storage"},{"name":"unsafeClear","module":"Browser.WebStorage","detail":"unsafeClear :: forall storage. storage -\u003e storage"},{"name":"null2Maybe","module":"Browser.WebStorage","detail":"null2Maybe :: forall a. a -\u003e Maybe a"}]