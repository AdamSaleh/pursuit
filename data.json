[{"name":"flip","module":"Prelude","detail":"flip :: forall a b c. (a -\u003e b -\u003e c) -\u003e b -\u003e a -\u003e c"},{"name":"const","module":"Prelude","detail":"const :: forall a b. a -\u003e b -\u003e a"},{"name":"asTypeOf","module":"Prelude","detail":"asTypeOf :: forall a. a -\u003e a -\u003e a"},{"name":"Semigroupoid","module":"Prelude","detail":"class Semigroupoid a where"},{"name":"(\u003c\u003c\u003c)","module":"Prelude","detail":"(\u003c\u003c\u003c) :: forall b c d. a c d -\u003e a b c -\u003e a b d"},{"name":"semigroupoidArr","module":"Prelude","detail":"instance semigroupoidArr :: Semigroupoid Prim.Function"},{"name":"(\u003e\u003e\u003e)","module":"Prelude","detail":"(\u003e\u003e\u003e) :: forall a b c d. (Semigroupoid a) =\u003e a b c -\u003e a c d -\u003e a b d"},{"name":"Category","module":"Prelude","detail":"class (Semigroupoid a) \u003c= Category a where"},{"name":"id","module":"Prelude","detail":"id :: forall t. a t t"},{"name":"categoryArr","module":"Prelude","detail":"instance categoryArr :: Category Prim.Function"},{"name":"($)","module":"Prelude","detail":"($) :: forall a b. (a -\u003e b) -\u003e a -\u003e b"},{"name":"(#)","module":"Prelude","detail":"(#) :: forall a b. a -\u003e (a -\u003e b) -\u003e b"},{"name":"(:)","module":"Prelude","detail":"(:) :: forall a. a -\u003e [a] -\u003e [a]"},{"name":"cons","module":"Prelude","detail":"cons :: forall a. a -\u003e [a] -\u003e [a]"},{"name":"Show","module":"Prelude","detail":"class Show a where"},{"name":"show","module":"Prelude","detail":"show :: a -\u003e String"},{"name":"showStringImpl","module":"Prelude","detail":"showStringImpl :: String -\u003e String"},{"name":"showUnit","module":"Prelude","detail":"instance showUnit :: Show Unit"},{"name":"showString","module":"Prelude","detail":"instance showString :: Show String"},{"name":"showBoolean","module":"Prelude","detail":"instance showBoolean :: Show Boolean"},{"name":"showNumberImpl","module":"Prelude","detail":"showNumberImpl :: Number -\u003e String"},{"name":"showNumber","module":"Prelude","detail":"instance showNumber :: Show Number"},{"name":"showArrayImpl","module":"Prelude","detail":"showArrayImpl :: forall a. (a -\u003e String) -\u003e [a] -\u003e String"},{"name":"showArray","module":"Prelude","detail":"instance showArray :: (Show a) =\u003e Show [a]"},{"name":"Functor","module":"Prelude","detail":"class Functor f where"},{"name":"(\u003c$\u003e)","module":"Prelude","detail":"(\u003c$\u003e) :: forall a b. (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"void","module":"Prelude","detail":"void :: forall f a. (Functor f) =\u003e f a -\u003e f Unit"},{"name":"Apply","module":"Prelude","detail":"class (Functor f) \u003c= Apply f where"},{"name":"(\u003c*\u003e)","module":"Prelude","detail":"(\u003c*\u003e) :: forall a b. f (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"Applicative","module":"Prelude","detail":"class (Apply f) \u003c= Applicative f where"},{"name":"pure","module":"Prelude","detail":"pure :: forall a. a -\u003e f a"},{"name":"liftA1","module":"Prelude","detail":"liftA1 :: forall f a b. (Applicative f) =\u003e (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"Alternative","module":"Prelude","detail":"class Alternative f where"},{"name":"empty","module":"Prelude","detail":"empty :: forall a. f a"},{"name":"(\u003c|\u003e)","module":"Prelude","detail":"(\u003c|\u003e) :: forall a. f a -\u003e f a -\u003e f a"},{"name":"Bind","module":"Prelude","detail":"class (Apply m) \u003c= Bind m where"},{"name":"(\u003e\u003e=)","module":"Prelude","detail":"(\u003e\u003e=) :: forall a b. m a -\u003e (a -\u003e m b) -\u003e m b"},{"name":"Monad","module":"Prelude","detail":"class (Applicative m, Bind m) \u003c= Monad m where"},{"name":"return","module":"Prelude","detail":"return :: forall m a. (Monad m) =\u003e a -\u003e m a"},{"name":"liftM1","module":"Prelude","detail":"liftM1 :: forall m a b. (Monad m) =\u003e (a -\u003e b) -\u003e m a -\u003e m b"},{"name":"ap","module":"Prelude","detail":"ap :: forall m a b. (Monad m) =\u003e m (a -\u003e b) -\u003e m a -\u003e m b"},{"name":"functorArr","module":"Prelude","detail":"instance functorArr :: Functor (Prim.Function r)"},{"name":"applyArr","module":"Prelude","detail":"instance applyArr :: Apply (Prim.Function r)"},{"name":"applicativeArr","module":"Prelude","detail":"instance applicativeArr :: Applicative (Prim.Function r)"},{"name":"bindArr","module":"Prelude","detail":"instance bindArr :: Bind (Prim.Function r)"},{"name":"monadArr","module":"Prelude","detail":"instance monadArr :: Monad (Prim.Function r)"},{"name":"Num","module":"Prelude","detail":"class Num a where"},{"name":"(+)","module":"Prelude","detail":"(+) :: a -\u003e a -\u003e a"},{"name":"(-)","module":"Prelude","detail":"(-) :: a -\u003e a -\u003e a"},{"name":"(*)","module":"Prelude","detail":"(*) :: a -\u003e a -\u003e a"},{"name":"(/)","module":"Prelude","detail":"(/) :: a -\u003e a -\u003e a"},{"name":"(%)","module":"Prelude","detail":"(%) :: a -\u003e a -\u003e a"},{"name":"negate","module":"Prelude","detail":"negate :: a -\u003e a"},{"name":"numAdd","module":"Prelude","detail":"numAdd :: Number -\u003e Number -\u003e Number"},{"name":"numSub","module":"Prelude","detail":"numSub :: Number -\u003e Number -\u003e Number"},{"name":"numMul","module":"Prelude","detail":"numMul :: Number -\u003e Number -\u003e Number"},{"name":"numDiv","module":"Prelude","detail":"numDiv :: Number -\u003e Number -\u003e Number"},{"name":"numMod","module":"Prelude","detail":"numMod :: Number -\u003e Number -\u003e Number"},{"name":"numNegate","module":"Prelude","detail":"numNegate :: Number -\u003e Number"},{"name":"numNumber","module":"Prelude","detail":"instance numNumber :: Num Number"},{"name":"Unit","module":"Prelude","detail":"newtype Unit = Unit :: {  } -\u003e Unit"},{"name":"Unit","module":"Prelude","detail":"newtype Unit = Unit :: {  } -\u003e Unit"},{"name":"unit","module":"Prelude","detail":"unit :: Unit"},{"name":"Eq","module":"Prelude","detail":"class Eq a where"},{"name":"(==)","module":"Prelude","detail":"(==) :: a -\u003e a -\u003e Boolean"},{"name":"(/=)","module":"Prelude","detail":"(/=) :: a -\u003e a -\u003e Boolean"},{"name":"refEq","module":"Prelude","detail":"refEq :: forall a. a -\u003e a -\u003e Boolean"},{"name":"refIneq","module":"Prelude","detail":"refIneq :: forall a. a -\u003e a -\u003e Boolean"},{"name":"eqUnit","module":"Prelude","detail":"instance eqUnit :: Eq Unit"},{"name":"eqString","module":"Prelude","detail":"instance eqString :: Eq String"},{"name":"eqNumber","module":"Prelude","detail":"instance eqNumber :: Eq Number"},{"name":"eqBoolean","module":"Prelude","detail":"instance eqBoolean :: Eq Boolean"},{"name":"eqArrayImpl","module":"Prelude","detail":"eqArrayImpl :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a] -\u003e Boolean"},{"name":"eqArray","module":"Prelude","detail":"instance eqArray :: (Eq a) =\u003e Eq [a]"},{"name":"Ordering","module":"Prelude","detail":"data Ordering = LT :: Ordering | GT :: Ordering | EQ :: Ordering"},{"name":"LT","module":"Prelude","detail":"data Ordering = LT :: Ordering | GT :: Ordering | EQ :: Ordering"},{"name":"GT","module":"Prelude","detail":"data Ordering = LT :: Ordering | GT :: Ordering | EQ :: Ordering"},{"name":"EQ","module":"Prelude","detail":"data Ordering = LT :: Ordering | GT :: Ordering | EQ :: Ordering"},{"name":"eqOrdering","module":"Prelude","detail":"instance eqOrdering :: Eq Ordering"},{"name":"showOrdering","module":"Prelude","detail":"instance showOrdering :: Show Ordering"},{"name":"Ord","module":"Prelude","detail":"class (Eq a) \u003c= Ord a where"},{"name":"compare","module":"Prelude","detail":"compare :: a -\u003e a -\u003e Ordering"},{"name":"(\u003c)","module":"Prelude","detail":"(\u003c) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003e)","module":"Prelude","detail":"(\u003e) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003c=)","module":"Prelude","detail":"(\u003c=) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003e=)","module":"Prelude","detail":"(\u003e=) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"unsafeCompareImpl","module":"Prelude","detail":"unsafeCompareImpl :: forall a. Ordering -\u003e Ordering -\u003e Ordering -\u003e a -\u003e a -\u003e Ordering"},{"name":"unsafeCompare","module":"Prelude","detail":"unsafeCompare :: forall a. a -\u003e a -\u003e Ordering"},{"name":"ordUnit","module":"Prelude","detail":"instance ordUnit :: Ord Unit"},{"name":"ordBoolean","module":"Prelude","detail":"instance ordBoolean :: Ord Boolean"},{"name":"ordNumber","module":"Prelude","detail":"instance ordNumber :: Ord Number"},{"name":"ordString","module":"Prelude","detail":"instance ordString :: Ord String"},{"name":"ordArray","module":"Prelude","detail":"instance ordArray :: (Ord a) =\u003e Ord [a]"},{"name":"Bits","module":"Prelude","detail":"class Bits b where"},{"name":"(&)","module":"Prelude","detail":"(&) :: b -\u003e b -\u003e b"},{"name":"(|)","module":"Prelude","detail":"(|) :: b -\u003e b -\u003e b"},{"name":"(^)","module":"Prelude","detail":"(^) :: b -\u003e b -\u003e b"},{"name":"shl","module":"Prelude","detail":"shl :: b -\u003e Number -\u003e b"},{"name":"shr","module":"Prelude","detail":"shr :: b -\u003e Number -\u003e b"},{"name":"zshr","module":"Prelude","detail":"zshr :: b -\u003e Number -\u003e b"},{"name":"complement","module":"Prelude","detail":"complement :: b -\u003e b"},{"name":"numShl","module":"Prelude","detail":"numShl :: Number -\u003e Number -\u003e Number"},{"name":"numShr","module":"Prelude","detail":"numShr :: Number -\u003e Number -\u003e Number"},{"name":"numZshr","module":"Prelude","detail":"numZshr :: Number -\u003e Number -\u003e Number"},{"name":"numAnd","module":"Prelude","detail":"numAnd :: Number -\u003e Number -\u003e Number"},{"name":"numOr","module":"Prelude","detail":"numOr :: Number -\u003e Number -\u003e Number"},{"name":"numXor","module":"Prelude","detail":"numXor :: Number -\u003e Number -\u003e Number"},{"name":"numComplement","module":"Prelude","detail":"numComplement :: Number -\u003e Number"},{"name":"bitsNumber","module":"Prelude","detail":"instance bitsNumber :: Bits Number"},{"name":"BoolLike","module":"Prelude","detail":"class BoolLike b where"},{"name":"(&&)","module":"Prelude","detail":"(&&) :: b -\u003e b -\u003e b"},{"name":"(||)","module":"Prelude","detail":"(||) :: b -\u003e b -\u003e b"},{"name":"not","module":"Prelude","detail":"not :: b -\u003e b"},{"name":"boolAnd","module":"Prelude","detail":"boolAnd :: Boolean -\u003e Boolean -\u003e Boolean"},{"name":"boolOr","module":"Prelude","detail":"boolOr :: Boolean -\u003e Boolean -\u003e Boolean"},{"name":"boolNot","module":"Prelude","detail":"boolNot :: Boolean -\u003e Boolean"},{"name":"boolLikeBoolean","module":"Prelude","detail":"instance boolLikeBoolean :: BoolLike Boolean"},{"name":"Semigroup","module":"Prelude","detail":"class Semigroup a where"},{"name":"(\u003c\u003e)","module":"Prelude","detail":"(\u003c\u003e) :: a -\u003e a -\u003e a"},{"name":"concatString","module":"Prelude","detail":"concatString :: String -\u003e String -\u003e String"},{"name":"semigroupUnit","module":"Prelude","detail":"instance semigroupUnit :: Semigroup Unit"},{"name":"semigroupString","module":"Prelude","detail":"instance semigroupString :: Semigroup String"},{"name":"semigroupArr","module":"Prelude","detail":"instance semigroupArr :: (Semigroup s') =\u003e Semigroup (s -\u003e s')"},{"name":"(++)","module":"Prelude","detail":"(++) :: forall s. (Semigroup s) =\u003e s -\u003e s -\u003e s"},{"name":"on","module":"Data.Function","detail":"on :: forall a b c. (b -\u003e b -\u003e c) -\u003e (a -\u003e b) -\u003e a -\u003e a -\u003e c"},{"name":"Fn0","module":"Data.Function","detail":"data Fn0 :: * -\u003e *"},{"name":"Fn1","module":"Data.Function","detail":"data Fn1 :: * -\u003e * -\u003e *"},{"name":"Fn2","module":"Data.Function","detail":"data Fn2 :: * -\u003e * -\u003e * -\u003e *"},{"name":"Fn3","module":"Data.Function","detail":"data Fn3 :: * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn4","module":"Data.Function","detail":"data Fn4 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn5","module":"Data.Function","detail":"data Fn5 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn6","module":"Data.Function","detail":"data Fn6 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn7","module":"Data.Function","detail":"data Fn7 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn8","module":"Data.Function","detail":"data Fn8 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn9","module":"Data.Function","detail":"data Fn9 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn10","module":"Data.Function","detail":"data Fn10 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"mkFn0","module":"Data.Function","detail":"mkFn0 :: forall a. (Unit -\u003e a) -\u003e Fn0 a"},{"name":"mkFn1","module":"Data.Function","detail":"mkFn1 :: forall a b. (a -\u003e b) -\u003e Fn1 a b"},{"name":"mkFn2","module":"Data.Function","detail":"mkFn2 :: forall a b c. (a -\u003e b -\u003e c) -\u003e Fn2 a b c"},{"name":"mkFn3","module":"Data.Function","detail":"mkFn3 :: forall a b c d. (a -\u003e b -\u003e c -\u003e d) -\u003e Fn3 a b c d"},{"name":"mkFn4","module":"Data.Function","detail":"mkFn4 :: forall a b c d e. (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e Fn4 a b c d e"},{"name":"mkFn5","module":"Data.Function","detail":"mkFn5 :: forall a b c d e f. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f) -\u003e Fn5 a b c d e f"},{"name":"mkFn6","module":"Data.Function","detail":"mkFn6 :: forall a b c d e f g. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g) -\u003e Fn6 a b c d e f g"},{"name":"mkFn7","module":"Data.Function","detail":"mkFn7 :: forall a b c d e f g h. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h) -\u003e Fn7 a b c d e f g h"},{"name":"mkFn8","module":"Data.Function","detail":"mkFn8 :: forall a b c d e f g h i. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i) -\u003e Fn8 a b c d e f g h i"},{"name":"mkFn9","module":"Data.Function","detail":"mkFn9 :: forall a b c d e f g h i j. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j) -\u003e Fn9 a b c d e f g h i j"},{"name":"mkFn10","module":"Data.Function","detail":"mkFn10 :: forall a b c d e f g h i j k. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e k) -\u003e Fn10 a b c d e f g h i j k"},{"name":"runFn0","module":"Data.Function","detail":"runFn0 :: forall a. Fn0 a -\u003e a"},{"name":"runFn1","module":"Data.Function","detail":"runFn1 :: forall a b. Fn1 a b -\u003e a -\u003e b"},{"name":"runFn2","module":"Data.Function","detail":"runFn2 :: forall a b c. Fn2 a b c -\u003e a -\u003e b -\u003e c"},{"name":"runFn3","module":"Data.Function","detail":"runFn3 :: forall a b c d. Fn3 a b c d -\u003e a -\u003e b -\u003e c -\u003e d"},{"name":"runFn4","module":"Data.Function","detail":"runFn4 :: forall a b c d e. Fn4 a b c d e -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e"},{"name":"runFn5","module":"Data.Function","detail":"runFn5 :: forall a b c d e f. Fn5 a b c d e f -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f"},{"name":"runFn6","module":"Data.Function","detail":"runFn6 :: forall a b c d e f g. Fn6 a b c d e f g -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g"},{"name":"runFn7","module":"Data.Function","detail":"runFn7 :: forall a b c d e f g h. Fn7 a b c d e f g h -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h"},{"name":"runFn8","module":"Data.Function","detail":"runFn8 :: forall a b c d e f g h i. Fn8 a b c d e f g h i -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i"},{"name":"runFn9","module":"Data.Function","detail":"runFn9 :: forall a b c d e f g h i j. Fn9 a b c d e f g h i j -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j"},{"name":"runFn10","module":"Data.Function","detail":"runFn10 :: forall a b c d e f g h i j k. Fn10 a b c d e f g h i j k -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e k"},{"name":"Ref","module":"Data.Eq","detail":"newtype Ref a = Ref :: a -\u003e Ref a"},{"name":"Ref","module":"Data.Eq","detail":"newtype Ref a = Ref :: a -\u003e Ref a"},{"name":"liftRef","module":"Data.Eq","detail":"liftRef :: forall a b. (a -\u003e a -\u003e b) -\u003e Ref a -\u003e Ref a -\u003e b"},{"name":"eqRef","module":"Data.Eq","detail":"instance eqRef :: Eq (Ref a)"},{"name":"functorRef","module":"Data.Eq","detail":"instance functorRef :: Functor Ref"},{"name":"unsafeIndex","module":"Prelude.Unsafe","detail":"unsafeIndex :: forall a. [a] -\u003e Number -\u003e a"},{"name":"Eff","module":"Control.Monad.Eff","detail":"data Eff :: # ! -\u003e * -\u003e *"},{"name":"returnE","module":"Control.Monad.Eff","detail":"returnE :: forall e a. a -\u003e Eff e a"},{"name":"bindE","module":"Control.Monad.Eff","detail":"bindE :: forall e a b. Eff e a -\u003e (a -\u003e Eff e b) -\u003e Eff e b"},{"name":"Pure","module":"Control.Monad.Eff","detail":"type Pure a = forall e. Eff e a"},{"name":"runPure","module":"Control.Monad.Eff","detail":"runPure :: forall a. Pure a -\u003e a"},{"name":"functorEff","module":"Control.Monad.Eff","detail":"instance functorEff :: Functor (Eff e)"},{"name":"applyEff","module":"Control.Monad.Eff","detail":"instance applyEff :: Apply (Eff e)"},{"name":"applicativeEff","module":"Control.Monad.Eff","detail":"instance applicativeEff :: Applicative (Eff e)"},{"name":"bindEff","module":"Control.Monad.Eff","detail":"instance bindEff :: Bind (Eff e)"},{"name":"monadEff","module":"Control.Monad.Eff","detail":"instance monadEff :: Monad (Eff e)"},{"name":"untilE","module":"Control.Monad.Eff","detail":"untilE :: forall e. Eff e Boolean -\u003e Eff e Unit"},{"name":"whileE","module":"Control.Monad.Eff","detail":"whileE :: forall e a. Eff e Boolean -\u003e Eff e a -\u003e Eff e Unit"},{"name":"forE","module":"Control.Monad.Eff","detail":"forE :: forall e. Number -\u003e Number -\u003e (Number -\u003e Eff e Unit) -\u003e Eff e Unit"},{"name":"foreachE","module":"Control.Monad.Eff","detail":"foreachE :: forall e a. [a] -\u003e (a -\u003e Eff e Unit) -\u003e Eff e Unit"},{"name":"unsafeInterleaveEff","module":"Control.Monad.Eff.Unsafe","detail":"unsafeInterleaveEff :: forall eff1 eff2 a. Eff eff1 a -\u003e Eff eff2 a"},{"name":"Trace","module":"Debug.Trace","detail":"data Trace :: !"},{"name":"trace","module":"Debug.Trace","detail":"trace :: forall r. String -\u003e Eff (trace :: Trace | r) Unit"},{"name":"print","module":"Debug.Trace","detail":"print :: forall a r. (Show a) =\u003e a -\u003e Eff (trace :: Trace | r) Unit"},{"name":"ST","module":"Control.Monad.ST","detail":"data ST :: * -\u003e !"},{"name":"STRef","module":"Control.Monad.ST","detail":"data STRef :: * -\u003e * -\u003e *"},{"name":"STArray","module":"Control.Monad.ST","detail":"data STArray :: * -\u003e * -\u003e *"},{"name":"newSTRef","module":"Control.Monad.ST","detail":"newSTRef :: forall a h r. a -\u003e Eff (st :: ST h | r) (STRef h a)"},{"name":"readSTRef","module":"Control.Monad.ST","detail":"readSTRef :: forall a h r. STRef h a -\u003e Eff (st :: ST h | r) a"},{"name":"modifySTRef","module":"Control.Monad.ST","detail":"modifySTRef :: forall a h r. STRef h a -\u003e (a -\u003e a) -\u003e Eff (st :: ST h | r) a"},{"name":"writeSTRef","module":"Control.Monad.ST","detail":"writeSTRef :: forall a h r. STRef h a -\u003e a -\u003e Eff (st :: ST h | r) a"},{"name":"newSTArray","module":"Control.Monad.ST","detail":"newSTArray :: forall a h r. Number -\u003e a -\u003e Eff (st :: ST h | r) (STArray h a)"},{"name":"peekSTArray","module":"Control.Monad.ST","detail":"peekSTArray :: forall a h r. STArray h a -\u003e Eff (st :: ST h | r) a"},{"name":"pokeSTArray","module":"Control.Monad.ST","detail":"pokeSTArray :: forall a h r. STArray h a -\u003e Number -\u003e a -\u003e Eff (st :: ST h | r) a"},{"name":"runST","module":"Control.Monad.ST","detail":"runST :: forall a r. (forall h. Eff (st :: ST h | r) a) -\u003e Eff r a"},{"name":"runSTArray","module":"Control.Monad.ST","detail":"runSTArray :: forall a r. (forall h. Eff (st :: ST h | r) (STArray h a)) -\u003e Eff r [a]"}]