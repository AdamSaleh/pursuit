[{"name":"flip","module":"Prelude","detail":"flip :: forall a b c. (a -\u003e b -\u003e c) -\u003e b -\u003e a -\u003e c"},{"name":"const","module":"Prelude","detail":"const :: forall a b. a -\u003e b -\u003e a"},{"name":"asTypeOf","module":"Prelude","detail":"asTypeOf :: forall a. a -\u003e a -\u003e a"},{"name":"Semigroupoid","module":"Prelude","detail":"class Semigroupoid a where"},{"name":"(\u003c\u003c\u003c)","module":"Prelude","detail":"(\u003c\u003c\u003c) :: forall b c d. a c d -\u003e a b c -\u003e a b d"},{"name":"semigroupoidArr","module":"Prelude","detail":"instance semigroupoidArr :: Semigroupoid Prim.Function"},{"name":"(\u003e\u003e\u003e)","module":"Prelude","detail":"(\u003e\u003e\u003e) :: forall a b c d. (Semigroupoid a) =\u003e a b c -\u003e a c d -\u003e a b d"},{"name":"Category","module":"Prelude","detail":"class (Semigroupoid a) \u003c= Category a where"},{"name":"id","module":"Prelude","detail":"id :: forall t. a t t"},{"name":"categoryArr","module":"Prelude","detail":"instance categoryArr :: Category Prim.Function"},{"name":"($)","module":"Prelude","detail":"($) :: forall a b. (a -\u003e b) -\u003e a -\u003e b"},{"name":"(#)","module":"Prelude","detail":"(#) :: forall a b. a -\u003e (a -\u003e b) -\u003e b"},{"name":"(:)","module":"Prelude","detail":"(:) :: forall a. a -\u003e [a] -\u003e [a]"},{"name":"cons","module":"Prelude","detail":"cons :: forall a. a -\u003e [a] -\u003e [a]"},{"name":"Show","module":"Prelude","detail":"class Show a where"},{"name":"show","module":"Prelude","detail":"show :: a -\u003e String"},{"name":"showStringImpl","module":"Prelude","detail":"showStringImpl :: String -\u003e String"},{"name":"showUnit","module":"Prelude","detail":"instance showUnit :: Show Unit"},{"name":"showString","module":"Prelude","detail":"instance showString :: Show String"},{"name":"showBoolean","module":"Prelude","detail":"instance showBoolean :: Show Boolean"},{"name":"showNumberImpl","module":"Prelude","detail":"showNumberImpl :: Number -\u003e String"},{"name":"showNumber","module":"Prelude","detail":"instance showNumber :: Show Number"},{"name":"showArrayImpl","module":"Prelude","detail":"showArrayImpl :: forall a. (a -\u003e String) -\u003e [a] -\u003e String"},{"name":"showArray","module":"Prelude","detail":"instance showArray :: (Show a) =\u003e Show [a]"},{"name":"Functor","module":"Prelude","detail":"class Functor f where"},{"name":"(\u003c$\u003e)","module":"Prelude","detail":"(\u003c$\u003e) :: forall a b. (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"void","module":"Prelude","detail":"void :: forall f a. (Functor f) =\u003e f a -\u003e f Unit"},{"name":"Apply","module":"Prelude","detail":"class (Functor f) \u003c= Apply f where"},{"name":"(\u003c*\u003e)","module":"Prelude","detail":"(\u003c*\u003e) :: forall a b. f (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"Applicative","module":"Prelude","detail":"class (Apply f) \u003c= Applicative f where"},{"name":"pure","module":"Prelude","detail":"pure :: forall a. a -\u003e f a"},{"name":"liftA1","module":"Prelude","detail":"liftA1 :: forall f a b. (Applicative f) =\u003e (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"Alternative","module":"Prelude","detail":"class Alternative f where"},{"name":"empty","module":"Prelude","detail":"empty :: forall a. f a"},{"name":"(\u003c|\u003e)","module":"Prelude","detail":"(\u003c|\u003e) :: forall a. f a -\u003e f a -\u003e f a"},{"name":"Bind","module":"Prelude","detail":"class (Apply m) \u003c= Bind m where"},{"name":"(\u003e\u003e=)","module":"Prelude","detail":"(\u003e\u003e=) :: forall a b. m a -\u003e (a -\u003e m b) -\u003e m b"},{"name":"Monad","module":"Prelude","detail":"class (Applicative m, Bind m) \u003c= Monad m where"},{"name":"return","module":"Prelude","detail":"return :: forall m a. (Monad m) =\u003e a -\u003e m a"},{"name":"liftM1","module":"Prelude","detail":"liftM1 :: forall m a b. (Monad m) =\u003e (a -\u003e b) -\u003e m a -\u003e m b"},{"name":"ap","module":"Prelude","detail":"ap :: forall m a b. (Monad m) =\u003e m (a -\u003e b) -\u003e m a -\u003e m b"},{"name":"functorArr","module":"Prelude","detail":"instance functorArr :: Functor (Prim.Function r)"},{"name":"applyArr","module":"Prelude","detail":"instance applyArr :: Apply (Prim.Function r)"},{"name":"applicativeArr","module":"Prelude","detail":"instance applicativeArr :: Applicative (Prim.Function r)"},{"name":"bindArr","module":"Prelude","detail":"instance bindArr :: Bind (Prim.Function r)"},{"name":"monadArr","module":"Prelude","detail":"instance monadArr :: Monad (Prim.Function r)"},{"name":"Num","module":"Prelude","detail":"class Num a where"},{"name":"(+)","module":"Prelude","detail":"(+) :: a -\u003e a -\u003e a"},{"name":"(-)","module":"Prelude","detail":"(-) :: a -\u003e a -\u003e a"},{"name":"(*)","module":"Prelude","detail":"(*) :: a -\u003e a -\u003e a"},{"name":"(/)","module":"Prelude","detail":"(/) :: a -\u003e a -\u003e a"},{"name":"(%)","module":"Prelude","detail":"(%) :: a -\u003e a -\u003e a"},{"name":"negate","module":"Prelude","detail":"negate :: a -\u003e a"},{"name":"numAdd","module":"Prelude","detail":"numAdd :: Number -\u003e Number -\u003e Number"},{"name":"numSub","module":"Prelude","detail":"numSub :: Number -\u003e Number -\u003e Number"},{"name":"numMul","module":"Prelude","detail":"numMul :: Number -\u003e Number -\u003e Number"},{"name":"numDiv","module":"Prelude","detail":"numDiv :: Number -\u003e Number -\u003e Number"},{"name":"numMod","module":"Prelude","detail":"numMod :: Number -\u003e Number -\u003e Number"},{"name":"numNegate","module":"Prelude","detail":"numNegate :: Number -\u003e Number"},{"name":"numNumber","module":"Prelude","detail":"instance numNumber :: Num Number"},{"name":"Unit","module":"Prelude","detail":"newtype Unit = Unit {  }"},{"name":"Unit","module":"Prelude","detail":"newtype Unit = Unit {  }"},{"name":"unit","module":"Prelude","detail":"unit :: Unit"},{"name":"Eq","module":"Prelude","detail":"class Eq a where"},{"name":"(==)","module":"Prelude","detail":"(==) :: a -\u003e a -\u003e Boolean"},{"name":"(/=)","module":"Prelude","detail":"(/=) :: a -\u003e a -\u003e Boolean"},{"name":"refEq","module":"Prelude","detail":"refEq :: forall a. a -\u003e a -\u003e Boolean"},{"name":"refIneq","module":"Prelude","detail":"refIneq :: forall a. a -\u003e a -\u003e Boolean"},{"name":"eqUnit","module":"Prelude","detail":"instance eqUnit :: Eq Unit"},{"name":"eqString","module":"Prelude","detail":"instance eqString :: Eq String"},{"name":"eqNumber","module":"Prelude","detail":"instance eqNumber :: Eq Number"},{"name":"eqBoolean","module":"Prelude","detail":"instance eqBoolean :: Eq Boolean"},{"name":"eqArrayImpl","module":"Prelude","detail":"eqArrayImpl :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a] -\u003e Boolean"},{"name":"eqArray","module":"Prelude","detail":"instance eqArray :: (Eq a) =\u003e Eq [a]"},{"name":"Ordering","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"LT","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"GT","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"EQ","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"eqOrdering","module":"Prelude","detail":"instance eqOrdering :: Eq Ordering"},{"name":"showOrdering","module":"Prelude","detail":"instance showOrdering :: Show Ordering"},{"name":"Ord","module":"Prelude","detail":"class (Eq a) \u003c= Ord a where"},{"name":"compare","module":"Prelude","detail":"compare :: a -\u003e a -\u003e Ordering"},{"name":"(\u003c)","module":"Prelude","detail":"(\u003c) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003e)","module":"Prelude","detail":"(\u003e) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003c=)","module":"Prelude","detail":"(\u003c=) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003e=)","module":"Prelude","detail":"(\u003e=) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"unsafeCompareImpl","module":"Prelude","detail":"unsafeCompareImpl :: forall a. Ordering -\u003e Ordering -\u003e Ordering -\u003e a -\u003e a -\u003e Ordering"},{"name":"unsafeCompare","module":"Prelude","detail":"unsafeCompare :: forall a. a -\u003e a -\u003e Ordering"},{"name":"ordUnit","module":"Prelude","detail":"instance ordUnit :: Ord Unit"},{"name":"ordBoolean","module":"Prelude","detail":"instance ordBoolean :: Ord Boolean"},{"name":"ordNumber","module":"Prelude","detail":"instance ordNumber :: Ord Number"},{"name":"ordString","module":"Prelude","detail":"instance ordString :: Ord String"},{"name":"ordArray","module":"Prelude","detail":"instance ordArray :: (Ord a) =\u003e Ord [a]"},{"name":"Bits","module":"Prelude","detail":"class Bits b where"},{"name":"(&)","module":"Prelude","detail":"(&) :: b -\u003e b -\u003e b"},{"name":"(|)","module":"Prelude","detail":"(|) :: b -\u003e b -\u003e b"},{"name":"(^)","module":"Prelude","detail":"(^) :: b -\u003e b -\u003e b"},{"name":"shl","module":"Prelude","detail":"shl :: b -\u003e Number -\u003e b"},{"name":"shr","module":"Prelude","detail":"shr :: b -\u003e Number -\u003e b"},{"name":"zshr","module":"Prelude","detail":"zshr :: b -\u003e Number -\u003e b"},{"name":"complement","module":"Prelude","detail":"complement :: b -\u003e b"},{"name":"numShl","module":"Prelude","detail":"numShl :: Number -\u003e Number -\u003e Number"},{"name":"numShr","module":"Prelude","detail":"numShr :: Number -\u003e Number -\u003e Number"},{"name":"numZshr","module":"Prelude","detail":"numZshr :: Number -\u003e Number -\u003e Number"},{"name":"numAnd","module":"Prelude","detail":"numAnd :: Number -\u003e Number -\u003e Number"},{"name":"numOr","module":"Prelude","detail":"numOr :: Number -\u003e Number -\u003e Number"},{"name":"numXor","module":"Prelude","detail":"numXor :: Number -\u003e Number -\u003e Number"},{"name":"numComplement","module":"Prelude","detail":"numComplement :: Number -\u003e Number"},{"name":"bitsNumber","module":"Prelude","detail":"instance bitsNumber :: Bits Number"},{"name":"BoolLike","module":"Prelude","detail":"class BoolLike b where"},{"name":"(&&)","module":"Prelude","detail":"(&&) :: b -\u003e b -\u003e b"},{"name":"(||)","module":"Prelude","detail":"(||) :: b -\u003e b -\u003e b"},{"name":"not","module":"Prelude","detail":"not :: b -\u003e b"},{"name":"boolAnd","module":"Prelude","detail":"boolAnd :: Boolean -\u003e Boolean -\u003e Boolean"},{"name":"boolOr","module":"Prelude","detail":"boolOr :: Boolean -\u003e Boolean -\u003e Boolean"},{"name":"boolNot","module":"Prelude","detail":"boolNot :: Boolean -\u003e Boolean"},{"name":"boolLikeBoolean","module":"Prelude","detail":"instance boolLikeBoolean :: BoolLike Boolean"},{"name":"Semigroup","module":"Prelude","detail":"class Semigroup a where"},{"name":"(\u003c\u003e)","module":"Prelude","detail":"(\u003c\u003e) :: a -\u003e a -\u003e a"},{"name":"concatString","module":"Prelude","detail":"concatString :: String -\u003e String -\u003e String"},{"name":"semigroupUnit","module":"Prelude","detail":"instance semigroupUnit :: Semigroup Unit"},{"name":"semigroupString","module":"Prelude","detail":"instance semigroupString :: Semigroup String"},{"name":"semigroupArr","module":"Prelude","detail":"instance semigroupArr :: (Semigroup s') =\u003e Semigroup (s -\u003e s')"},{"name":"(++)","module":"Prelude","detail":"(++) :: forall s. (Semigroup s) =\u003e s -\u003e s -\u003e s"},{"name":"on","module":"Data.Function","detail":"on :: forall a b c. (b -\u003e b -\u003e c) -\u003e (a -\u003e b) -\u003e a -\u003e a -\u003e c"},{"name":"Fn0","module":"Data.Function","detail":"data Fn0 :: * -\u003e *"},{"name":"Fn1","module":"Data.Function","detail":"data Fn1 :: * -\u003e * -\u003e *"},{"name":"Fn2","module":"Data.Function","detail":"data Fn2 :: * -\u003e * -\u003e * -\u003e *"},{"name":"Fn3","module":"Data.Function","detail":"data Fn3 :: * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn4","module":"Data.Function","detail":"data Fn4 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn5","module":"Data.Function","detail":"data Fn5 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn6","module":"Data.Function","detail":"data Fn6 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn7","module":"Data.Function","detail":"data Fn7 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn8","module":"Data.Function","detail":"data Fn8 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn9","module":"Data.Function","detail":"data Fn9 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn10","module":"Data.Function","detail":"data Fn10 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"mkFn0","module":"Data.Function","detail":"mkFn0 :: forall a. (Unit -\u003e a) -\u003e Fn0 a"},{"name":"mkFn1","module":"Data.Function","detail":"mkFn1 :: forall a b. (a -\u003e b) -\u003e Fn1 a b"},{"name":"mkFn2","module":"Data.Function","detail":"mkFn2 :: forall a b c. (a -\u003e b -\u003e c) -\u003e Fn2 a b c"},{"name":"mkFn3","module":"Data.Function","detail":"mkFn3 :: forall a b c d. (a -\u003e b -\u003e c -\u003e d) -\u003e Fn3 a b c d"},{"name":"mkFn4","module":"Data.Function","detail":"mkFn4 :: forall a b c d e. (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e Fn4 a b c d e"},{"name":"mkFn5","module":"Data.Function","detail":"mkFn5 :: forall a b c d e f. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f) -\u003e Fn5 a b c d e f"},{"name":"mkFn6","module":"Data.Function","detail":"mkFn6 :: forall a b c d e f g. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g) -\u003e Fn6 a b c d e f g"},{"name":"mkFn7","module":"Data.Function","detail":"mkFn7 :: forall a b c d e f g h. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h) -\u003e Fn7 a b c d e f g h"},{"name":"mkFn8","module":"Data.Function","detail":"mkFn8 :: forall a b c d e f g h i. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i) -\u003e Fn8 a b c d e f g h i"},{"name":"mkFn9","module":"Data.Function","detail":"mkFn9 :: forall a b c d e f g h i j. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j) -\u003e Fn9 a b c d e f g h i j"},{"name":"mkFn10","module":"Data.Function","detail":"mkFn10 :: forall a b c d e f g h i j k. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e k) -\u003e Fn10 a b c d e f g h i j k"},{"name":"runFn0","module":"Data.Function","detail":"runFn0 :: forall a. Fn0 a -\u003e a"},{"name":"runFn1","module":"Data.Function","detail":"runFn1 :: forall a b. Fn1 a b -\u003e a -\u003e b"},{"name":"runFn2","module":"Data.Function","detail":"runFn2 :: forall a b c. Fn2 a b c -\u003e a -\u003e b -\u003e c"},{"name":"runFn3","module":"Data.Function","detail":"runFn3 :: forall a b c d. Fn3 a b c d -\u003e a -\u003e b -\u003e c -\u003e d"},{"name":"runFn4","module":"Data.Function","detail":"runFn4 :: forall a b c d e. Fn4 a b c d e -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e"},{"name":"runFn5","module":"Data.Function","detail":"runFn5 :: forall a b c d e f. Fn5 a b c d e f -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f"},{"name":"runFn6","module":"Data.Function","detail":"runFn6 :: forall a b c d e f g. Fn6 a b c d e f g -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g"},{"name":"runFn7","module":"Data.Function","detail":"runFn7 :: forall a b c d e f g h. Fn7 a b c d e f g h -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h"},{"name":"runFn8","module":"Data.Function","detail":"runFn8 :: forall a b c d e f g h i. Fn8 a b c d e f g h i -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i"},{"name":"runFn9","module":"Data.Function","detail":"runFn9 :: forall a b c d e f g h i j. Fn9 a b c d e f g h i j -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j"},{"name":"runFn10","module":"Data.Function","detail":"runFn10 :: forall a b c d e f g h i j k. Fn10 a b c d e f g h i j k -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e k"},{"name":"Ref","module":"Data.Eq","detail":"newtype Ref a = Ref a"},{"name":"Ref","module":"Data.Eq","detail":"newtype Ref a = Ref a"},{"name":"liftRef","module":"Data.Eq","detail":"liftRef :: forall a b. (a -\u003e a -\u003e b) -\u003e Ref a -\u003e Ref a -\u003e b"},{"name":"eqRef","module":"Data.Eq","detail":"instance eqRef :: Eq (Ref a)"},{"name":"functorRef","module":"Data.Eq","detail":"instance functorRef :: Functor Ref"},{"name":"unsafeIndex","module":"Prelude.Unsafe","detail":"unsafeIndex :: forall a. [a] -\u003e Number -\u003e a"},{"name":"Eff","module":"Control.Monad.Eff","detail":"data Eff :: # ! -\u003e * -\u003e *"},{"name":"returnE","module":"Control.Monad.Eff","detail":"returnE :: forall e a. a -\u003e Eff e a"},{"name":"bindE","module":"Control.Monad.Eff","detail":"bindE :: forall e a b. Eff e a -\u003e (a -\u003e Eff e b) -\u003e Eff e b"},{"name":"Pure","module":"Control.Monad.Eff","detail":"type Pure a = forall e. Eff e a"},{"name":"runPure","module":"Control.Monad.Eff","detail":"runPure :: forall a. Pure a -\u003e a"},{"name":"functorEff","module":"Control.Monad.Eff","detail":"instance functorEff :: Functor (Eff e)"},{"name":"applyEff","module":"Control.Monad.Eff","detail":"instance applyEff :: Apply (Eff e)"},{"name":"applicativeEff","module":"Control.Monad.Eff","detail":"instance applicativeEff :: Applicative (Eff e)"},{"name":"bindEff","module":"Control.Monad.Eff","detail":"instance bindEff :: Bind (Eff e)"},{"name":"monadEff","module":"Control.Monad.Eff","detail":"instance monadEff :: Monad (Eff e)"},{"name":"untilE","module":"Control.Monad.Eff","detail":"untilE :: forall e. Eff e Boolean -\u003e Eff e Unit"},{"name":"whileE","module":"Control.Monad.Eff","detail":"whileE :: forall e a. Eff e Boolean -\u003e Eff e a -\u003e Eff e Unit"},{"name":"forE","module":"Control.Monad.Eff","detail":"forE :: forall e. Number -\u003e Number -\u003e (Number -\u003e Eff e Unit) -\u003e Eff e Unit"},{"name":"foreachE","module":"Control.Monad.Eff","detail":"foreachE :: forall e a. [a] -\u003e (a -\u003e Eff e Unit) -\u003e Eff e Unit"},{"name":"unsafeInterleaveEff","module":"Control.Monad.Eff.Unsafe","detail":"unsafeInterleaveEff :: forall eff1 eff2 a. Eff eff1 a -\u003e Eff eff2 a"},{"name":"Trace","module":"Debug.Trace","detail":"data Trace :: !"},{"name":"trace","module":"Debug.Trace","detail":"trace :: forall r. String -\u003e Eff (trace :: Trace | r) Unit"},{"name":"print","module":"Debug.Trace","detail":"print :: forall a r. (Show a) =\u003e a -\u003e Eff (trace :: Trace | r) Unit"},{"name":"ST","module":"Control.Monad.ST","detail":"data ST :: * -\u003e !"},{"name":"STRef","module":"Control.Monad.ST","detail":"data STRef :: * -\u003e * -\u003e *"},{"name":"STArray","module":"Control.Monad.ST","detail":"data STArray :: * -\u003e * -\u003e *"},{"name":"newSTRef","module":"Control.Monad.ST","detail":"newSTRef :: forall a h r. a -\u003e Eff (st :: ST h | r) (STRef h a)"},{"name":"readSTRef","module":"Control.Monad.ST","detail":"readSTRef :: forall a h r. STRef h a -\u003e Eff (st :: ST h | r) a"},{"name":"modifySTRef","module":"Control.Monad.ST","detail":"modifySTRef :: forall a h r. STRef h a -\u003e (a -\u003e a) -\u003e Eff (st :: ST h | r) a"},{"name":"writeSTRef","module":"Control.Monad.ST","detail":"writeSTRef :: forall a h r. STRef h a -\u003e a -\u003e Eff (st :: ST h | r) a"},{"name":"newSTArray","module":"Control.Monad.ST","detail":"newSTArray :: forall a h r. Number -\u003e a -\u003e Eff (st :: ST h | r) (STArray h a)"},{"name":"peekSTArray","module":"Control.Monad.ST","detail":"peekSTArray :: forall a h r. STArray h a -\u003e Eff (st :: ST h | r) a"},{"name":"pokeSTArray","module":"Control.Monad.ST","detail":"pokeSTArray :: forall a h r. STArray h a -\u003e Number -\u003e a -\u003e Eff (st :: ST h | r) a"},{"name":"runST","module":"Control.Monad.ST","detail":"runST :: forall a r. (forall h. Eff (st :: ST h | r) a) -\u003e Eff r a"},{"name":"runSTArray","module":"Control.Monad.ST","detail":"runSTArray :: forall a r. (forall h. Eff (st :: ST h | r) (STArray h a)) -\u003e Eff r [a]"},{"name":"TestEither","module":"Test.QuickCheck.Either","detail":"data TestEither a b = TestEither (Either a b)"},{"name":"TestEither","module":"Test.QuickCheck.Either","detail":"data TestEither a b = TestEither (Either a b)"},{"name":"runTestEither","module":"Test.QuickCheck.Either","detail":"runTestEither :: forall a b. TestEither a b -\u003e Either a b"},{"name":"lift","module":"Test.QuickCheck.Either","detail":"lift :: forall a b c. (Either a b -\u003e Either a b -\u003e c) -\u003e TestEither a b -\u003e TestEither a b -\u003e c"},{"name":"arbEither","module":"Test.QuickCheck.Either","detail":"instance arbEither :: (Arbitrary a, Arbitrary b) =\u003e Arbitrary (TestEither a b)"},{"name":"showTestEither","module":"Test.QuickCheck.Either","detail":"instance showTestEither :: (Show a, Show b) =\u003e Show (TestEither a b)"},{"name":"eqTestEither","module":"Test.QuickCheck.Either","detail":"instance eqTestEither :: (Eq a, Eq b) =\u003e Eq (TestEither a b)"},{"name":"ordTestEither","module":"Test.QuickCheck.Either","detail":"instance ordTestEither :: (Ord a, Ord b) =\u003e Ord (TestEither a b)"},{"name":"functorTestEither","module":"Test.QuickCheck.Either","detail":"instance functorTestEither :: Functor (TestEither a)"},{"name":"applyTestEither","module":"Test.QuickCheck.Either","detail":"instance applyTestEither :: Apply (TestEither a)"},{"name":"applicativeTestEither","module":"Test.QuickCheck.Either","detail":"instance applicativeTestEither :: Applicative (TestEither a)"},{"name":"bindTestEither","module":"Test.QuickCheck.Either","detail":"instance bindTestEither :: Bind (TestEither a)"},{"name":"monadTestEither","module":"Test.QuickCheck.Either","detail":"instance monadTestEither :: Monad (TestEither a)"},{"name":"TestMaybe","module":"Test.QuickCheck.Maybe","detail":"data TestMaybe a = TestMaybe (Maybe a)"},{"name":"TestMaybe","module":"Test.QuickCheck.Maybe","detail":"data TestMaybe a = TestMaybe (Maybe a)"},{"name":"runTestMaybe","module":"Test.QuickCheck.Maybe","detail":"runTestMaybe :: forall a. TestMaybe a -\u003e Maybe a"},{"name":"lift","module":"Test.QuickCheck.Maybe","detail":"lift :: forall a b. (Maybe a -\u003e Maybe a -\u003e b) -\u003e TestMaybe a -\u003e TestMaybe a -\u003e b"},{"name":"arbMaybe","module":"Test.QuickCheck.Maybe","detail":"instance arbMaybe :: (Arbitrary a) =\u003e Arbitrary (TestMaybe a)"},{"name":"showTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance showTestMaybe :: (Show a, Show b) =\u003e Show (TestMaybe a)"},{"name":"eqTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance eqTestMaybe :: (Eq a) =\u003e Eq (TestMaybe a)"},{"name":"ordTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance ordTestMaybe :: (Ord a) =\u003e Ord (TestMaybe a)"},{"name":"functorTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance functorTestMaybe :: Functor TestMaybe"},{"name":"applyTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance applyTestMaybe :: Apply TestMaybe"},{"name":"applicativeTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance applicativeTestMaybe :: Applicative TestMaybe"},{"name":"alternativeTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance alternativeTestMaybe :: Alternative TestMaybe"},{"name":"bindTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance bindTestMaybe :: Bind TestMaybe"},{"name":"monadTestMaybe","module":"Test.QuickCheck.Maybe","detail":"instance monadTestMaybe :: Monad TestMaybe"},{"name":"TestTuple","module":"Test.QuickCheck.Tuple","detail":"data TestTuple a b = TestTuple (Tuple a b)"},{"name":"TestTuple","module":"Test.QuickCheck.Tuple","detail":"data TestTuple a b = TestTuple (Tuple a b)"},{"name":"runTestTuple","module":"Test.QuickCheck.Tuple","detail":"runTestTuple :: forall a b. TestTuple a b -\u003e Tuple a b"},{"name":"lift","module":"Test.QuickCheck.Tuple","detail":"lift :: forall a b c. (Tuple a b -\u003e Tuple a b -\u003e c) -\u003e TestTuple a b -\u003e TestTuple a b -\u003e c"},{"name":"arbTuple","module":"Test.QuickCheck.Tuple","detail":"instance arbTuple :: (Arbitrary a, Arbitrary b) =\u003e Arbitrary (TestTuple a b)"},{"name":"showTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance showTestTuple :: (Show a, Show b) =\u003e Show (TestTuple a b)"},{"name":"eqTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance eqTestTuple :: (Eq a, Eq b) =\u003e Eq (TestTuple a b)"},{"name":"ordTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance ordTestTuple :: (Ord a, Ord b) =\u003e Ord (TestTuple a b)"},{"name":"functorTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance functorTestTuple :: Functor (TestTuple a)"},{"name":"applyTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance applyTestTuple :: (Semigroup a) =\u003e Apply (TestTuple a)"},{"name":"applicativeTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance applicativeTestTuple :: (Monoid a) =\u003e Applicative (TestTuple a)"},{"name":"bindTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance bindTestTuple :: (Semigroup a) =\u003e Bind (TestTuple a)"},{"name":"monadTestTuple","module":"Test.QuickCheck.Tuple","detail":"instance monadTestTuple :: (Monoid a) =\u003e Monad (TestTuple a)"},{"name":"head","module":"Data.Array.Unsafe","detail":"head :: forall a. [a] -\u003e a"},{"name":"tail","module":"Data.Array.Unsafe","detail":"tail :: forall a. [a] -\u003e [a]"},{"name":"last","module":"Data.Array.Unsafe","detail":"last :: forall a. [a] -\u003e a"},{"name":"init","module":"Data.Array.Unsafe","detail":"init :: forall a. [a] -\u003e [a]"},{"name":"(!!)","module":"Data.Array","detail":"(!!) :: forall a. [a] -\u003e Number -\u003e Maybe a"},{"name":"snoc","module":"Data.Array","detail":"snoc :: forall a. [a] -\u003e a -\u003e [a]"},{"name":"singleton","module":"Data.Array","detail":"singleton :: forall a. a -\u003e [a]"},{"name":"head","module":"Data.Array","detail":"head :: forall a. [a] -\u003e Maybe a"},{"name":"last","module":"Data.Array","detail":"last :: forall a. [a] -\u003e Maybe a"},{"name":"tail","module":"Data.Array","detail":"tail :: forall a. [a] -\u003e Maybe [a]"},{"name":"init","module":"Data.Array","detail":"init :: forall a. [a] -\u003e Maybe [a]"},{"name":"null","module":"Data.Array","detail":"null :: forall a. [a] -\u003e Boolean"},{"name":"length","module":"Data.Array","detail":"length :: forall a. [a] -\u003e Number"},{"name":"findIndex","module":"Data.Array","detail":"findIndex :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e Number"},{"name":"findLastIndex","module":"Data.Array","detail":"findLastIndex :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e Number"},{"name":"elemIndex","module":"Data.Array","detail":"elemIndex :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e Number"},{"name":"elemLastIndex","module":"Data.Array","detail":"elemLastIndex :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e Number"},{"name":"append","module":"Data.Array","detail":"append :: forall a. [a] -\u003e [a] -\u003e [a]"},{"name":"concat","module":"Data.Array","detail":"concat :: forall a. [[a]] -\u003e [a]"},{"name":"reverse","module":"Data.Array","detail":"reverse :: forall a. [a] -\u003e [a]"},{"name":"drop","module":"Data.Array","detail":"drop :: forall a. Number -\u003e [a] -\u003e [a]"},{"name":"take","module":"Data.Array","detail":"take :: forall a. Number -\u003e [a] -\u003e [a]"},{"name":"slice","module":"Data.Array","detail":"slice :: forall a. Number -\u003e Number -\u003e [a] -\u003e [a]"},{"name":"insertAt","module":"Data.Array","detail":"insertAt :: forall a. Number -\u003e a -\u003e [a] -\u003e [a]"},{"name":"deleteAt","module":"Data.Array","detail":"deleteAt :: forall a. Number -\u003e Number -\u003e [a] -\u003e [a]"},{"name":"updateAt","module":"Data.Array","detail":"updateAt :: forall a. Number -\u003e a -\u003e [a] -\u003e [a]"},{"name":"deleteBy","module":"Data.Array","detail":"deleteBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e a -\u003e [a] -\u003e [a]"},{"name":"delete","module":"Data.Array","detail":"delete :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e [a]"},{"name":"(\\\\)","module":"Data.Array","detail":"(\\\\) :: forall a. (Eq a) =\u003e [a] -\u003e [a] -\u003e [a]"},{"name":"intersectBy","module":"Data.Array","detail":"intersectBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a] -\u003e [a]"},{"name":"intersect","module":"Data.Array","detail":"intersect :: forall a. (Eq a) =\u003e [a] -\u003e [a] -\u003e [a]"},{"name":"concatMap","module":"Data.Array","detail":"concatMap :: forall a b. (a -\u003e [b]) -\u003e [a] -\u003e [b]"},{"name":"map","module":"Data.Array","detail":"map :: forall a b. (a -\u003e b) -\u003e [a] -\u003e [b]"},{"name":"mapMaybe","module":"Data.Array","detail":"mapMaybe :: forall a b. (a -\u003e Maybe b) -\u003e [a] -\u003e [b]"},{"name":"catMaybes","module":"Data.Array","detail":"catMaybes :: forall a. [Maybe a] -\u003e [a]"},{"name":"filter","module":"Data.Array","detail":"filter :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e [a]"},{"name":"range","module":"Data.Array","detail":"range :: Number -\u003e Number -\u003e [Number]"},{"name":"zipWith","module":"Data.Array","detail":"zipWith :: forall a b c. (a -\u003e b -\u003e c) -\u003e [a] -\u003e [b] -\u003e [c]"},{"name":"nub","module":"Data.Array","detail":"nub :: forall a. (Eq a) =\u003e [a] -\u003e [a]"},{"name":"nubBy","module":"Data.Array","detail":"nubBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a]"},{"name":"sort","module":"Data.Array","detail":"sort :: forall a. (Ord a) =\u003e [a] -\u003e [a]"},{"name":"sortBy","module":"Data.Array","detail":"sortBy :: forall a. (a -\u003e a -\u003e Ordering) -\u003e [a] -\u003e [a]"},{"name":"sortJS","module":"Data.Array","detail":"sortJS :: forall a. (a -\u003e a -\u003e Number) -\u003e [a] -\u003e [a]"},{"name":"group","module":"Data.Array","detail":"group :: forall a. (Eq a) =\u003e [a] -\u003e [[a]]"},{"name":"group'","module":"Data.Array","detail":"group' :: forall a. (Ord a) =\u003e [a] -\u003e [[a]]"},{"name":"groupBy","module":"Data.Array","detail":"groupBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [[a]]"},{"name":"span","module":"Data.Array","detail":"span :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e { rest :: [a], init :: [a] }"},{"name":"functorArray","module":"Data.Array","detail":"instance functorArray :: Functor Prim.Array"},{"name":"applyArray","module":"Data.Array","detail":"instance applyArray :: Apply Prim.Array"},{"name":"applicativeArray","module":"Data.Array","detail":"instance applicativeArray :: Applicative Prim.Array"},{"name":"bindArray","module":"Data.Array","detail":"instance bindArray :: Bind Prim.Array"},{"name":"monadArray","module":"Data.Array","detail":"instance monadArray :: Monad Prim.Array"},{"name":"semigroupArray","module":"Data.Array","detail":"instance semigroupArray :: Semigroup [a]"},{"name":"alternativeArray","module":"Data.Array","detail":"instance alternativeArray :: Alternative Prim.Array"},{"name":"(\u003c*)","module":"Control.Apply","detail":"(\u003c*) :: forall a b f. (Apply f) =\u003e f a -\u003e f b -\u003e f a"},{"name":"(*\u003e)","module":"Control.Apply","detail":"(*\u003e) :: forall a b f. (Apply f) =\u003e f a -\u003e f b -\u003e f b"},{"name":"lift2","module":"Control.Apply","detail":"lift2 :: forall a b c f. (Apply f) =\u003e (a -\u003e b -\u003e c) -\u003e f a -\u003e f b -\u003e f c"},{"name":"lift3","module":"Control.Apply","detail":"lift3 :: forall a b c d f. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d) -\u003e f a -\u003e f b -\u003e f c -\u003e f d"},{"name":"lift4","module":"Control.Apply","detail":"lift4 :: forall a b c d e f. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e"},{"name":"lift5","module":"Control.Apply","detail":"lift5 :: forall a b c d e f g. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e g) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e -\u003e f g"},{"name":"forever","module":"Control.Apply","detail":"forever :: forall a b f. (Apply f) =\u003e f a -\u003e f b"},{"name":"(=\u003c\u003c)","module":"Control.Bind","detail":"(=\u003c\u003c) :: forall a b m. (Bind m) =\u003e (a -\u003e m b) -\u003e m a -\u003e m b"},{"name":"(\u003e=\u003e)","module":"Control.Bind","detail":"(\u003e=\u003e) :: forall a b c m. (Bind m) =\u003e (a -\u003e m b) -\u003e (b -\u003e m c) -\u003e a -\u003e m c"},{"name":"(\u003c=\u003c)","module":"Control.Bind","detail":"(\u003c=\u003c) :: forall a b c m. (Bind m) =\u003e (b -\u003e m c) -\u003e (a -\u003e m b) -\u003e a -\u003e m c"},{"name":"join","module":"Control.Bind","detail":"join :: forall a m. (Bind m) =\u003e m (m a) -\u003e m a"},{"name":"ifM","module":"Control.Bind","detail":"ifM :: forall a m. (Bind m) =\u003e m Boolean -\u003e m a -\u003e m a -\u003e m a"},{"name":"replicateM","module":"Control.Monad","detail":"replicateM :: forall m a. (Monad m) =\u003e Number -\u003e m a -\u003e m [a]"},{"name":"foldM","module":"Control.Monad","detail":"foldM :: forall m a b. (Monad m) =\u003e (a -\u003e b -\u003e m a) -\u003e a -\u003e [b] -\u003e m a"},{"name":"when","module":"Control.Monad","detail":"when :: forall m. (Monad m) =\u003e Boolean -\u003e m Unit -\u003e m Unit"},{"name":"unless","module":"Control.Monad","detail":"unless :: forall m. (Monad m) =\u003e Boolean -\u003e m Unit -\u003e m Unit"},{"name":"Either","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"name":"Left","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"name":"Right","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"name":"either","module":"Data.Either","detail":"either :: forall a b c. (a -\u003e c) -\u003e (b -\u003e c) -\u003e Either a b -\u003e c"},{"name":"isLeft","module":"Data.Either","detail":"isLeft :: forall a b. Either a b -\u003e Boolean"},{"name":"isRight","module":"Data.Either","detail":"isRight :: forall a b. Either a b -\u003e Boolean"},{"name":"functorEither","module":"Data.Either","detail":"instance functorEither :: Functor (Either a)"},{"name":"applyEither","module":"Data.Either","detail":"instance applyEither :: Apply (Either e)"},{"name":"applicativeEither","module":"Data.Either","detail":"instance applicativeEither :: Applicative (Either e)"},{"name":"bindEither","module":"Data.Either","detail":"instance bindEither :: Bind (Either e)"},{"name":"monadEither","module":"Data.Either","detail":"instance monadEither :: Monad (Either e)"},{"name":"showEither","module":"Data.Either","detail":"instance showEither :: (Show a, Show b) =\u003e Show (Either a b)"},{"name":"eqEither","module":"Data.Either","detail":"instance eqEither :: (Eq a, Eq b) =\u003e Eq (Either a b)"},{"name":"ordEither","module":"Data.Either","detail":"instance ordEither :: (Ord a, Ord b) =\u003e Ord (Either a b)"},{"name":"Enum","module":"Data.Enum","detail":"class Enum a where"},{"name":"toEnum","module":"Data.Enum","detail":"toEnum :: Number -\u003e Maybe a"},{"name":"fromEnum","module":"Data.Enum","detail":"fromEnum :: a -\u003e Number"},{"name":"succ","module":"Data.Enum","detail":"succ :: forall a. (Enum a) =\u003e a -\u003e Maybe a"},{"name":"pred","module":"Data.Enum","detail":"pred :: forall a. (Enum a) =\u003e a -\u003e Maybe a"},{"name":"Exception","module":"Control.Monad.Eff.Exception","detail":"data Exception :: !"},{"name":"Error","module":"Control.Monad.Eff.Exception","detail":"data Error :: *"},{"name":"showError","module":"Control.Monad.Eff.Exception","detail":"instance showError :: Show Error"},{"name":"showErrorImpl","module":"Control.Monad.Eff.Exception","detail":"showErrorImpl :: Error -\u003e String"},{"name":"error","module":"Control.Monad.Eff.Exception","detail":"error :: String -\u003e Error"},{"name":"message","module":"Control.Monad.Eff.Exception","detail":"message :: Error -\u003e String"},{"name":"throwException","module":"Control.Monad.Eff.Exception","detail":"throwException :: forall a eff. Error -\u003e Eff (err :: Exception | eff) a"},{"name":"catchException","module":"Control.Monad.Eff.Exception","detail":"catchException :: forall a eff. (Error -\u003e Eff eff a) -\u003e Eff (err :: Exception | eff) a -\u003e Eff eff a"},{"name":"Foldable","module":"Data.Foldable","detail":"class Foldable f where"},{"name":"foldr","module":"Data.Foldable","detail":"foldr :: forall a b. (a -\u003e b -\u003e b) -\u003e b -\u003e f a -\u003e b"},{"name":"foldl","module":"Data.Foldable","detail":"foldl :: forall a b. (b -\u003e a -\u003e b) -\u003e b -\u003e f a -\u003e b"},{"name":"foldMap","module":"Data.Foldable","detail":"foldMap :: forall a m. (Monoid m) =\u003e (a -\u003e m) -\u003e f a -\u003e m"},{"name":"foldableArray","module":"Data.Foldable","detail":"instance foldableArray :: Foldable Prim.Array"},{"name":"foldableEither","module":"Data.Foldable","detail":"instance foldableEither :: Foldable (Either a)"},{"name":"foldableMaybe","module":"Data.Foldable","detail":"instance foldableMaybe :: Foldable Maybe"},{"name":"foldableRef","module":"Data.Foldable","detail":"instance foldableRef :: Foldable Ref"},{"name":"foldableTuple","module":"Data.Foldable","detail":"instance foldableTuple :: Foldable (Tuple a)"},{"name":"fold","module":"Data.Foldable","detail":"fold :: forall f m. (Foldable f, Monoid m) =\u003e f m -\u003e m"},{"name":"traverse_","module":"Data.Foldable","detail":"traverse_ :: forall a b f m. (Applicative m, Foldable f) =\u003e (a -\u003e m b) -\u003e f a -\u003e m Unit"},{"name":"for_","module":"Data.Foldable","detail":"for_ :: forall a b f m. (Applicative m, Foldable f) =\u003e f a -\u003e (a -\u003e m b) -\u003e m Unit"},{"name":"sequence_","module":"Data.Foldable","detail":"sequence_ :: forall a f m. (Applicative m, Foldable f) =\u003e f (m a) -\u003e m Unit"},{"name":"mconcat","module":"Data.Foldable","detail":"mconcat :: forall f m. (Foldable f, Monoid m) =\u003e f m -\u003e m"},{"name":"and","module":"Data.Foldable","detail":"and :: forall f. (Foldable f) =\u003e f Boolean -\u003e Boolean"},{"name":"or","module":"Data.Foldable","detail":"or :: forall f. (Foldable f) =\u003e f Boolean -\u003e Boolean"},{"name":"any","module":"Data.Foldable","detail":"any :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Boolean"},{"name":"all","module":"Data.Foldable","detail":"all :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Boolean"},{"name":"sum","module":"Data.Foldable","detail":"sum :: forall f. (Foldable f) =\u003e f Number -\u003e Number"},{"name":"product","module":"Data.Foldable","detail":"product :: forall f. (Foldable f) =\u003e f Number -\u003e Number"},{"name":"elem","module":"Data.Foldable","detail":"elem :: forall a f. (Eq a, Foldable f) =\u003e a -\u003e f a -\u003e Boolean"},{"name":"notElem","module":"Data.Foldable","detail":"notElem :: forall a f. (Eq a, Foldable f) =\u003e a -\u003e f a -\u003e Boolean"},{"name":"find","module":"Data.Foldable","detail":"find :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Maybe a"},{"name":"lookup","module":"Data.Foldable","detail":"lookup :: forall a b f. (Eq a, Foldable f) =\u003e a -\u003e f (Tuple a b) -\u003e Maybe b"},{"name":"foldrArray","module":"Data.Foldable","detail":"foldrArray :: forall a b. (a -\u003e b -\u003e b) -\u003e b -\u003e [a] -\u003e b"},{"name":"foldlArray","module":"Data.Foldable","detail":"foldlArray :: forall a b. (b -\u003e a -\u003e b) -\u003e b -\u003e [a] -\u003e b"},{"name":"Traversable","module":"Data.Traversable","detail":"class (Functor t, Foldable t) \u003c= Traversable t where"},{"name":"traverse","module":"Data.Traversable","detail":"traverse :: forall a b m. (Applicative m) =\u003e (a -\u003e m b) -\u003e t a -\u003e m (t b)"},{"name":"sequence","module":"Data.Traversable","detail":"sequence :: forall a m. (Applicative m) =\u003e t (m a) -\u003e m (t a)"},{"name":"traversableArray","module":"Data.Traversable","detail":"instance traversableArray :: Traversable Prim.Array"},{"name":"traversableEither","module":"Data.Traversable","detail":"instance traversableEither :: Traversable (Either a)"},{"name":"traversableRef","module":"Data.Traversable","detail":"instance traversableRef :: Traversable Ref"},{"name":"traversableMaybe","module":"Data.Traversable","detail":"instance traversableMaybe :: Traversable Maybe"},{"name":"traversableTuple","module":"Data.Traversable","detail":"instance traversableTuple :: Traversable (Tuple a)"},{"name":"for","module":"Data.Traversable","detail":"for :: forall a b m t. (Applicative m, Traversable t) =\u003e t a -\u003e (a -\u003e m b) -\u003e m (t b)"},{"name":"zipWithA","module":"Data.Traversable","detail":"zipWithA :: forall m a b c. (Applicative m) =\u003e (a -\u003e b -\u003e m c) -\u003e [a] -\u003e [b] -\u003e m [c]"},{"name":"Foreign","module":"Data.Foreign","detail":"data Foreign :: *"},{"name":"fromStringImpl","module":"Data.Foreign","detail":"fromStringImpl :: Fn3 (String -\u003e Either String Foreign) (Foreign -\u003e Either String Foreign) String (Either String Foreign)"},{"name":"fromString","module":"Data.Foreign","detail":"fromString :: String -\u003e Either String Foreign"},{"name":"readPrimTypeImpl","module":"Data.Foreign","detail":"readPrimTypeImpl :: forall a. Fn4 (String -\u003e Either String a) (a -\u003e Either String a) String Foreign (Either String a)"},{"name":"readPrimType","module":"Data.Foreign","detail":"readPrimType :: forall a. String -\u003e Foreign -\u003e Either String a"},{"name":"readMaybeImpl","module":"Data.Foreign","detail":"readMaybeImpl :: forall a. Fn3 (Maybe Foreign) (Foreign -\u003e Maybe Foreign) Foreign (Maybe Foreign)"},{"name":"readMaybeImpl'","module":"Data.Foreign","detail":"readMaybeImpl' :: Foreign -\u003e Maybe Foreign"},{"name":"readPropImpl","module":"Data.Foreign","detail":"readPropImpl :: forall a. Fn2 a Foreign Foreign"},{"name":"readPropImpl'","module":"Data.Foreign","detail":"readPropImpl' :: String -\u003e Foreign -\u003e Foreign"},{"name":"readIndexImpl'","module":"Data.Foreign","detail":"readIndexImpl' :: Number -\u003e Foreign -\u003e Foreign"},{"name":"readKeysImpl","module":"Data.Foreign","detail":"readKeysImpl :: forall a. Fn4 (String -\u003e Either String a) (a -\u003e Either String a) String Foreign (Either String [String])"},{"name":"readKeysImpl'","module":"Data.Foreign","detail":"readKeysImpl' :: String -\u003e Foreign -\u003e Either String [String]"},{"name":"showForeignImpl","module":"Data.Foreign","detail":"showForeignImpl :: Foreign -\u003e String"},{"name":"showForeign","module":"Data.Foreign","detail":"instance showForeign :: Prelude.Show Foreign"},{"name":"ForeignParser","module":"Data.Foreign","detail":"data ForeignParser a = ForeignParser (Foreign -\u003e Either String a)"},{"name":"ForeignParser","module":"Data.Foreign","detail":"data ForeignParser a = ForeignParser (Foreign -\u003e Either String a)"},{"name":"parseForeign","module":"Data.Foreign","detail":"parseForeign :: forall a. ForeignParser a -\u003e Foreign -\u003e Either String a"},{"name":"parseJSON","module":"Data.Foreign","detail":"parseJSON :: forall a. (ReadForeign a) =\u003e String -\u003e Either String a"},{"name":"functorForeignParser","module":"Data.Foreign","detail":"instance functorForeignParser :: Prelude.Functor ForeignParser"},{"name":"bindForeignParser","module":"Data.Foreign","detail":"instance bindForeignParser :: Prelude.Bind ForeignParser"},{"name":"applyForeignParser","module":"Data.Foreign","detail":"instance applyForeignParser :: Prelude.Apply ForeignParser"},{"name":"applicativeForeignParser","module":"Data.Foreign","detail":"instance applicativeForeignParser :: Prelude.Applicative ForeignParser"},{"name":"monadForeignParser","module":"Data.Foreign","detail":"instance monadForeignParser :: Prelude.Monad ForeignParser"},{"name":"ReadForeign","module":"Data.Foreign","detail":"class ReadForeign a where"},{"name":"read","module":"Data.Foreign","detail":"read :: ForeignParser a"},{"name":"readString","module":"Data.Foreign","detail":"instance readString :: ReadForeign String"},{"name":"readNumber","module":"Data.Foreign","detail":"instance readNumber :: ReadForeign Number"},{"name":"readBoolean","module":"Data.Foreign","detail":"instance readBoolean :: ReadForeign Boolean"},{"name":"readError","module":"Data.Foreign","detail":"instance readError :: ReadForeign Error"},{"name":"readArray","module":"Data.Foreign","detail":"instance readArray :: (ReadForeign a) =\u003e ReadForeign [a]"},{"name":"readMaybe","module":"Data.Foreign","detail":"instance readMaybe :: (ReadForeign a) =\u003e ReadForeign (Maybe a)"},{"name":"prop","module":"Data.Foreign","detail":"prop :: forall a. (ReadForeign a) =\u003e String -\u003e ForeignParser a"},{"name":"index","module":"Data.Foreign","detail":"index :: forall a. (ReadForeign a) =\u003e Number -\u003e ForeignParser a"},{"name":"keys","module":"Data.Foreign","detail":"keys :: String -\u003e ForeignParser [String]"},{"name":"nan","module":"Global","detail":"nan :: Number"},{"name":"isNaN","module":"Global","detail":"isNaN :: Number -\u003e Boolean"},{"name":"infinity","module":"Global","detail":"infinity :: Number"},{"name":"isFinite","module":"Global","detail":"isFinite :: Number -\u003e Boolean"},{"name":"readInt","module":"Global","detail":"readInt :: Number -\u003e String -\u003e Number"},{"name":"readFloat","module":"Global","detail":"readFloat :: String -\u003e Number"},{"name":"Error","module":"Global","detail":"data Error :: *"},{"name":"showError","module":"Global","detail":"instance showError :: Show Error"},{"name":"showErrorImpl","module":"Global","detail":"showErrorImpl :: Error -\u003e String"},{"name":"error","module":"Global","detail":"error :: String -\u003e Error"},{"name":"Radians","module":"Math","detail":"type Radians  = Number"},{"name":"abs","module":"Math","detail":"abs :: Number -\u003e Number"},{"name":"acos","module":"Math","detail":"acos :: Number -\u003e Radians"},{"name":"asin","module":"Math","detail":"asin :: Number -\u003e Radians"},{"name":"atan","module":"Math","detail":"atan :: Number -\u003e Radians"},{"name":"atan2","module":"Math","detail":"atan2 :: Number -\u003e Number -\u003e Radians"},{"name":"ceil","module":"Math","detail":"ceil :: Number -\u003e Number"},{"name":"cos","module":"Math","detail":"cos :: Radians -\u003e Number"},{"name":"exp","module":"Math","detail":"exp :: Number -\u003e Number"},{"name":"floor","module":"Math","detail":"floor :: Number -\u003e Number"},{"name":"log","module":"Math","detail":"log :: Number -\u003e Number"},{"name":"max","module":"Math","detail":"max :: Number -\u003e Number -\u003e Number"},{"name":"min","module":"Math","detail":"min :: Number -\u003e Number -\u003e Number"},{"name":"pow","module":"Math","detail":"pow :: Number -\u003e Number -\u003e Number"},{"name":"round","module":"Math","detail":"round :: Number -\u003e Number"},{"name":"sin","module":"Math","detail":"sin :: Radians -\u003e Number"},{"name":"sqrt","module":"Math","detail":"sqrt :: Number -\u003e Number"},{"name":"tan","module":"Math","detail":"tan :: Radians -\u003e Number"},{"name":"e","module":"Math","detail":"e :: Number"},{"name":"ln2","module":"Math","detail":"ln2 :: Number"},{"name":"ln10","module":"Math","detail":"ln10 :: Number"},{"name":"log2e","module":"Math","detail":"log2e :: Number"},{"name":"log10e","module":"Math","detail":"log10e :: Number"},{"name":"pi","module":"Math","detail":"pi :: Number"},{"name":"sqrt1_2","module":"Math","detail":"sqrt1_2 :: Number"},{"name":"sqrt2","module":"Math","detail":"sqrt2 :: Number"},{"name":"fromJust","module":"Data.Maybe.Unsafe","detail":"fromJust :: forall a. Maybe a -\u003e a"},{"name":"Maybe","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"name":"Nothing","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"name":"Just","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"name":"maybe","module":"Data.Maybe","detail":"maybe :: forall a b. b -\u003e (a -\u003e b) -\u003e Maybe a -\u003e b"},{"name":"fromMaybe","module":"Data.Maybe","detail":"fromMaybe :: forall a. a -\u003e Maybe a -\u003e a"},{"name":"isJust","module":"Data.Maybe","detail":"isJust :: forall a. Maybe a -\u003e Boolean"},{"name":"isNothing","module":"Data.Maybe","detail":"isNothing :: forall a. Maybe a -\u003e Boolean"},{"name":"functorMaybe","module":"Data.Maybe","detail":"instance functorMaybe :: Functor Maybe"},{"name":"applyMaybe","module":"Data.Maybe","detail":"instance applyMaybe :: Apply Maybe"},{"name":"applicativeMaybe","module":"Data.Maybe","detail":"instance applicativeMaybe :: Applicative Maybe"},{"name":"alternativeMaybe","module":"Data.Maybe","detail":"instance alternativeMaybe :: Alternative Maybe"},{"name":"bindMaybe","module":"Data.Maybe","detail":"instance bindMaybe :: Bind Maybe"},{"name":"monadMaybe","module":"Data.Maybe","detail":"instance monadMaybe :: Monad Maybe"},{"name":"showMaybe","module":"Data.Maybe","detail":"instance showMaybe :: (Show a) =\u003e Show (Maybe a)"},{"name":"eqMaybe","module":"Data.Maybe","detail":"instance eqMaybe :: (Eq a) =\u003e Eq (Maybe a)"},{"name":"ordMaybe","module":"Data.Maybe","detail":"instance ordMaybe :: (Ord a) =\u003e Ord (Maybe a)"},{"name":"All","module":"Data.Monoid.All","detail":"data All = All Boolean"},{"name":"All","module":"Data.Monoid.All","detail":"data All = All Boolean"},{"name":"runAll","module":"Data.Monoid.All","detail":"runAll :: All -\u003e Boolean"},{"name":"eqAll","module":"Data.Monoid.All","detail":"instance eqAll :: Eq All"},{"name":"showAll","module":"Data.Monoid.All","detail":"instance showAll :: Show All"},{"name":"semigroupAll","module":"Data.Monoid.All","detail":"instance semigroupAll :: Semigroup All"},{"name":"monoidAll","module":"Data.Monoid.All","detail":"instance monoidAll :: Monoid All"},{"name":"Any","module":"Data.Monoid.Any","detail":"data Any = Any Boolean"},{"name":"Any","module":"Data.Monoid.Any","detail":"data Any = Any Boolean"},{"name":"runAny","module":"Data.Monoid.Any","detail":"runAny :: Any -\u003e Boolean"},{"name":"eqAny","module":"Data.Monoid.Any","detail":"instance eqAny :: Eq Any"},{"name":"showAny","module":"Data.Monoid.Any","detail":"instance showAny :: Show Any"},{"name":"semigroupAny","module":"Data.Monoid.Any","detail":"instance semigroupAny :: Semigroup Any"},{"name":"monoidAny","module":"Data.Monoid.Any","detail":"instance monoidAny :: Monoid Any"},{"name":"Dual","module":"Data.Monoid.Dual","detail":"data Dual a = Dual a"},{"name":"Dual","module":"Data.Monoid.Dual","detail":"data Dual a = Dual a"},{"name":"runDual","module":"Data.Monoid.Dual","detail":"runDual :: forall a. Dual a -\u003e a"},{"name":"eqDual","module":"Data.Monoid.Dual","detail":"instance eqDual :: (Eq a) =\u003e Eq (Dual a)"},{"name":"ordDual","module":"Data.Monoid.Dual","detail":"instance ordDual :: (Ord a) =\u003e Ord (Dual a)"},{"name":"showDual","module":"Data.Monoid.Dual","detail":"instance showDual :: (Show a) =\u003e Show (Dual a)"},{"name":"semigroupDual","module":"Data.Monoid.Dual","detail":"instance semigroupDual :: (Semigroup a) =\u003e Semigroup (Dual a)"},{"name":"monoidDual","module":"Data.Monoid.Dual","detail":"instance monoidDual :: (Monoid a) =\u003e Monoid (Dual a)"},{"name":"Endo","module":"Data.Monoid.Endo","detail":"data Endo a = Endo (a -\u003e a)"},{"name":"Endo","module":"Data.Monoid.Endo","detail":"data Endo a = Endo (a -\u003e a)"},{"name":"runEndo","module":"Data.Monoid.Endo","detail":"runEndo :: forall a. Endo a -\u003e a -\u003e a"},{"name":"semigroupEndo","module":"Data.Monoid.Endo","detail":"instance semigroupEndo :: Semigroup (Endo a)"},{"name":"monoidEndo","module":"Data.Monoid.Endo","detail":"instance monoidEndo :: Monoid (Endo a)"},{"name":"First","module":"Data.Monoid.First","detail":"data First a = First (Maybe a)"},{"name":"First","module":"Data.Monoid.First","detail":"data First a = First (Maybe a)"},{"name":"runFirst","module":"Data.Monoid.First","detail":"runFirst :: forall a. First a -\u003e Maybe a"},{"name":"eqFirst","module":"Data.Monoid.First","detail":"instance eqFirst :: (Eq a) =\u003e Eq (First a)"},{"name":"ordFirst","module":"Data.Monoid.First","detail":"instance ordFirst :: (Ord a) =\u003e Ord (First a)"},{"name":"showFirst","module":"Data.Monoid.First","detail":"instance showFirst :: (Show a) =\u003e Show (First a)"},{"name":"semigroupFirst","module":"Data.Monoid.First","detail":"instance semigroupFirst :: Semigroup (First a)"},{"name":"monoidFirst","module":"Data.Monoid.First","detail":"instance monoidFirst :: Monoid (First a)"},{"name":"Last","module":"Data.Monoid.Last","detail":"data Last a = Last (Maybe a)"},{"name":"Last","module":"Data.Monoid.Last","detail":"data Last a = Last (Maybe a)"},{"name":"runLast","module":"Data.Monoid.Last","detail":"runLast :: forall a. Last a -\u003e Maybe a"},{"name":"eqLast","module":"Data.Monoid.Last","detail":"instance eqLast :: (Eq a) =\u003e Eq (Last a)"},{"name":"ordLast","module":"Data.Monoid.Last","detail":"instance ordLast :: (Ord a) =\u003e Ord (Last a)"},{"name":"showLast","module":"Data.Monoid.Last","detail":"instance showLast :: (Show a) =\u003e Show (Last a)"},{"name":"semigroupLast","module":"Data.Monoid.Last","detail":"instance semigroupLast :: Semigroup (Last a)"},{"name":"monoidLast","module":"Data.Monoid.Last","detail":"instance monoidLast :: Monoid (Last a)"},{"name":"Product","module":"Data.Monoid.Product","detail":"data Product = Product Number"},{"name":"Product","module":"Data.Monoid.Product","detail":"data Product = Product Number"},{"name":"runProduct","module":"Data.Monoid.Product","detail":"runProduct :: Product -\u003e Number"},{"name":"eqProduct","module":"Data.Monoid.Product","detail":"instance eqProduct :: Eq Product"},{"name":"ordProduct","module":"Data.Monoid.Product","detail":"instance ordProduct :: Ord Product"},{"name":"showProduct","module":"Data.Monoid.Product","detail":"instance showProduct :: Show Product"},{"name":"semigroupProduct","module":"Data.Monoid.Product","detail":"instance semigroupProduct :: Semigroup Product"},{"name":"monoidProduct","module":"Data.Monoid.Product","detail":"instance monoidProduct :: Monoid Product"},{"name":"Sum","module":"Data.Monoid.Sum","detail":"data Sum = Sum Number"},{"name":"Sum","module":"Data.Monoid.Sum","detail":"data Sum = Sum Number"},{"name":"runSum","module":"Data.Monoid.Sum","detail":"runSum :: Sum -\u003e Number"},{"name":"eqSum","module":"Data.Monoid.Sum","detail":"instance eqSum :: Eq Sum"},{"name":"ordSum","module":"Data.Monoid.Sum","detail":"instance ordSum :: Ord Sum"},{"name":"showSum","module":"Data.Monoid.Sum","detail":"instance showSum :: Show Sum"},{"name":"semigroupSum","module":"Data.Monoid.Sum","detail":"instance semigroupSum :: Semigroup Sum"},{"name":"monoidSum","module":"Data.Monoid.Sum","detail":"instance monoidSum :: Monoid Sum"},{"name":"Monoid","module":"Data.Monoid","detail":"class (Semigroup m) \u003c= Monoid m where"},{"name":"mempty","module":"Data.Monoid","detail":"mempty :: m"},{"name":"monoidString","module":"Data.Monoid","detail":"instance monoidString :: Monoid String"},{"name":"monoidArray","module":"Data.Monoid","detail":"instance monoidArray :: Monoid [a]"},{"name":"monoidUnit","module":"Data.Monoid","detail":"instance monoidUnit :: Monoid Unit"},{"name":"testConst","module":"PreludeTests","detail":"testConst :: Number -\u003e Number -\u003e Number -\u003e Boolean"},{"name":"mkMessage","module":"PreludeTests","detail":"mkMessage :: (Number -\u003e Number) -\u003e String"},{"name":"LCG","module":"Test.QuickCheck.LCG","detail":"type LCG  = Number"},{"name":"Gen","module":"Test.QuickCheck.LCG","detail":"data Gen a = Gen (LCG -\u003e { newSeed :: LCG, value :: a })"},{"name":"Gen","module":"Test.QuickCheck.LCG","detail":"data Gen a = Gen (LCG -\u003e { newSeed :: LCG, value :: a })"},{"name":"runGen","module":"Test.QuickCheck.LCG","detail":"runGen :: forall a. Gen a -\u003e LCG -\u003e { newSeed :: LCG, value :: a }"},{"name":"evalGen","module":"Test.QuickCheck.LCG","detail":"evalGen :: forall a. Gen a -\u003e LCG -\u003e a"},{"name":"randomSeed","module":"Test.QuickCheck.LCG","detail":"randomSeed :: forall eff. Eff (random :: Random | eff) Number"},{"name":"lcgM","module":"Test.QuickCheck.LCG","detail":"lcgM :: Number"},{"name":"lcgC","module":"Test.QuickCheck.LCG","detail":"lcgC :: Number"},{"name":"lcgN","module":"Test.QuickCheck.LCG","detail":"lcgN :: Number"},{"name":"lcgNext","module":"Test.QuickCheck.LCG","detail":"lcgNext :: Number -\u003e Number"},{"name":"lcgStep","module":"Test.QuickCheck.LCG","detail":"lcgStep :: Gen Number"},{"name":"uniform","module":"Test.QuickCheck.LCG","detail":"uniform :: Gen Number"},{"name":"float32ToInt32","module":"Test.QuickCheck.LCG","detail":"float32ToInt32 :: Number -\u003e Number"},{"name":"perturbGen","module":"Test.QuickCheck.LCG","detail":"perturbGen :: forall a. Number -\u003e Gen a -\u003e Gen a"},{"name":"functorGen","module":"Test.QuickCheck.LCG","detail":"instance functorGen :: Functor Gen"},{"name":"applyGen","module":"Test.QuickCheck.LCG","detail":"instance applyGen :: Apply Gen"},{"name":"applicativeGen","module":"Test.QuickCheck.LCG","detail":"instance applicativeGen :: Applicative Gen"},{"name":"bindGen","module":"Test.QuickCheck.LCG","detail":"instance bindGen :: Bind Gen"},{"name":"monadGen","module":"Test.QuickCheck.LCG","detail":"instance monadGen :: Monad Gen"},{"name":"Arbitrary","module":"Test.QuickCheck","detail":"class Arbitrary t where"},{"name":"arbitrary","module":"Test.QuickCheck","detail":"arbitrary :: Gen t"},{"name":"CoArbitrary","module":"Test.QuickCheck","detail":"class CoArbitrary t where"},{"name":"coarbitrary","module":"Test.QuickCheck","detail":"coarbitrary :: forall r. t -\u003e Gen r -\u003e Gen r"},{"name":"Result","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"name":"Success","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"name":"Failed","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"name":"showResult","module":"Test.QuickCheck","detail":"instance showResult :: Show Result"},{"name":"(\u003c?\u003e)","module":"Test.QuickCheck","detail":"(\u003c?\u003e) :: Boolean -\u003e String -\u003e Result"},{"name":"arbNumber","module":"Test.QuickCheck","detail":"instance arbNumber :: Arbitrary Number"},{"name":"coarbNumber","module":"Test.QuickCheck","detail":"instance coarbNumber :: CoArbitrary Number"},{"name":"arbBoolean","module":"Test.QuickCheck","detail":"instance arbBoolean :: Arbitrary Boolean"},{"name":"coarbBoolean","module":"Test.QuickCheck","detail":"instance coarbBoolean :: CoArbitrary Boolean"},{"name":"arbFunction","module":"Test.QuickCheck","detail":"instance arbFunction :: (CoArbitrary a, Arbitrary b) =\u003e Arbitrary (a -\u003e b)"},{"name":"repeatable","module":"Test.QuickCheck","detail":"repeatable :: forall a b. (a -\u003e Gen b) -\u003e Gen (a -\u003e b)"},{"name":"coarbFunction","module":"Test.QuickCheck","detail":"instance coarbFunction :: (Arbitrary a, CoArbitrary b) =\u003e CoArbitrary (a -\u003e b)"},{"name":"arbArray","module":"Test.QuickCheck","detail":"instance arbArray :: (Arbitrary a) =\u003e Arbitrary [a]"},{"name":"coarbArray","module":"Test.QuickCheck","detail":"instance coarbArray :: (CoArbitrary a) =\u003e CoArbitrary [a]"},{"name":"Testable","module":"Test.QuickCheck","detail":"class Testable prop where"},{"name":"test","module":"Test.QuickCheck","detail":"test :: prop -\u003e Gen Result"},{"name":"testableResult","module":"Test.QuickCheck","detail":"instance testableResult :: Testable Result"},{"name":"testableBoolean","module":"Test.QuickCheck","detail":"instance testableBoolean :: Testable Boolean"},{"name":"testableFunction","module":"Test.QuickCheck","detail":"instance testableFunction :: (Arbitrary t, Testable prop) =\u003e Testable (t -\u003e prop)"},{"name":"quickCheckPure","module":"Test.QuickCheck","detail":"quickCheckPure :: forall prop. (Testable prop) =\u003e Number -\u003e Number -\u003e prop -\u003e [Result]"},{"name":"QC","module":"Test.QuickCheck","detail":"type QC a = forall eff. Eff (err :: Exception, random :: Random, trace :: Trace | eff) a"},{"name":"quickCheck'","module":"Test.QuickCheck","detail":"quickCheck' :: forall prop. (Testable prop) =\u003e Number -\u003e prop -\u003e QC Unit"},{"name":"quickCheck","module":"Test.QuickCheck","detail":"quickCheck :: forall prop. (Testable prop) =\u003e prop -\u003e QC Unit"},{"name":"Random","module":"Control.Monad.Eff.Random","detail":"data Random :: !"},{"name":"random","module":"Control.Monad.Eff.Random","detail":"random :: forall e. Eff (random :: Random | e) Number"},{"name":"unsafeRunRef","module":"Control.Monad.Eff.Ref.Unsafe","detail":"unsafeRunRef :: forall eff a. Eff (ref :: Ref | eff) a -\u003e Eff eff a"},{"name":"Ref","module":"Control.Monad.Eff.Ref","detail":"data Ref :: !"},{"name":"RefVal","module":"Control.Monad.Eff.Ref","detail":"data RefVal :: * -\u003e *"},{"name":"newRef","module":"Control.Monad.Eff.Ref","detail":"newRef :: forall s r. s -\u003e Eff (ref :: Ref | r) (RefVal s)"},{"name":"readRef","module":"Control.Monad.Eff.Ref","detail":"readRef :: forall s r. RefVal s -\u003e Eff (ref :: Ref | r) s"},{"name":"modifyRef","module":"Control.Monad.Eff.Ref","detail":"modifyRef :: forall s r. RefVal s -\u003e (s -\u003e s) -\u003e Eff (ref :: Ref | r) Unit"},{"name":"writeRef","module":"Control.Monad.Eff.Ref","detail":"writeRef :: forall s r. RefVal s -\u003e s -\u003e Eff (ref :: Ref | r) Unit"},{"name":"Regex","module":"Data.String.Regex","detail":"data Regex :: *"},{"name":"showRegex'","module":"Data.String.Regex","detail":"showRegex' :: Regex -\u003e String"},{"name":"showRegex","module":"Data.String.Regex","detail":"instance showRegex :: Show Regex"},{"name":"RegexFlags","module":"Data.String.Regex","detail":"type RegexFlags  = { unicode :: Boolean, sticky :: Boolean, multiline :: Boolean, ignoreCase :: Boolean, global :: Boolean }"},{"name":"regex'","module":"Data.String.Regex","detail":"regex' :: String -\u003e String -\u003e Regex"},{"name":"regex","module":"Data.String.Regex","detail":"regex :: String -\u003e RegexFlags -\u003e Regex"},{"name":"source","module":"Data.String.Regex","detail":"source :: Regex -\u003e String"},{"name":"flags","module":"Data.String.Regex","detail":"flags :: Regex -\u003e RegexFlags"},{"name":"renderFlags","module":"Data.String.Regex","detail":"renderFlags :: RegexFlags -\u003e String"},{"name":"parseFlags","module":"Data.String.Regex","detail":"parseFlags :: String -\u003e RegexFlags"},{"name":"test","module":"Data.String.Regex","detail":"test :: Regex -\u003e String -\u003e Boolean"},{"name":"match","module":"Data.String.Regex","detail":"match :: Regex -\u003e String -\u003e [String]"},{"name":"replace","module":"Data.String.Regex","detail":"replace :: Regex -\u003e String -\u003e String -\u003e String"},{"name":"replace'","module":"Data.String.Regex","detail":"replace' :: Regex -\u003e (String -\u003e [String] -\u003e String) -\u003e String -\u003e String"},{"name":"search","module":"Data.String.Regex","detail":"search :: Regex -\u003e String -\u003e Number"},{"name":"charAt","module":"Data.String","detail":"charAt :: Number -\u003e String -\u003e String"},{"name":"charCodeAt","module":"Data.String","detail":"charCodeAt :: Number -\u003e String -\u003e Number"},{"name":"fromCharCode","module":"Data.String","detail":"fromCharCode :: Number -\u003e String"},{"name":"indexOf","module":"Data.String","detail":"indexOf :: String -\u003e String -\u003e Number"},{"name":"indexOf'","module":"Data.String","detail":"indexOf' :: String -\u003e Number -\u003e String -\u003e Number"},{"name":"lastIndexOf","module":"Data.String","detail":"lastIndexOf :: String -\u003e String -\u003e Number"},{"name":"lastIndexOf'","module":"Data.String","detail":"lastIndexOf' :: String -\u003e Number -\u003e String -\u003e Number"},{"name":"length","module":"Data.String","detail":"length :: String -\u003e Number"},{"name":"localeCompare","module":"Data.String","detail":"localeCompare :: String -\u003e String -\u003e Number"},{"name":"replace","module":"Data.String","detail":"replace :: String -\u003e String -\u003e String -\u003e String"},{"name":"take","module":"Data.String","detail":"take :: Number -\u003e String -\u003e String"},{"name":"drop","module":"Data.String","detail":"drop :: Number -\u003e String -\u003e String"},{"name":"split","module":"Data.String","detail":"split :: String -\u003e String -\u003e [String]"},{"name":"toLower","module":"Data.String","detail":"toLower :: String -\u003e String"},{"name":"toUpper","module":"Data.String","detail":"toUpper :: String -\u003e String"},{"name":"trim","module":"Data.String","detail":"trim :: String -\u003e String"},{"name":"joinWith","module":"Data.String","detail":"joinWith :: String -\u003e [String] -\u003e String"},{"name":"Tuple","module":"Data.Tuple","detail":"data Tuple a b = Tuple a b"},{"name":"Tuple","module":"Data.Tuple","detail":"data Tuple a b = Tuple a b"},{"name":"showTuple","module":"Data.Tuple","detail":"instance showTuple :: (Show a, Show b) =\u003e Show (Tuple a b)"},{"name":"eqTuple","module":"Data.Tuple","detail":"instance eqTuple :: (Eq a, Eq b) =\u003e Eq (Tuple a b)"},{"name":"ordTuple","module":"Data.Tuple","detail":"instance ordTuple :: (Ord a, Ord b) =\u003e Ord (Tuple a b)"},{"name":"functorTuple","module":"Data.Tuple","detail":"instance functorTuple :: Functor (Tuple a)"},{"name":"applyTuple","module":"Data.Tuple","detail":"instance applyTuple :: (Semigroup a) =\u003e Apply (Tuple a)"},{"name":"applicativeTuple","module":"Data.Tuple","detail":"instance applicativeTuple :: (Monoid a) =\u003e Applicative (Tuple a)"},{"name":"bindTuple","module":"Data.Tuple","detail":"instance bindTuple :: (Semigroup a) =\u003e Bind (Tuple a)"},{"name":"monadTuple","module":"Data.Tuple","detail":"instance monadTuple :: (Monoid a) =\u003e Monad (Tuple a)"},{"name":"fst","module":"Data.Tuple","detail":"fst :: forall a b. Tuple a b -\u003e a"},{"name":"snd","module":"Data.Tuple","detail":"snd :: forall a b. Tuple a b -\u003e b"},{"name":"curry","module":"Data.Tuple","detail":"curry :: forall a b c. (Tuple a b -\u003e c) -\u003e a -\u003e b -\u003e c"},{"name":"uncurry","module":"Data.Tuple","detail":"uncurry :: forall a b c. (a -\u003e b -\u003e c) -\u003e Tuple a b -\u003e c"},{"name":"zip","module":"Data.Tuple","detail":"zip :: forall a b. [a] -\u003e [b] -\u003e [Tuple a b]"},{"name":"unzip","module":"Data.Tuple","detail":"unzip :: forall a b. [Tuple a b] -\u003e Tuple [a] [b]"},{"name":"swap","module":"Data.Tuple","detail":"swap :: forall a b. Tuple a b -\u003e Tuple b a"},{"name":"V","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"name":"Invalid","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"name":"Valid","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"name":"invalid","module":"Data.Validation","detail":"invalid :: forall err result. err -\u003e V err result"},{"name":"runV","module":"Data.Validation","detail":"runV :: forall err result r. (err -\u003e r) -\u003e (result -\u003e r) -\u003e V err result -\u003e r"},{"name":"isValid","module":"Data.Validation","detail":"isValid :: forall err result r. V err result -\u003e Boolean"},{"name":"showV","module":"Data.Validation","detail":"instance showV :: (Show err, Show result) =\u003e Show (V err result)"},{"name":"functorV","module":"Data.Validation","detail":"instance functorV :: Functor (V err)"},{"name":"applyV","module":"Data.Validation","detail":"instance applyV :: (Semigroup err) =\u003e Apply (V err)"},{"name":"applicativeV","module":"Data.Validation","detail":"instance applicativeV :: (Semigroup err) =\u003e Applicative (V err)"}]