{"entries":[{"name":"otherwise","module":"Prelude","detail":"otherwise :: Boolean"},{"name":"flip","module":"Prelude","detail":"flip :: forall a b c. (a -\u003e b -\u003e c) -\u003e b -\u003e a -\u003e c"},{"name":"const","module":"Prelude","detail":"const :: forall a b. a -\u003e b -\u003e a"},{"name":"asTypeOf","module":"Prelude","detail":"asTypeOf :: forall a. a -\u003e a -\u003e a"},{"name":"Semigroupoid","module":"Prelude","detail":"class Semigroupoid a where"},{"name":"(\u003c\u003c\u003c)","module":"Prelude","detail":"(\u003c\u003c\u003c) :: forall b c d. a c d -\u003e a b c -\u003e a b d"},{"name":"semigroupoidArr","module":"Prelude","detail":"instance semigroupoidArr :: Semigroupoid Prim.Function"},{"name":"(\u003e\u003e\u003e)","module":"Prelude","detail":"(\u003e\u003e\u003e) :: forall a b c d. (Semigroupoid a) =\u003e a b c -\u003e a c d -\u003e a b d"},{"name":"Category","module":"Prelude","detail":"class (Semigroupoid a) \u003c= Category a where"},{"name":"id","module":"Prelude","detail":"id :: forall t. a t t"},{"name":"categoryArr","module":"Prelude","detail":"instance categoryArr :: Category Prim.Function"},{"name":"($)","module":"Prelude","detail":"($) :: forall a b. (a -\u003e b) -\u003e a -\u003e b"},{"name":"(#)","module":"Prelude","detail":"(#) :: forall a b. a -\u003e (a -\u003e b) -\u003e b"},{"name":"(:)","module":"Prelude","detail":"(:) :: forall a. a -\u003e [a] -\u003e [a]"},{"name":"cons","module":"Prelude","detail":"cons :: forall a. a -\u003e [a] -\u003e [a]"},{"name":"Show","module":"Prelude","detail":"class Show a where"},{"name":"show","module":"Prelude","detail":"show :: a -\u003e String"},{"name":"showStringImpl","module":"Prelude","detail":"showStringImpl :: String -\u003e String"},{"name":"showUnit","module":"Prelude","detail":"instance showUnit :: Show Unit"},{"name":"showString","module":"Prelude","detail":"instance showString :: Show String"},{"name":"showBoolean","module":"Prelude","detail":"instance showBoolean :: Show Boolean"},{"name":"showNumberImpl","module":"Prelude","detail":"showNumberImpl :: Number -\u003e String"},{"name":"showNumber","module":"Prelude","detail":"instance showNumber :: Show Number"},{"name":"showArrayImpl","module":"Prelude","detail":"showArrayImpl :: forall a. (a -\u003e String) -\u003e [a] -\u003e String"},{"name":"showArray","module":"Prelude","detail":"instance showArray :: (Show a) =\u003e Show [a]"},{"name":"Functor","module":"Prelude","detail":"class Functor f where"},{"name":"(\u003c$\u003e)","module":"Prelude","detail":"(\u003c$\u003e) :: forall a b. (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"(\u003c#\u003e)","module":"Prelude","detail":"(\u003c#\u003e) :: forall f a b. (Functor f) =\u003e f a -\u003e (a -\u003e b) -\u003e f b"},{"name":"void","module":"Prelude","detail":"void :: forall f a. (Functor f) =\u003e f a -\u003e f Unit"},{"name":"Apply","module":"Prelude","detail":"class (Functor f) \u003c= Apply f where"},{"name":"(\u003c*\u003e)","module":"Prelude","detail":"(\u003c*\u003e) :: forall a b. f (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"Applicative","module":"Prelude","detail":"class (Apply f) \u003c= Applicative f where"},{"name":"pure","module":"Prelude","detail":"pure :: forall a. a -\u003e f a"},{"name":"liftA1","module":"Prelude","detail":"liftA1 :: forall f a b. (Applicative f) =\u003e (a -\u003e b) -\u003e f a -\u003e f b"},{"name":"Bind","module":"Prelude","detail":"class (Apply m) \u003c= Bind m where"},{"name":"(\u003e\u003e=)","module":"Prelude","detail":"(\u003e\u003e=) :: forall a b. m a -\u003e (a -\u003e m b) -\u003e m b"},{"name":"Monad","module":"Prelude","detail":"class (Applicative m, Bind m) \u003c= Monad m where"},{"name":"return","module":"Prelude","detail":"return :: forall m a. (Monad m) =\u003e a -\u003e m a"},{"name":"liftM1","module":"Prelude","detail":"liftM1 :: forall m a b. (Monad m) =\u003e (a -\u003e b) -\u003e m a -\u003e m b"},{"name":"ap","module":"Prelude","detail":"ap :: forall m a b. (Monad m) =\u003e m (a -\u003e b) -\u003e m a -\u003e m b"},{"name":"functorArr","module":"Prelude","detail":"instance functorArr :: Functor (Prim.Function r)"},{"name":"applyArr","module":"Prelude","detail":"instance applyArr :: Apply (Prim.Function r)"},{"name":"applicativeArr","module":"Prelude","detail":"instance applicativeArr :: Applicative (Prim.Function r)"},{"name":"bindArr","module":"Prelude","detail":"instance bindArr :: Bind (Prim.Function r)"},{"name":"monadArr","module":"Prelude","detail":"instance monadArr :: Monad (Prim.Function r)"},{"name":"Num","module":"Prelude","detail":"class Num a where"},{"name":"(+)","module":"Prelude","detail":"(+) :: a -\u003e a -\u003e a"},{"name":"(-)","module":"Prelude","detail":"(-) :: a -\u003e a -\u003e a"},{"name":"(*)","module":"Prelude","detail":"(*) :: a -\u003e a -\u003e a"},{"name":"(/)","module":"Prelude","detail":"(/) :: a -\u003e a -\u003e a"},{"name":"(%)","module":"Prelude","detail":"(%) :: a -\u003e a -\u003e a"},{"name":"negate","module":"Prelude","detail":"negate :: a -\u003e a"},{"name":"numAdd","module":"Prelude","detail":"numAdd :: Number -\u003e Number -\u003e Number"},{"name":"numSub","module":"Prelude","detail":"numSub :: Number -\u003e Number -\u003e Number"},{"name":"numMul","module":"Prelude","detail":"numMul :: Number -\u003e Number -\u003e Number"},{"name":"numDiv","module":"Prelude","detail":"numDiv :: Number -\u003e Number -\u003e Number"},{"name":"numMod","module":"Prelude","detail":"numMod :: Number -\u003e Number -\u003e Number"},{"name":"numNegate","module":"Prelude","detail":"numNegate :: Number -\u003e Number"},{"name":"numNumber","module":"Prelude","detail":"instance numNumber :: Num Number"},{"name":"Unit","module":"Prelude","detail":"newtype Unit = Unit {  }"},{"name":"Unit","module":"Prelude","detail":"newtype Unit = Unit {  }"},{"name":"unit","module":"Prelude","detail":"unit :: Unit"},{"name":"Eq","module":"Prelude","detail":"class Eq a where"},{"name":"(==)","module":"Prelude","detail":"(==) :: a -\u003e a -\u003e Boolean"},{"name":"(/=)","module":"Prelude","detail":"(/=) :: a -\u003e a -\u003e Boolean"},{"name":"refEq","module":"Prelude","detail":"refEq :: forall a. a -\u003e a -\u003e Boolean"},{"name":"refIneq","module":"Prelude","detail":"refIneq :: forall a. a -\u003e a -\u003e Boolean"},{"name":"eqUnit","module":"Prelude","detail":"instance eqUnit :: Eq Unit"},{"name":"eqString","module":"Prelude","detail":"instance eqString :: Eq String"},{"name":"eqNumber","module":"Prelude","detail":"instance eqNumber :: Eq Number"},{"name":"eqBoolean","module":"Prelude","detail":"instance eqBoolean :: Eq Boolean"},{"name":"eqArrayImpl","module":"Prelude","detail":"eqArrayImpl :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a] -\u003e Boolean"},{"name":"eqArray","module":"Prelude","detail":"instance eqArray :: (Eq a) =\u003e Eq [a]"},{"name":"Ordering","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"LT","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"GT","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"EQ","module":"Prelude","detail":"data Ordering = LT | GT | EQ"},{"name":"eqOrdering","module":"Prelude","detail":"instance eqOrdering :: Eq Ordering"},{"name":"showOrdering","module":"Prelude","detail":"instance showOrdering :: Show Ordering"},{"name":"Ord","module":"Prelude","detail":"class (Eq a) \u003c= Ord a where"},{"name":"compare","module":"Prelude","detail":"compare :: a -\u003e a -\u003e Ordering"},{"name":"(\u003c)","module":"Prelude","detail":"(\u003c) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003e)","module":"Prelude","detail":"(\u003e) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003c=)","module":"Prelude","detail":"(\u003c=) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"(\u003e=)","module":"Prelude","detail":"(\u003e=) :: forall a. (Ord a) =\u003e a -\u003e a -\u003e Boolean"},{"name":"unsafeCompareImpl","module":"Prelude","detail":"unsafeCompareImpl :: forall a. Ordering -\u003e Ordering -\u003e Ordering -\u003e a -\u003e a -\u003e Ordering"},{"name":"unsafeCompare","module":"Prelude","detail":"unsafeCompare :: forall a. a -\u003e a -\u003e Ordering"},{"name":"ordUnit","module":"Prelude","detail":"instance ordUnit :: Ord Unit"},{"name":"ordBoolean","module":"Prelude","detail":"instance ordBoolean :: Ord Boolean"},{"name":"ordNumber","module":"Prelude","detail":"instance ordNumber :: Ord Number"},{"name":"ordString","module":"Prelude","detail":"instance ordString :: Ord String"},{"name":"ordArray","module":"Prelude","detail":"instance ordArray :: (Ord a) =\u003e Ord [a]"},{"name":"Bits","module":"Prelude","detail":"class Bits b where"},{"name":"(.&.)","module":"Prelude","detail":"(.&.) :: b -\u003e b -\u003e b"},{"name":"(.|.)","module":"Prelude","detail":"(.|.) :: b -\u003e b -\u003e b"},{"name":"(.^.)","module":"Prelude","detail":"(.^.) :: b -\u003e b -\u003e b"},{"name":"shl","module":"Prelude","detail":"shl :: b -\u003e Number -\u003e b"},{"name":"shr","module":"Prelude","detail":"shr :: b -\u003e Number -\u003e b"},{"name":"zshr","module":"Prelude","detail":"zshr :: b -\u003e Number -\u003e b"},{"name":"complement","module":"Prelude","detail":"complement :: b -\u003e b"},{"name":"numShl","module":"Prelude","detail":"numShl :: Number -\u003e Number -\u003e Number"},{"name":"numShr","module":"Prelude","detail":"numShr :: Number -\u003e Number -\u003e Number"},{"name":"numZshr","module":"Prelude","detail":"numZshr :: Number -\u003e Number -\u003e Number"},{"name":"numAnd","module":"Prelude","detail":"numAnd :: Number -\u003e Number -\u003e Number"},{"name":"numOr","module":"Prelude","detail":"numOr :: Number -\u003e Number -\u003e Number"},{"name":"numXor","module":"Prelude","detail":"numXor :: Number -\u003e Number -\u003e Number"},{"name":"numComplement","module":"Prelude","detail":"numComplement :: Number -\u003e Number"},{"name":"bitsNumber","module":"Prelude","detail":"instance bitsNumber :: Bits Number"},{"name":"BoolLike","module":"Prelude","detail":"class BoolLike b where"},{"name":"(&&)","module":"Prelude","detail":"(&&) :: b -\u003e b -\u003e b"},{"name":"(||)","module":"Prelude","detail":"(||) :: b -\u003e b -\u003e b"},{"name":"not","module":"Prelude","detail":"not :: b -\u003e b"},{"name":"boolAnd","module":"Prelude","detail":"boolAnd :: Boolean -\u003e Boolean -\u003e Boolean"},{"name":"boolOr","module":"Prelude","detail":"boolOr :: Boolean -\u003e Boolean -\u003e Boolean"},{"name":"boolNot","module":"Prelude","detail":"boolNot :: Boolean -\u003e Boolean"},{"name":"boolLikeBoolean","module":"Prelude","detail":"instance boolLikeBoolean :: BoolLike Boolean"},{"name":"Semigroup","module":"Prelude","detail":"class Semigroup a where"},{"name":"(\u003c\u003e)","module":"Prelude","detail":"(\u003c\u003e) :: a -\u003e a -\u003e a"},{"name":"concatString","module":"Prelude","detail":"concatString :: String -\u003e String -\u003e String"},{"name":"semigroupUnit","module":"Prelude","detail":"instance semigroupUnit :: Semigroup Unit"},{"name":"semigroupString","module":"Prelude","detail":"instance semigroupString :: Semigroup String"},{"name":"semigroupArr","module":"Prelude","detail":"instance semigroupArr :: (Semigroup s') =\u003e Semigroup (s -\u003e s')"},{"name":"(++)","module":"Prelude","detail":"(++) :: forall s. (Semigroup s) =\u003e s -\u003e s -\u003e s"},{"name":"on","module":"Data.Function","detail":"on :: forall a b c. (b -\u003e b -\u003e c) -\u003e (a -\u003e b) -\u003e a -\u003e a -\u003e c"},{"name":"Fn0","module":"Data.Function","detail":"data Fn0 :: * -\u003e *"},{"name":"Fn1","module":"Data.Function","detail":"data Fn1 :: * -\u003e * -\u003e *"},{"name":"Fn2","module":"Data.Function","detail":"data Fn2 :: * -\u003e * -\u003e * -\u003e *"},{"name":"Fn3","module":"Data.Function","detail":"data Fn3 :: * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn4","module":"Data.Function","detail":"data Fn4 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn5","module":"Data.Function","detail":"data Fn5 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn6","module":"Data.Function","detail":"data Fn6 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn7","module":"Data.Function","detail":"data Fn7 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn8","module":"Data.Function","detail":"data Fn8 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn9","module":"Data.Function","detail":"data Fn9 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"Fn10","module":"Data.Function","detail":"data Fn10 :: * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e * -\u003e *"},{"name":"mkFn0","module":"Data.Function","detail":"mkFn0 :: forall a. (Unit -\u003e a) -\u003e Fn0 a"},{"name":"mkFn1","module":"Data.Function","detail":"mkFn1 :: forall a b. (a -\u003e b) -\u003e Fn1 a b"},{"name":"mkFn2","module":"Data.Function","detail":"mkFn2 :: forall a b c. (a -\u003e b -\u003e c) -\u003e Fn2 a b c"},{"name":"mkFn3","module":"Data.Function","detail":"mkFn3 :: forall a b c d. (a -\u003e b -\u003e c -\u003e d) -\u003e Fn3 a b c d"},{"name":"mkFn4","module":"Data.Function","detail":"mkFn4 :: forall a b c d e. (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e Fn4 a b c d e"},{"name":"mkFn5","module":"Data.Function","detail":"mkFn5 :: forall a b c d e f. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f) -\u003e Fn5 a b c d e f"},{"name":"mkFn6","module":"Data.Function","detail":"mkFn6 :: forall a b c d e f g. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g) -\u003e Fn6 a b c d e f g"},{"name":"mkFn7","module":"Data.Function","detail":"mkFn7 :: forall a b c d e f g h. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h) -\u003e Fn7 a b c d e f g h"},{"name":"mkFn8","module":"Data.Function","detail":"mkFn8 :: forall a b c d e f g h i. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i) -\u003e Fn8 a b c d e f g h i"},{"name":"mkFn9","module":"Data.Function","detail":"mkFn9 :: forall a b c d e f g h i j. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j) -\u003e Fn9 a b c d e f g h i j"},{"name":"mkFn10","module":"Data.Function","detail":"mkFn10 :: forall a b c d e f g h i j k. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e k) -\u003e Fn10 a b c d e f g h i j k"},{"name":"runFn0","module":"Data.Function","detail":"runFn0 :: forall a. Fn0 a -\u003e a"},{"name":"runFn1","module":"Data.Function","detail":"runFn1 :: forall a b. Fn1 a b -\u003e a -\u003e b"},{"name":"runFn2","module":"Data.Function","detail":"runFn2 :: forall a b c. Fn2 a b c -\u003e a -\u003e b -\u003e c"},{"name":"runFn3","module":"Data.Function","detail":"runFn3 :: forall a b c d. Fn3 a b c d -\u003e a -\u003e b -\u003e c -\u003e d"},{"name":"runFn4","module":"Data.Function","detail":"runFn4 :: forall a b c d e. Fn4 a b c d e -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e"},{"name":"runFn5","module":"Data.Function","detail":"runFn5 :: forall a b c d e f. Fn5 a b c d e f -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f"},{"name":"runFn6","module":"Data.Function","detail":"runFn6 :: forall a b c d e f g. Fn6 a b c d e f g -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g"},{"name":"runFn7","module":"Data.Function","detail":"runFn7 :: forall a b c d e f g h. Fn7 a b c d e f g h -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h"},{"name":"runFn8","module":"Data.Function","detail":"runFn8 :: forall a b c d e f g h i. Fn8 a b c d e f g h i -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i"},{"name":"runFn9","module":"Data.Function","detail":"runFn9 :: forall a b c d e f g h i j. Fn9 a b c d e f g h i j -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j"},{"name":"runFn10","module":"Data.Function","detail":"runFn10 :: forall a b c d e f g h i j k. Fn10 a b c d e f g h i j k -\u003e a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e k"},{"name":"Ref","module":"Data.Eq","detail":"newtype Ref a = Ref a"},{"name":"Ref","module":"Data.Eq","detail":"newtype Ref a = Ref a"},{"name":"liftRef","module":"Data.Eq","detail":"liftRef :: forall a b. (a -\u003e a -\u003e b) -\u003e Ref a -\u003e Ref a -\u003e b"},{"name":"eqRef","module":"Data.Eq","detail":"instance eqRef :: Eq (Ref a)"},{"name":"functorRef","module":"Data.Eq","detail":"instance functorRef :: Functor Ref"},{"name":"unsafeIndex","module":"Prelude.Unsafe","detail":"unsafeIndex :: forall a. [a] -\u003e Number -\u003e a"},{"name":"Eff","module":"Control.Monad.Eff","detail":"data Eff :: # ! -\u003e * -\u003e *"},{"name":"returnE","module":"Control.Monad.Eff","detail":"returnE :: forall e a. a -\u003e Eff e a"},{"name":"bindE","module":"Control.Monad.Eff","detail":"bindE :: forall e a b. Eff e a -\u003e (a -\u003e Eff e b) -\u003e Eff e b"},{"name":"Pure","module":"Control.Monad.Eff","detail":"type Pure a = forall e. Eff e a"},{"name":"runPure","module":"Control.Monad.Eff","detail":"runPure :: forall a. Pure a -\u003e a"},{"name":"functorEff","module":"Control.Monad.Eff","detail":"instance functorEff :: Functor (Eff e)"},{"name":"applyEff","module":"Control.Monad.Eff","detail":"instance applyEff :: Apply (Eff e)"},{"name":"applicativeEff","module":"Control.Monad.Eff","detail":"instance applicativeEff :: Applicative (Eff e)"},{"name":"bindEff","module":"Control.Monad.Eff","detail":"instance bindEff :: Bind (Eff e)"},{"name":"monadEff","module":"Control.Monad.Eff","detail":"instance monadEff :: Monad (Eff e)"},{"name":"untilE","module":"Control.Monad.Eff","detail":"untilE :: forall e. Eff e Boolean -\u003e Eff e Unit"},{"name":"whileE","module":"Control.Monad.Eff","detail":"whileE :: forall e a. Eff e Boolean -\u003e Eff e a -\u003e Eff e Unit"},{"name":"forE","module":"Control.Monad.Eff","detail":"forE :: forall e. Number -\u003e Number -\u003e (Number -\u003e Eff e Unit) -\u003e Eff e Unit"},{"name":"foreachE","module":"Control.Monad.Eff","detail":"foreachE :: forall e a. [a] -\u003e (a -\u003e Eff e Unit) -\u003e Eff e Unit"},{"name":"unsafeInterleaveEff","module":"Control.Monad.Eff.Unsafe","detail":"unsafeInterleaveEff :: forall eff1 eff2 a. Eff eff1 a -\u003e Eff eff2 a"},{"name":"Trace","module":"Debug.Trace","detail":"data Trace :: !"},{"name":"trace","module":"Debug.Trace","detail":"trace :: forall r. String -\u003e Eff (trace :: Trace | r) Unit"},{"name":"print","module":"Debug.Trace","detail":"print :: forall a r. (Show a) =\u003e a -\u003e Eff (trace :: Trace | r) Unit"},{"name":"ST","module":"Control.Monad.ST","detail":"data ST :: * -\u003e !"},{"name":"STRef","module":"Control.Monad.ST","detail":"data STRef :: * -\u003e * -\u003e *"},{"name":"newSTRef","module":"Control.Monad.ST","detail":"newSTRef :: forall a h r. a -\u003e Eff (st :: ST h | r) (STRef h a)"},{"name":"readSTRef","module":"Control.Monad.ST","detail":"readSTRef :: forall a h r. STRef h a -\u003e Eff (st :: ST h | r) a"},{"name":"modifySTRef","module":"Control.Monad.ST","detail":"modifySTRef :: forall a h r. STRef h a -\u003e (a -\u003e a) -\u003e Eff (st :: ST h | r) a"},{"name":"writeSTRef","module":"Control.Monad.ST","detail":"writeSTRef :: forall a h r. STRef h a -\u003e a -\u003e Eff (st :: ST h | r) a"},{"name":"runST","module":"Control.Monad.ST","detail":"runST :: forall a r. (forall h. Eff (st :: ST h | r) a) -\u003e Eff r a"},{"library":"purescript-identity","name":"Identity","module":"Data.Identity","detail":"newtype Identity a = Identity a"},{"library":"purescript-identity","name":"Identity","module":"Data.Identity","detail":"newtype Identity a = Identity a"},{"library":"purescript-identity","name":"runIdentity","module":"Data.Identity","detail":"runIdentity :: forall a. Identity a -\u003e a"},{"library":"purescript-identity","name":"eqIdentity","module":"Data.Identity","detail":"instance eqIdentity :: (Eq a) =\u003e Eq (Identity a)"},{"library":"purescript-identity","name":"ordIdentity","module":"Data.Identity","detail":"instance ordIdentity :: (Ord a) =\u003e Ord (Identity a)"},{"library":"purescript-identity","name":"showConst","module":"Data.Identity","detail":"instance showConst :: (Show a) =\u003e Show (Identity a)"},{"library":"purescript-identity","name":"functorIdentity","module":"Data.Identity","detail":"instance functorIdentity :: Functor Identity"},{"library":"purescript-identity","name":"applyIdentity","module":"Data.Identity","detail":"instance applyIdentity :: Apply Identity"},{"library":"purescript-identity","name":"applicativeIdentity","module":"Data.Identity","detail":"instance applicativeIdentity :: Applicative Identity"},{"library":"purescript-identity","name":"bindIdentity","module":"Data.Identity","detail":"instance bindIdentity :: Bind Identity"},{"library":"purescript-identity","name":"monadIdentity","module":"Data.Identity","detail":"instance monadIdentity :: Monad Identity"},{"library":"purescript-identity","name":"extendIdentity","module":"Data.Identity","detail":"instance extendIdentity :: Extend Identity"},{"library":"purescript-identity","name":"comonadIdentity","module":"Data.Identity","detail":"instance comonadIdentity :: Comonad Identity"},{"library":"purescript-identity","name":"foldableIdentity","module":"Data.Identity","detail":"instance foldableIdentity :: Foldable Identity"},{"library":"purescript-identity","name":"traversableIdentity","module":"Data.Identity","detail":"instance traversableIdentity :: Traversable Identity"},{"library":"purescript-foldable-traversable","name":"Foldable","module":"Data.Foldable","detail":"class Foldable f where"},{"library":"purescript-foldable-traversable","name":"foldr","module":"Data.Foldable","detail":"foldr :: forall a b. (a -\u003e b -\u003e b) -\u003e b -\u003e f a -\u003e b"},{"library":"purescript-foldable-traversable","name":"foldl","module":"Data.Foldable","detail":"foldl :: forall a b. (b -\u003e a -\u003e b) -\u003e b -\u003e f a -\u003e b"},{"library":"purescript-foldable-traversable","name":"foldMap","module":"Data.Foldable","detail":"foldMap :: forall a m. (Monoid m) =\u003e (a -\u003e m) -\u003e f a -\u003e m"},{"library":"purescript-foldable-traversable","name":"foldableArray","module":"Data.Foldable","detail":"instance foldableArray :: Foldable Prim.Array"},{"library":"purescript-foldable-traversable","name":"foldableEither","module":"Data.Foldable","detail":"instance foldableEither :: Foldable (Either a)"},{"library":"purescript-foldable-traversable","name":"foldableMaybe","module":"Data.Foldable","detail":"instance foldableMaybe :: Foldable Maybe"},{"library":"purescript-foldable-traversable","name":"foldableTuple","module":"Data.Foldable","detail":"instance foldableTuple :: Foldable (Tuple a)"},{"library":"purescript-foldable-traversable","name":"fold","module":"Data.Foldable","detail":"fold :: forall f m. (Foldable f, Monoid m) =\u003e f m -\u003e m"},{"library":"purescript-foldable-traversable","name":"traverse_","module":"Data.Foldable","detail":"traverse_ :: forall a b f m. (Applicative m, Foldable f) =\u003e (a -\u003e m b) -\u003e f a -\u003e m Unit"},{"library":"purescript-foldable-traversable","name":"for_","module":"Data.Foldable","detail":"for_ :: forall a b f m. (Applicative m, Foldable f) =\u003e f a -\u003e (a -\u003e m b) -\u003e m Unit"},{"library":"purescript-foldable-traversable","name":"sequence_","module":"Data.Foldable","detail":"sequence_ :: forall a f m. (Applicative m, Foldable f) =\u003e f (m a) -\u003e m Unit"},{"library":"purescript-foldable-traversable","name":"mconcat","module":"Data.Foldable","detail":"mconcat :: forall f m. (Foldable f, Monoid m) =\u003e f m -\u003e m"},{"library":"purescript-foldable-traversable","name":"intercalate","module":"Data.Foldable","detail":"intercalate :: forall f m. (Foldable f, Monoid m) =\u003e m -\u003e f m -\u003e m"},{"library":"purescript-foldable-traversable","name":"and","module":"Data.Foldable","detail":"and :: forall f. (Foldable f) =\u003e f Boolean -\u003e Boolean"},{"library":"purescript-foldable-traversable","name":"or","module":"Data.Foldable","detail":"or :: forall f. (Foldable f) =\u003e f Boolean -\u003e Boolean"},{"library":"purescript-foldable-traversable","name":"any","module":"Data.Foldable","detail":"any :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Boolean"},{"library":"purescript-foldable-traversable","name":"all","module":"Data.Foldable","detail":"all :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Boolean"},{"library":"purescript-foldable-traversable","name":"sum","module":"Data.Foldable","detail":"sum :: forall f. (Foldable f) =\u003e f Number -\u003e Number"},{"library":"purescript-foldable-traversable","name":"product","module":"Data.Foldable","detail":"product :: forall f. (Foldable f) =\u003e f Number -\u003e Number"},{"library":"purescript-foldable-traversable","name":"elem","module":"Data.Foldable","detail":"elem :: forall a f. (Eq a, Foldable f) =\u003e a -\u003e f a -\u003e Boolean"},{"library":"purescript-foldable-traversable","name":"notElem","module":"Data.Foldable","detail":"notElem :: forall a f. (Eq a, Foldable f) =\u003e a -\u003e f a -\u003e Boolean"},{"library":"purescript-foldable-traversable","name":"find","module":"Data.Foldable","detail":"find :: forall a f. (Foldable f) =\u003e (a -\u003e Boolean) -\u003e f a -\u003e Maybe a"},{"library":"purescript-foldable-traversable","name":"lookup","module":"Data.Foldable","detail":"lookup :: forall a b f. (Eq a, Foldable f) =\u003e a -\u003e f (Tuple a b) -\u003e Maybe b"},{"library":"purescript-foldable-traversable","name":"foldrArray","module":"Data.Foldable","detail":"foldrArray :: forall a b. (a -\u003e b -\u003e b) -\u003e b -\u003e [a] -\u003e b"},{"library":"purescript-foldable-traversable","name":"foldlArray","module":"Data.Foldable","detail":"foldlArray :: forall a b. (b -\u003e a -\u003e b) -\u003e b -\u003e [a] -\u003e b"},{"library":"purescript-foldable-traversable","name":"Traversable","module":"Data.Traversable","detail":"class (Functor t, Foldable t) \u003c= Traversable t where"},{"library":"purescript-foldable-traversable","name":"traverse","module":"Data.Traversable","detail":"traverse :: forall a b m. (Applicative m) =\u003e (a -\u003e m b) -\u003e t a -\u003e m (t b)"},{"library":"purescript-foldable-traversable","name":"sequence","module":"Data.Traversable","detail":"sequence :: forall a m. (Applicative m) =\u003e t (m a) -\u003e m (t a)"},{"library":"purescript-foldable-traversable","name":"traversableArray","module":"Data.Traversable","detail":"instance traversableArray :: Traversable Prim.Array"},{"library":"purescript-foldable-traversable","name":"traversableEither","module":"Data.Traversable","detail":"instance traversableEither :: Traversable (Either a)"},{"library":"purescript-foldable-traversable","name":"traversableMaybe","module":"Data.Traversable","detail":"instance traversableMaybe :: Traversable Maybe"},{"library":"purescript-foldable-traversable","name":"traversableTuple","module":"Data.Traversable","detail":"instance traversableTuple :: Traversable (Tuple a)"},{"library":"purescript-foldable-traversable","name":"for","module":"Data.Traversable","detail":"for :: forall a b m t. (Applicative m, Traversable t) =\u003e t a -\u003e (a -\u003e m b) -\u003e m (t b)"},{"library":"purescript-foldable-traversable","name":"zipWithA","module":"Data.Traversable","detail":"zipWithA :: forall m a b c. (Applicative m) =\u003e (a -\u003e b -\u003e m c) -\u003e [a] -\u003e [b] -\u003e m [c]"},{"library":"purescript-foldable-traversable","name":"StateL","module":"Data.Traversable","detail":"newtype StateL s a = StateL (s -\u003e Tuple s a)"},{"library":"purescript-foldable-traversable","name":"StateL","module":"Data.Traversable","detail":"newtype StateL s a = StateL (s -\u003e Tuple s a)"},{"library":"purescript-foldable-traversable","name":"stateL","module":"Data.Traversable","detail":"stateL :: forall s a. StateL s a -\u003e s -\u003e Tuple s a"},{"library":"purescript-foldable-traversable","name":"functorStateL","module":"Data.Traversable","detail":"instance functorStateL :: Functor (StateL s)"},{"library":"purescript-foldable-traversable","name":"applyStateL","module":"Data.Traversable","detail":"instance applyStateL :: Apply (StateL s)"},{"library":"purescript-foldable-traversable","name":"applicativeStateL","module":"Data.Traversable","detail":"instance applicativeStateL :: Applicative (StateL s)"},{"library":"purescript-foldable-traversable","name":"scanl","module":"Data.Traversable","detail":"scanl :: forall a b f. (Traversable f) =\u003e (b -\u003e a -\u003e b) -\u003e b -\u003e f a -\u003e f b"},{"library":"purescript-foldable-traversable","name":"mapAccumL","module":"Data.Traversable","detail":"mapAccumL :: forall a b s f. (Traversable f) =\u003e (s -\u003e a -\u003e Tuple s b) -\u003e s -\u003e f a -\u003e Tuple s (f b)"},{"library":"purescript-foldable-traversable","name":"StateR","module":"Data.Traversable","detail":"newtype StateR s a = StateR (s -\u003e Tuple s a)"},{"library":"purescript-foldable-traversable","name":"StateR","module":"Data.Traversable","detail":"newtype StateR s a = StateR (s -\u003e Tuple s a)"},{"library":"purescript-foldable-traversable","name":"stateR","module":"Data.Traversable","detail":"stateR :: forall s a. StateR s a -\u003e s -\u003e Tuple s a"},{"library":"purescript-foldable-traversable","name":"functorStateR","module":"Data.Traversable","detail":"instance functorStateR :: Functor (StateR s)"},{"library":"purescript-foldable-traversable","name":"applyStateR","module":"Data.Traversable","detail":"instance applyStateR :: Apply (StateR s)"},{"library":"purescript-foldable-traversable","name":"applicativeStateR","module":"Data.Traversable","detail":"instance applicativeStateR :: Applicative (StateR s)"},{"library":"purescript-foldable-traversable","name":"scanr","module":"Data.Traversable","detail":"scanr :: forall a b f. (Traversable f) =\u003e (a -\u003e b -\u003e b) -\u003e b -\u003e f a -\u003e f b"},{"library":"purescript-foldable-traversable","name":"mapAccumR","module":"Data.Traversable","detail":"mapAccumR :: forall a b s f. (Traversable f) =\u003e (s -\u003e a -\u003e Tuple s b) -\u003e s -\u003e f a -\u003e Tuple s (f b)"},{"library":"purescript-monoid","name":"Monoid","module":"Data.Monoid","detail":"class (Semigroup m) \u003c= Monoid m where"},{"library":"purescript-monoid","name":"mempty","module":"Data.Monoid","detail":"mempty :: m"},{"library":"purescript-monoid","name":"monoidString","module":"Data.Monoid","detail":"instance monoidString :: Monoid String"},{"library":"purescript-monoid","name":"monoidArray","module":"Data.Monoid","detail":"instance monoidArray :: Monoid [a]"},{"library":"purescript-monoid","name":"monoidUnit","module":"Data.Monoid","detail":"instance monoidUnit :: Monoid Unit"},{"library":"purescript-monoid","name":"monoidArr","module":"Data.Monoid","detail":"instance monoidArr :: (Monoid b) =\u003e Monoid (a -\u003e b)"},{"library":"purescript-monoid","name":"monoidMaybe","module":"Data.Monoid","detail":"instance monoidMaybe :: (Semigroup a) =\u003e Monoid (Maybe a)"},{"library":"purescript-monoid","name":"Dual","module":"Data.Monoid.Dual","detail":"newtype Dual a = Dual a"},{"library":"purescript-monoid","name":"Dual","module":"Data.Monoid.Dual","detail":"newtype Dual a = Dual a"},{"library":"purescript-monoid","name":"runDual","module":"Data.Monoid.Dual","detail":"runDual :: forall a. Dual a -\u003e a"},{"library":"purescript-monoid","name":"eqDual","module":"Data.Monoid.Dual","detail":"instance eqDual :: (Eq a) =\u003e Eq (Dual a)"},{"library":"purescript-monoid","name":"ordDual","module":"Data.Monoid.Dual","detail":"instance ordDual :: (Ord a) =\u003e Ord (Dual a)"},{"library":"purescript-monoid","name":"showDual","module":"Data.Monoid.Dual","detail":"instance showDual :: (Show a) =\u003e Show (Dual a)"},{"library":"purescript-monoid","name":"semigroupDual","module":"Data.Monoid.Dual","detail":"instance semigroupDual :: (Semigroup a) =\u003e Semigroup (Dual a)"},{"library":"purescript-monoid","name":"monoidDual","module":"Data.Monoid.Dual","detail":"instance monoidDual :: (Monoid a) =\u003e Monoid (Dual a)"},{"library":"purescript-monoid","name":"Endo","module":"Data.Monoid.Endo","detail":"newtype Endo a = Endo (a -\u003e a)"},{"library":"purescript-monoid","name":"Endo","module":"Data.Monoid.Endo","detail":"newtype Endo a = Endo (a -\u003e a)"},{"library":"purescript-monoid","name":"runEndo","module":"Data.Monoid.Endo","detail":"runEndo :: forall a. Endo a -\u003e a -\u003e a"},{"library":"purescript-monoid","name":"semigroupEndo","module":"Data.Monoid.Endo","detail":"instance semigroupEndo :: Semigroup (Endo a)"},{"library":"purescript-monoid","name":"monoidEndo","module":"Data.Monoid.Endo","detail":"instance monoidEndo :: Monoid (Endo a)"},{"library":"purescript-monoid","name":"All","module":"Data.Monoid.All","detail":"newtype All = All Boolean"},{"library":"purescript-monoid","name":"All","module":"Data.Monoid.All","detail":"newtype All = All Boolean"},{"library":"purescript-monoid","name":"runAll","module":"Data.Monoid.All","detail":"runAll :: All -\u003e Boolean"},{"library":"purescript-monoid","name":"eqAll","module":"Data.Monoid.All","detail":"instance eqAll :: Eq All"},{"library":"purescript-monoid","name":"showAll","module":"Data.Monoid.All","detail":"instance showAll :: Show All"},{"library":"purescript-monoid","name":"semigroupAll","module":"Data.Monoid.All","detail":"instance semigroupAll :: Semigroup All"},{"library":"purescript-monoid","name":"monoidAll","module":"Data.Monoid.All","detail":"instance monoidAll :: Monoid All"},{"library":"purescript-monoid","name":"First","module":"Data.Monoid.First","detail":"newtype First a = First (Maybe a)"},{"library":"purescript-monoid","name":"First","module":"Data.Monoid.First","detail":"newtype First a = First (Maybe a)"},{"library":"purescript-monoid","name":"runFirst","module":"Data.Monoid.First","detail":"runFirst :: forall a. First a -\u003e Maybe a"},{"library":"purescript-monoid","name":"eqFirst","module":"Data.Monoid.First","detail":"instance eqFirst :: (Eq a) =\u003e Eq (First a)"},{"library":"purescript-monoid","name":"ordFirst","module":"Data.Monoid.First","detail":"instance ordFirst :: (Ord a) =\u003e Ord (First a)"},{"library":"purescript-monoid","name":"showFirst","module":"Data.Monoid.First","detail":"instance showFirst :: (Show a) =\u003e Show (First a)"},{"library":"purescript-monoid","name":"semigroupFirst","module":"Data.Monoid.First","detail":"instance semigroupFirst :: Semigroup (First a)"},{"library":"purescript-monoid","name":"monoidFirst","module":"Data.Monoid.First","detail":"instance monoidFirst :: Monoid (First a)"},{"library":"purescript-monoid","name":"Any","module":"Data.Monoid.Any","detail":"newtype Any = Any Boolean"},{"library":"purescript-monoid","name":"Any","module":"Data.Monoid.Any","detail":"newtype Any = Any Boolean"},{"library":"purescript-monoid","name":"runAny","module":"Data.Monoid.Any","detail":"runAny :: Any -\u003e Boolean"},{"library":"purescript-monoid","name":"eqAny","module":"Data.Monoid.Any","detail":"instance eqAny :: Eq Any"},{"library":"purescript-monoid","name":"showAny","module":"Data.Monoid.Any","detail":"instance showAny :: Show Any"},{"library":"purescript-monoid","name":"semigroupAny","module":"Data.Monoid.Any","detail":"instance semigroupAny :: Semigroup Any"},{"library":"purescript-monoid","name":"monoidAny","module":"Data.Monoid.Any","detail":"instance monoidAny :: Monoid Any"},{"library":"purescript-monoid","name":"Product","module":"Data.Monoid.Product","detail":"newtype Product = Product Number"},{"library":"purescript-monoid","name":"Product","module":"Data.Monoid.Product","detail":"newtype Product = Product Number"},{"library":"purescript-monoid","name":"runProduct","module":"Data.Monoid.Product","detail":"runProduct :: Product -\u003e Number"},{"library":"purescript-monoid","name":"eqProduct","module":"Data.Monoid.Product","detail":"instance eqProduct :: Eq Product"},{"library":"purescript-monoid","name":"ordProduct","module":"Data.Monoid.Product","detail":"instance ordProduct :: Ord Product"},{"library":"purescript-monoid","name":"showProduct","module":"Data.Monoid.Product","detail":"instance showProduct :: Show Product"},{"library":"purescript-monoid","name":"semigroupProduct","module":"Data.Monoid.Product","detail":"instance semigroupProduct :: Semigroup Product"},{"library":"purescript-monoid","name":"monoidProduct","module":"Data.Monoid.Product","detail":"instance monoidProduct :: Monoid Product"},{"library":"purescript-monoid","name":"Last","module":"Data.Monoid.Last","detail":"newtype Last a = Last (Maybe a)"},{"library":"purescript-monoid","name":"Last","module":"Data.Monoid.Last","detail":"newtype Last a = Last (Maybe a)"},{"library":"purescript-monoid","name":"runLast","module":"Data.Monoid.Last","detail":"runLast :: forall a. Last a -\u003e Maybe a"},{"library":"purescript-monoid","name":"eqLast","module":"Data.Monoid.Last","detail":"instance eqLast :: (Eq a) =\u003e Eq (Last a)"},{"library":"purescript-monoid","name":"ordLast","module":"Data.Monoid.Last","detail":"instance ordLast :: (Ord a) =\u003e Ord (Last a)"},{"library":"purescript-monoid","name":"showLast","module":"Data.Monoid.Last","detail":"instance showLast :: (Show a) =\u003e Show (Last a)"},{"library":"purescript-monoid","name":"semigroupLast","module":"Data.Monoid.Last","detail":"instance semigroupLast :: Semigroup (Last a)"},{"library":"purescript-monoid","name":"monoidLast","module":"Data.Monoid.Last","detail":"instance monoidLast :: Monoid (Last a)"},{"library":"purescript-monoid","name":"Sum","module":"Data.Monoid.Sum","detail":"newtype Sum = Sum Number"},{"library":"purescript-monoid","name":"Sum","module":"Data.Monoid.Sum","detail":"newtype Sum = Sum Number"},{"library":"purescript-monoid","name":"runSum","module":"Data.Monoid.Sum","detail":"runSum :: Sum -\u003e Number"},{"library":"purescript-monoid","name":"eqSum","module":"Data.Monoid.Sum","detail":"instance eqSum :: Eq Sum"},{"library":"purescript-monoid","name":"ordSum","module":"Data.Monoid.Sum","detail":"instance ordSum :: Ord Sum"},{"library":"purescript-monoid","name":"showSum","module":"Data.Monoid.Sum","detail":"instance showSum :: Show Sum"},{"library":"purescript-monoid","name":"semigroupSum","module":"Data.Monoid.Sum","detail":"instance semigroupSum :: Semigroup Sum"},{"library":"purescript-monoid","name":"monoidSum","module":"Data.Monoid.Sum","detail":"instance monoidSum :: Monoid Sum"},{"library":"purescript-transformers","name":"MonadTrans","module":"Control.Monad.Trans","detail":"class MonadTrans t where"},{"library":"purescript-transformers","name":"lift","module":"Control.Monad.Trans","detail":"lift :: forall m a. (Monad m) =\u003e m a -\u003e t m a"},{"library":"purescript-transformers","name":"RWS","module":"Control.Monad.RWS","detail":"type RWS r w s = RWST r w s Identity"},{"library":"purescript-transformers","name":"rws","module":"Control.Monad.RWS","detail":"rws :: forall r w s a. (r -\u003e s -\u003e See s a w) -\u003e RWS r w s a"},{"library":"purescript-transformers","name":"runRWS","module":"Control.Monad.RWS","detail":"runRWS :: forall r w s a. RWS r w s a -\u003e r -\u003e s -\u003e See s a w"},{"library":"purescript-transformers","name":"evalRWS","module":"Control.Monad.RWS","detail":"evalRWS :: forall r w s a. RWS r w s a -\u003e r -\u003e s -\u003e Tuple a w"},{"library":"purescript-transformers","name":"execRWS","module":"Control.Monad.RWS","detail":"execRWS :: forall r w s a. RWS r w s a -\u003e r -\u003e s -\u003e Tuple s w"},{"library":"purescript-transformers","name":"mapRWS","module":"Control.Monad.RWS","detail":"mapRWS :: forall r w1 w2 s a1 a2. (See s a1 w1 -\u003e See s a2 w2) -\u003e RWS r w1 s a1 -\u003e RWS r w2 s a2"},{"library":"purescript-transformers","name":"withRWS","module":"Control.Monad.RWS","detail":"withRWS :: forall r1 r2 w s a. (r2 -\u003e s -\u003e Tuple r1 s) -\u003e RWS r1 w s a -\u003e RWS r2 w s a"},{"library":"purescript-transformers","name":"ask","module":"Control.Monad.RWS","detail":"ask :: forall r w s m. (Applicative m, Monoid w) =\u003e RWST r w s m r"},{"library":"purescript-transformers","name":"local","module":"Control.Monad.RWS","detail":"local :: forall r w s m a. (r -\u003e r) -\u003e RWST r w s m a -\u003e RWST r w s m a"},{"library":"purescript-transformers","name":"reader","module":"Control.Monad.RWS","detail":"reader :: forall r w s m a. (Applicative m, Monoid w) =\u003e (r -\u003e a) -\u003e RWST r w s m a"},{"library":"purescript-transformers","name":"writer","module":"Control.Monad.RWS","detail":"writer :: forall r w s m a. (Applicative m) =\u003e Tuple a w -\u003e RWST r w s m a"},{"library":"purescript-transformers","name":"listen","module":"Control.Monad.RWS","detail":"listen :: forall r w s m a. (Monad m) =\u003e RWST r w s m a -\u003e RWST r w s m (Tuple a w)"},{"library":"purescript-transformers","name":"pass","module":"Control.Monad.RWS","detail":"pass :: forall r w s m a. (Monad m) =\u003e RWST r w s m (Tuple a (w -\u003e w)) -\u003e RWST r w s m a"},{"library":"purescript-transformers","name":"tell","module":"Control.Monad.RWS","detail":"tell :: forall r w s m. (Applicative m) =\u003e w -\u003e RWST r w s m Unit"},{"library":"purescript-transformers","name":"listens","module":"Control.Monad.RWS","detail":"listens :: forall r w s m a b. (Monad m) =\u003e (w -\u003e b) -\u003e RWST r w s m a -\u003e RWST r w s m (Tuple a b)"},{"library":"purescript-transformers","name":"censor","module":"Control.Monad.RWS","detail":"censor :: forall r w s m a. (Monad m) =\u003e (w -\u003e w) -\u003e RWST r w s m a -\u003e RWST r w s m a"},{"library":"purescript-transformers","name":"state","module":"Control.Monad.RWS","detail":"state :: forall r w s m a. (Applicative m, Monoid w) =\u003e (s -\u003e Tuple a s) -\u003e RWST r w s m a"},{"library":"purescript-transformers","name":"get","module":"Control.Monad.RWS","detail":"get :: forall r w s m. (Applicative m, Monoid w) =\u003e RWST r w s m s"},{"library":"purescript-transformers","name":"gets","module":"Control.Monad.RWS","detail":"gets :: forall r w s m a. (Applicative m, Monoid w) =\u003e (s -\u003e a) -\u003e RWST r w s m a"},{"library":"purescript-transformers","name":"put","module":"Control.Monad.RWS","detail":"put :: forall r w s m. (Applicative m, Monoid w) =\u003e s -\u003e RWST r w s m Unit"},{"library":"purescript-transformers","name":"modify","module":"Control.Monad.RWS","detail":"modify :: forall r w s m. (Applicative m, Monoid w) =\u003e (s -\u003e s) -\u003e RWST r w s m Unit"},{"library":"purescript-transformers","name":"Error","module":"Control.Monad.Error","detail":"class Error a where"},{"library":"purescript-transformers","name":"noMsg","module":"Control.Monad.Error","detail":"noMsg :: a"},{"library":"purescript-transformers","name":"strMsg","module":"Control.Monad.Error","detail":"strMsg :: String -\u003e a"},{"library":"purescript-transformers","name":"errorString","module":"Control.Monad.Error","detail":"instance errorString :: Error String"},{"library":"purescript-transformers","name":"Writer","module":"Control.Monad.Writer","detail":"type Writer w = WriterT w Identity"},{"library":"purescript-transformers","name":"runWriter","module":"Control.Monad.Writer","detail":"runWriter :: forall w a. Writer w a -\u003e Tuple a w"},{"library":"purescript-transformers","name":"execWriter","module":"Control.Monad.Writer","detail":"execWriter :: forall w a. Writer w a -\u003e w"},{"library":"purescript-transformers","name":"mapWriter","module":"Control.Monad.Writer","detail":"mapWriter :: forall w1 w2 a b. (Tuple a w1 -\u003e Tuple b w2) -\u003e Writer w1 a -\u003e Writer w2 b"},{"library":"purescript-transformers","name":"Reader","module":"Control.Monad.Reader","detail":"type Reader r = ReaderT r Identity"},{"library":"purescript-transformers","name":"runReader","module":"Control.Monad.Reader","detail":"runReader :: forall r a. Reader r a -\u003e r -\u003e a"},{"library":"purescript-transformers","name":"withReader","module":"Control.Monad.Reader","detail":"withReader :: forall r1 r2 a b. (r2 -\u003e r1) -\u003e Reader r1 a -\u003e Reader r2 a"},{"library":"purescript-transformers","name":"mapReader","module":"Control.Monad.Reader","detail":"mapReader :: forall r a b. (a -\u003e b) -\u003e Reader r a -\u003e Reader r b"},{"library":"purescript-transformers","name":"State","module":"Control.Monad.State","detail":"type State s = StateT s Identity"},{"library":"purescript-transformers","name":"runState","module":"Control.Monad.State","detail":"runState :: forall s a. State s a -\u003e s -\u003e Tuple a s"},{"library":"purescript-transformers","name":"evalState","module":"Control.Monad.State","detail":"evalState :: forall s a. State s a -\u003e s -\u003e a"},{"library":"purescript-transformers","name":"execState","module":"Control.Monad.State","detail":"execState :: forall s a. State s a -\u003e s -\u003e s"},{"library":"purescript-transformers","name":"mapState","module":"Control.Monad.State","detail":"mapState :: forall s a b. (Tuple a s -\u003e Tuple b s) -\u003e State s a -\u003e State s b"},{"library":"purescript-transformers","name":"withState","module":"Control.Monad.State","detail":"withState :: forall s a. (s -\u003e s) -\u003e State s a -\u003e State s a"},{"library":"purescript-transformers","name":"MaybeT","module":"Control.Monad.Maybe.Trans","detail":"newtype MaybeT m a = MaybeT (m (Maybe a))"},{"library":"purescript-transformers","name":"MaybeT","module":"Control.Monad.Maybe.Trans","detail":"newtype MaybeT m a = MaybeT (m (Maybe a))"},{"library":"purescript-transformers","name":"functorMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance functorMaybeT :: (Monad m) =\u003e Functor (MaybeT m)"},{"library":"purescript-transformers","name":"applyMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance applyMaybeT :: (Monad m) =\u003e Apply (MaybeT m)"},{"library":"purescript-transformers","name":"applicativeMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance applicativeMaybeT :: (Monad m) =\u003e Applicative (MaybeT m)"},{"library":"purescript-transformers","name":"bindMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance bindMaybeT :: (Monad m) =\u003e Bind (MaybeT m)"},{"library":"purescript-transformers","name":"monadMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance monadMaybeT :: (Monad m) =\u003e Monad (MaybeT m)"},{"library":"purescript-transformers","name":"monadTransMaybeT","module":"Control.Monad.Maybe.Trans","detail":"instance monadTransMaybeT :: MonadTrans MaybeT"},{"library":"purescript-transformers","name":"runMaybeT","module":"Control.Monad.Maybe.Trans","detail":"runMaybeT :: forall m a. MaybeT m a -\u003e m (Maybe a)"},{"library":"purescript-transformers","name":"mapMaybeT","module":"Control.Monad.Maybe.Trans","detail":"mapMaybeT :: forall m1 m2 a b. (m1 (Maybe a) -\u003e m2 (Maybe b)) -\u003e MaybeT m1 a -\u003e MaybeT m2 b"},{"library":"purescript-transformers","name":"liftCatchMaybe","module":"Control.Monad.Maybe.Trans","detail":"liftCatchMaybe :: forall m e a. (m (Maybe a) -\u003e (e -\u003e m (Maybe a)) -\u003e m (Maybe a)) -\u003e MaybeT m a -\u003e (e -\u003e MaybeT m a) -\u003e MaybeT m a"},{"library":"purescript-transformers","name":"liftListenMaybe","module":"Control.Monad.Maybe.Trans","detail":"liftListenMaybe :: forall m a w. (Monad m) =\u003e (m (Maybe a) -\u003e m (Tuple (Maybe a) w)) -\u003e MaybeT m a -\u003e MaybeT m (Tuple a w)"},{"library":"purescript-transformers","name":"liftPassMaybe","module":"Control.Monad.Maybe.Trans","detail":"liftPassMaybe :: forall m a w. (Monad m) =\u003e (m (Tuple (Maybe a) (w -\u003e w)) -\u003e m (Maybe a)) -\u003e MaybeT m (Tuple a (w -\u003e w)) -\u003e MaybeT m a"},{"library":"purescript-transformers","name":"liftCallCCMaybe","module":"Control.Monad.Maybe.Trans","detail":"liftCallCCMaybe :: forall m a b. (((Maybe a -\u003e m (Maybe b)) -\u003e m (Maybe a)) -\u003e m (Maybe a)) -\u003e ((a -\u003e MaybeT m b) -\u003e MaybeT m a) -\u003e MaybeT m a"},{"library":"purescript-transformers","name":"ErrorT","module":"Control.Monad.Error.Trans","detail":"newtype ErrorT e m a = ErrorT (m (Either e a))"},{"library":"purescript-transformers","name":"ErrorT","module":"Control.Monad.Error.Trans","detail":"newtype ErrorT e m a = ErrorT (m (Either e a))"},{"library":"purescript-transformers","name":"runErrorT","module":"Control.Monad.Error.Trans","detail":"runErrorT :: forall e m a. ErrorT e m a -\u003e m (Either e a)"},{"library":"purescript-transformers","name":"mapErrorT","module":"Control.Monad.Error.Trans","detail":"mapErrorT :: forall e1 e2 m1 m2 a b. (m1 (Either e1 a) -\u003e m2 (Either e2 b)) -\u003e ErrorT e1 m1 a -\u003e ErrorT e2 m2 b"},{"library":"purescript-transformers","name":"functorErrorT","module":"Control.Monad.Error.Trans","detail":"instance functorErrorT :: (Functor m) =\u003e Functor (ErrorT e m)"},{"library":"purescript-transformers","name":"applyErrorT","module":"Control.Monad.Error.Trans","detail":"instance applyErrorT :: (Apply m) =\u003e Apply (ErrorT e m)"},{"library":"purescript-transformers","name":"applicativeErrorT","module":"Control.Monad.Error.Trans","detail":"instance applicativeErrorT :: (Applicative m) =\u003e Applicative (ErrorT e m)"},{"library":"purescript-transformers","name":"altErrorT","module":"Control.Monad.Error.Trans","detail":"instance altErrorT :: (Monad m, Error e) =\u003e Alt (ErrorT e m)"},{"library":"purescript-transformers","name":"plusErrorT","module":"Control.Monad.Error.Trans","detail":"instance plusErrorT :: (Monad m, Error e) =\u003e Plus (ErrorT e m)"},{"library":"purescript-transformers","name":"alternativeErrorT","module":"Control.Monad.Error.Trans","detail":"instance alternativeErrorT :: (Monad m, Error e) =\u003e Alternative (ErrorT e m)"},{"library":"purescript-transformers","name":"bindErrorT","module":"Control.Monad.Error.Trans","detail":"instance bindErrorT :: (Monad m, Error e) =\u003e Bind (ErrorT e m)"},{"library":"purescript-transformers","name":"monadErrorT","module":"Control.Monad.Error.Trans","detail":"instance monadErrorT :: (Monad m, Error e) =\u003e Monad (ErrorT e m)"},{"library":"purescript-transformers","name":"monadPlusErrorT","module":"Control.Monad.Error.Trans","detail":"instance monadPlusErrorT :: (Monad m, Error e) =\u003e MonadPlus (ErrorT e m)"},{"library":"purescript-transformers","name":"monadTransErrorT","module":"Control.Monad.Error.Trans","detail":"instance monadTransErrorT :: (Error e) =\u003e MonadTrans (ErrorT e)"},{"library":"purescript-transformers","name":"liftListenError","module":"Control.Monad.Error.Trans","detail":"liftListenError :: forall e m a w. (Monad m) =\u003e (m (Either e a) -\u003e m (Tuple (Either e a) w)) -\u003e ErrorT e m a -\u003e ErrorT e m (Tuple a w)"},{"library":"purescript-transformers","name":"liftPassError","module":"Control.Monad.Error.Trans","detail":"liftPassError :: forall e m a w. (Monad m) =\u003e (m (Tuple (Either e a) (w -\u003e w)) -\u003e m (Either e a)) -\u003e ErrorT e m (Tuple a (w -\u003e w)) -\u003e ErrorT e m a"},{"library":"purescript-transformers","name":"liftCallCCError","module":"Control.Monad.Error.Trans","detail":"liftCallCCError :: forall e m a b. (((Either e a -\u003e m (Either e b)) -\u003e m (Either e a)) -\u003e m (Either e a)) -\u003e ((a -\u003e ErrorT e m b) -\u003e ErrorT e m a) -\u003e ErrorT e m a"},{"library":"purescript-transformers","name":"MonadError","module":"Control.Monad.Error.Class","detail":"class MonadError e m where"},{"library":"purescript-transformers","name":"throwError","module":"Control.Monad.Error.Class","detail":"throwError :: forall a. e -\u003e m a"},{"library":"purescript-transformers","name":"catchError","module":"Control.Monad.Error.Class","detail":"catchError :: forall a. m a -\u003e (e -\u003e m a) -\u003e m a"},{"library":"purescript-transformers","name":"monadErrorError","module":"Control.Monad.Error.Class","detail":"instance monadErrorError :: (Error e) =\u003e MonadError e (Either e)"},{"library":"purescript-transformers","name":"monadErrorErrorT","module":"Control.Monad.Error.Class","detail":"instance monadErrorErrorT :: (Monad m, Error e) =\u003e MonadError e (ErrorT e m)"},{"library":"purescript-transformers","name":"monadErrorMaybeT","module":"Control.Monad.Error.Class","detail":"instance monadErrorMaybeT :: (Monad m, MonadError e m) =\u003e MonadError e (MaybeT m)"},{"library":"purescript-transformers","name":"monadErrorReaderT","module":"Control.Monad.Error.Class","detail":"instance monadErrorReaderT :: (Monad m, MonadError e m) =\u003e MonadError e (ReaderT r m)"},{"library":"purescript-transformers","name":"monadErrorWriterT","module":"Control.Monad.Error.Class","detail":"instance monadErrorWriterT :: (Monad m, Monoid w, MonadError e m) =\u003e MonadError e (WriterT w m)"},{"library":"purescript-transformers","name":"monadErrorStateT","module":"Control.Monad.Error.Class","detail":"instance monadErrorStateT :: (Monad m, MonadError e m) =\u003e MonadError e (StateT s m)"},{"library":"purescript-transformers","name":"WriterT","module":"Control.Monad.Writer.Trans","detail":"newtype WriterT w m a = WriterT (m (Tuple a w))"},{"library":"purescript-transformers","name":"WriterT","module":"Control.Monad.Writer.Trans","detail":"newtype WriterT w m a = WriterT (m (Tuple a w))"},{"library":"purescript-transformers","name":"runWriterT","module":"Control.Monad.Writer.Trans","detail":"runWriterT :: forall w m a. WriterT w m a -\u003e m (Tuple a w)"},{"library":"purescript-transformers","name":"execWriterT","module":"Control.Monad.Writer.Trans","detail":"execWriterT :: forall w m a. (Apply m) =\u003e WriterT w m a -\u003e m w"},{"library":"purescript-transformers","name":"mapWriterT","module":"Control.Monad.Writer.Trans","detail":"mapWriterT :: forall w1 w2 m1 m2 a b. (m1 (Tuple a w1) -\u003e m2 (Tuple b w2)) -\u003e WriterT w1 m1 a -\u003e WriterT w2 m2 b"},{"library":"purescript-transformers","name":"functorWriterT","module":"Control.Monad.Writer.Trans","detail":"instance functorWriterT :: (Functor m) =\u003e Functor (WriterT w m)"},{"library":"purescript-transformers","name":"applyWriterT","module":"Control.Monad.Writer.Trans","detail":"instance applyWriterT :: (Monoid w, Apply m) =\u003e Apply (WriterT w m)"},{"library":"purescript-transformers","name":"applicativeWriterT","module":"Control.Monad.Writer.Trans","detail":"instance applicativeWriterT :: (Monoid w, Applicative m) =\u003e Applicative (WriterT w m)"},{"library":"purescript-transformers","name":"altWriterT","module":"Control.Monad.Writer.Trans","detail":"instance altWriterT :: (Monoid w, Alt m) =\u003e Alt (WriterT w m)"},{"library":"purescript-transformers","name":"plusWriterT","module":"Control.Monad.Writer.Trans","detail":"instance plusWriterT :: (Monoid w, Plus m) =\u003e Plus (WriterT w m)"},{"library":"purescript-transformers","name":"alternativeWriterT","module":"Control.Monad.Writer.Trans","detail":"instance alternativeWriterT :: (Monoid w, Alternative m) =\u003e Alternative (WriterT w m)"},{"library":"purescript-transformers","name":"bindWriterT","module":"Control.Monad.Writer.Trans","detail":"instance bindWriterT :: (Monoid w, Monad m) =\u003e Bind (WriterT w m)"},{"library":"purescript-transformers","name":"monadWriterT","module":"Control.Monad.Writer.Trans","detail":"instance monadWriterT :: (Monoid w, Monad m) =\u003e Monad (WriterT w m)"},{"library":"purescript-transformers","name":"monadPlusWriterT","module":"Control.Monad.Writer.Trans","detail":"instance monadPlusWriterT :: (Monoid w, MonadPlus m) =\u003e MonadPlus (WriterT w m)"},{"library":"purescript-transformers","name":"monadTransWriterT","module":"Control.Monad.Writer.Trans","detail":"instance monadTransWriterT :: (Monoid w) =\u003e MonadTrans (WriterT w)"},{"library":"purescript-transformers","name":"liftCatchWriter","module":"Control.Monad.Writer.Trans","detail":"liftCatchWriter :: forall w m e a. (m (Tuple a w) -\u003e (e -\u003e m (Tuple a w)) -\u003e m (Tuple a w)) -\u003e WriterT w m a -\u003e (e -\u003e WriterT w m a) -\u003e WriterT w m a"},{"library":"purescript-transformers","name":"liftCallCCWriter","module":"Control.Monad.Writer.Trans","detail":"liftCallCCWriter :: forall w m a b. (Monoid w) =\u003e (((Tuple a w -\u003e m (Tuple b w)) -\u003e m (Tuple a w)) -\u003e m (Tuple a w)) -\u003e ((a -\u003e WriterT w m b) -\u003e WriterT w m a) -\u003e WriterT w m a"},{"library":"purescript-transformers","name":"MonadWriter","module":"Control.Monad.Writer.Class","detail":"class MonadWriter w m where"},{"library":"purescript-transformers","name":"writer","module":"Control.Monad.Writer.Class","detail":"writer :: forall a. Tuple a w -\u003e m a"},{"library":"purescript-transformers","name":"listen","module":"Control.Monad.Writer.Class","detail":"listen :: forall a. m a -\u003e m (Tuple a w)"},{"library":"purescript-transformers","name":"pass","module":"Control.Monad.Writer.Class","detail":"pass :: forall a. m (Tuple a (w -\u003e w)) -\u003e m a"},{"library":"purescript-transformers","name":"tell","module":"Control.Monad.Writer.Class","detail":"tell :: forall w m a. (Monoid w, Monad m, MonadWriter w m) =\u003e w -\u003e m Unit"},{"library":"purescript-transformers","name":"listens","module":"Control.Monad.Writer.Class","detail":"listens :: forall w m a b. (Monoid w, Monad m, MonadWriter w m) =\u003e (w -\u003e b) -\u003e m a -\u003e m (Tuple a b)"},{"library":"purescript-transformers","name":"censor","module":"Control.Monad.Writer.Class","detail":"censor :: forall w m a. (Monoid w, Monad m, MonadWriter w m) =\u003e (w -\u003e w) -\u003e m a -\u003e m a"},{"library":"purescript-transformers","name":"monadWriterWriterT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterWriterT :: (Monoid w, Monad m) =\u003e MonadWriter w (WriterT w m)"},{"library":"purescript-transformers","name":"monadWriterErrorT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterErrorT :: (Monad m, Error e, MonadWriter w m) =\u003e MonadWriter w (ErrorT e m)"},{"library":"purescript-transformers","name":"monadWriterMaybeT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterMaybeT :: (Monad m, MonadWriter w m) =\u003e MonadWriter w (MaybeT m)"},{"library":"purescript-transformers","name":"monadWriterStateT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterStateT :: (Monad m, MonadWriter w m) =\u003e MonadWriter w (StateT s m)"},{"library":"purescript-transformers","name":"monadWriterReaderT","module":"Control.Monad.Writer.Class","detail":"instance monadWriterReaderT :: (Monad m, MonadWriter w m) =\u003e MonadWriter w (ReaderT r m)"},{"library":"purescript-transformers","name":"monadWriterRWST","module":"Control.Monad.Writer.Class","detail":"instance monadWriterRWST :: (Monad m, Monoid w) =\u003e MonadWriter w (RWST r w s m)"},{"library":"purescript-transformers","name":"ContT","module":"Control.Monad.Cont.Trans","detail":"newtype ContT r m a = ContT ((a -\u003e m r) -\u003e m r)"},{"library":"purescript-transformers","name":"ContT","module":"Control.Monad.Cont.Trans","detail":"newtype ContT r m a = ContT ((a -\u003e m r) -\u003e m r)"},{"library":"purescript-transformers","name":"runContT","module":"Control.Monad.Cont.Trans","detail":"runContT :: forall r m a. ContT r m a -\u003e (a -\u003e m r) -\u003e m r"},{"library":"purescript-transformers","name":"mapContT","module":"Control.Monad.Cont.Trans","detail":"mapContT :: forall r m a. (m r -\u003e m r) -\u003e ContT r m a -\u003e ContT r m a"},{"library":"purescript-transformers","name":"withContT","module":"Control.Monad.Cont.Trans","detail":"withContT :: forall r m a b. ((b -\u003e m r) -\u003e a -\u003e m r) -\u003e ContT r m a -\u003e ContT r m b"},{"library":"purescript-transformers","name":"callCC","module":"Control.Monad.Cont.Trans","detail":"callCC :: forall r m a b. ((a -\u003e ContT r m b) -\u003e ContT r m a) -\u003e ContT r m a"},{"library":"purescript-transformers","name":"functorContT","module":"Control.Monad.Cont.Trans","detail":"instance functorContT :: (Monad m) =\u003e Functor (ContT r m)"},{"library":"purescript-transformers","name":"applyContT","module":"Control.Monad.Cont.Trans","detail":"instance applyContT :: (Functor m, Monad m) =\u003e Apply (ContT r m)"},{"library":"purescript-transformers","name":"applicativeContT","module":"Control.Monad.Cont.Trans","detail":"instance applicativeContT :: (Functor m, Monad m) =\u003e Applicative (ContT r m)"},{"library":"purescript-transformers","name":"bindContT","module":"Control.Monad.Cont.Trans","detail":"instance bindContT :: (Monad m) =\u003e Bind (ContT r m)"},{"library":"purescript-transformers","name":"monadContT","module":"Control.Monad.Cont.Trans","detail":"instance monadContT :: (Monad m) =\u003e Monad (ContT r m)"},{"library":"purescript-transformers","name":"monadTransContT","module":"Control.Monad.Cont.Trans","detail":"instance monadTransContT :: MonadTrans (ContT r)"},{"library":"purescript-transformers","name":"MonadCont","module":"Control.Monad.Cont.Class","detail":"class MonadCont m where"},{"library":"purescript-transformers","name":"callCC","module":"Control.Monad.Cont.Class","detail":"callCC :: forall a b. ((a -\u003e m b) -\u003e m a) -\u003e m a"},{"library":"purescript-transformers","name":"monadContContT","module":"Control.Monad.Cont.Class","detail":"instance monadContContT :: (Monad m) =\u003e MonadCont (Cont.ContT r m)"},{"library":"purescript-transformers","name":"monadContErrorT","module":"Control.Monad.Cont.Class","detail":"instance monadContErrorT :: (Error e, MonadCont m) =\u003e MonadCont (ErrorT e m)"},{"library":"purescript-transformers","name":"monadContMaybeT","module":"Control.Monad.Cont.Class","detail":"instance monadContMaybeT :: (MonadCont m) =\u003e MonadCont (MaybeT m)"},{"library":"purescript-transformers","name":"monadContReaderT","module":"Control.Monad.Cont.Class","detail":"instance monadContReaderT :: (MonadCont m) =\u003e MonadCont (ReaderT r m)"},{"library":"purescript-transformers","name":"monadContStateT","module":"Control.Monad.Cont.Class","detail":"instance monadContStateT :: (MonadCont m) =\u003e MonadCont (StateT s m)"},{"library":"purescript-transformers","name":"monadWriterT","module":"Control.Monad.Cont.Class","detail":"instance monadWriterT :: (Monoid w, MonadCont m) =\u003e MonadCont (WriterT w m)"},{"library":"purescript-transformers","name":"StateT","module":"Control.Monad.State.Trans","detail":"newtype StateT s m a = StateT (s -\u003e m (Tuple a s))"},{"library":"purescript-transformers","name":"StateT","module":"Control.Monad.State.Trans","detail":"newtype StateT s m a = StateT (s -\u003e m (Tuple a s))"},{"library":"purescript-transformers","name":"runStateT","module":"Control.Monad.State.Trans","detail":"runStateT :: forall s m a. StateT s m a -\u003e s -\u003e m (Tuple a s)"},{"library":"purescript-transformers","name":"evalStateT","module":"Control.Monad.State.Trans","detail":"evalStateT :: forall s m a. (Apply m) =\u003e StateT s m a -\u003e s -\u003e m a"},{"library":"purescript-transformers","name":"execStateT","module":"Control.Monad.State.Trans","detail":"execStateT :: forall s m a. (Apply m) =\u003e StateT s m a -\u003e s -\u003e m s"},{"library":"purescript-transformers","name":"mapStateT","module":"Control.Monad.State.Trans","detail":"mapStateT :: forall s m1 m2 a b. (m1 (Tuple a s) -\u003e m2 (Tuple b s)) -\u003e StateT s m1 a -\u003e StateT s m2 b"},{"library":"purescript-transformers","name":"withStateT","module":"Control.Monad.State.Trans","detail":"withStateT :: forall s m a. (s -\u003e s) -\u003e StateT s m a -\u003e StateT s m a"},{"library":"purescript-transformers","name":"functorStateT","module":"Control.Monad.State.Trans","detail":"instance functorStateT :: (Monad m) =\u003e Functor (StateT s m)"},{"library":"purescript-transformers","name":"applyStateT","module":"Control.Monad.State.Trans","detail":"instance applyStateT :: (Monad m) =\u003e Apply (StateT s m)"},{"library":"purescript-transformers","name":"applicativeStateT","module":"Control.Monad.State.Trans","detail":"instance applicativeStateT :: (Monad m) =\u003e Applicative (StateT s m)"},{"library":"purescript-transformers","name":"altStateT","module":"Control.Monad.State.Trans","detail":"instance altStateT :: (Monad m, Alt m) =\u003e Alt (StateT s m)"},{"library":"purescript-transformers","name":"plusStateT","module":"Control.Monad.State.Trans","detail":"instance plusStateT :: (Monad m, Plus m) =\u003e Plus (StateT s m)"},{"library":"purescript-transformers","name":"alternativeStateT","module":"Control.Monad.State.Trans","detail":"instance alternativeStateT :: (Monad m, Alternative m) =\u003e Alternative (StateT s m)"},{"library":"purescript-transformers","name":"bindStateT","module":"Control.Monad.State.Trans","detail":"instance bindStateT :: (Monad m) =\u003e Bind (StateT s m)"},{"library":"purescript-transformers","name":"monadStateT","module":"Control.Monad.State.Trans","detail":"instance monadStateT :: (Monad m) =\u003e Monad (StateT s m)"},{"library":"purescript-transformers","name":"monadPlusStateT","module":"Control.Monad.State.Trans","detail":"instance monadPlusStateT :: (MonadPlus m) =\u003e MonadPlus (StateT s m)"},{"library":"purescript-transformers","name":"monadTransStateT","module":"Control.Monad.State.Trans","detail":"instance monadTransStateT :: MonadTrans (StateT s)"},{"library":"purescript-transformers","name":"lazy1StateT","module":"Control.Monad.State.Trans","detail":"instance lazy1StateT :: Lazy1 (StateT s m)"},{"library":"purescript-transformers","name":"liftCatchState","module":"Control.Monad.State.Trans","detail":"liftCatchState :: forall s m e a. (m (Tuple a s) -\u003e (e -\u003e m (Tuple a s)) -\u003e m (Tuple a s)) -\u003e StateT s m a -\u003e (e -\u003e StateT s m a) -\u003e StateT s m a"},{"library":"purescript-transformers","name":"liftListenState","module":"Control.Monad.State.Trans","detail":"liftListenState :: forall s m a w. (Monad m) =\u003e (m (Tuple a s) -\u003e m (Tuple (Tuple a s) w)) -\u003e StateT s m a -\u003e StateT s m (Tuple a w)"},{"library":"purescript-transformers","name":"liftPassState","module":"Control.Monad.State.Trans","detail":"liftPassState :: forall s m a b w. (Monad m) =\u003e (m (Tuple (Tuple a s) b) -\u003e m (Tuple a s)) -\u003e StateT s m (Tuple a b) -\u003e StateT s m a"},{"library":"purescript-transformers","name":"liftCallCCState","module":"Control.Monad.State.Trans","detail":"liftCallCCState :: forall s m a b. (((Tuple a s -\u003e m (Tuple b s)) -\u003e m (Tuple a s)) -\u003e m (Tuple a s)) -\u003e ((a -\u003e StateT s m b) -\u003e StateT s m a) -\u003e StateT s m a"},{"library":"purescript-transformers","name":"liftCallCCState'","module":"Control.Monad.State.Trans","detail":"liftCallCCState' :: forall s m a b. (((Tuple a s -\u003e m (Tuple b s)) -\u003e m (Tuple a s)) -\u003e m (Tuple a s)) -\u003e ((a -\u003e StateT s m b) -\u003e StateT s m a) -\u003e StateT s m a"},{"library":"purescript-transformers","name":"MonadState","module":"Control.Monad.State.Class","detail":"class MonadState s m where"},{"library":"purescript-transformers","name":"state","module":"Control.Monad.State.Class","detail":"state :: forall a. (s -\u003e Tuple a s) -\u003e m a"},{"library":"purescript-transformers","name":"get","module":"Control.Monad.State.Class","detail":"get :: forall m s. (Monad m, MonadState s m) =\u003e m s"},{"library":"purescript-transformers","name":"gets","module":"Control.Monad.State.Class","detail":"gets :: forall s m a. (Monad m, MonadState s m) =\u003e (s -\u003e a) -\u003e m a"},{"library":"purescript-transformers","name":"put","module":"Control.Monad.State.Class","detail":"put :: forall m s. (Monad m, MonadState s m) =\u003e s -\u003e m Unit"},{"library":"purescript-transformers","name":"modify","module":"Control.Monad.State.Class","detail":"modify :: forall s m. (Monad m, MonadState s m) =\u003e (s -\u003e s) -\u003e m Unit"},{"library":"purescript-transformers","name":"monadStateStateT","module":"Control.Monad.State.Class","detail":"instance monadStateStateT :: (Monad m) =\u003e MonadState s (StateT s m)"},{"library":"purescript-transformers","name":"monadStateStateT1","module":"Control.Monad.State.Class","detail":"instance monadStateStateT1 :: (Monad m, MonadState s m) =\u003e MonadState s (StateT s1 m)"},{"library":"purescript-transformers","name":"monadStateErrorT","module":"Control.Monad.State.Class","detail":"instance monadStateErrorT :: (Monad m, Error e, MonadState s m) =\u003e MonadState s (ErrorT e m)"},{"library":"purescript-transformers","name":"monadStateMaybeT","module":"Control.Monad.State.Class","detail":"instance monadStateMaybeT :: (Monad m, MonadState s m) =\u003e MonadState s (MaybeT m)"},{"library":"purescript-transformers","name":"monadStateReaderT","module":"Control.Monad.State.Class","detail":"instance monadStateReaderT :: (Monad m, MonadState s m) =\u003e MonadState s (ReaderT r m)"},{"library":"purescript-transformers","name":"monadStateWriterT","module":"Control.Monad.State.Class","detail":"instance monadStateWriterT :: (Monad m, Monoid w, MonadState s m) =\u003e MonadState s (WriterT w m)"},{"library":"purescript-transformers","name":"monadStateRWST","module":"Control.Monad.State.Class","detail":"instance monadStateRWST :: (Monad m, Monoid w) =\u003e MonadState s (RWST r w s m)"},{"library":"purescript-transformers","name":"ReaderT","module":"Control.Monad.Reader.Trans","detail":"newtype ReaderT r m a = ReaderT (r -\u003e m a)"},{"library":"purescript-transformers","name":"ReaderT","module":"Control.Monad.Reader.Trans","detail":"newtype ReaderT r m a = ReaderT (r -\u003e m a)"},{"library":"purescript-transformers","name":"runReaderT","module":"Control.Monad.Reader.Trans","detail":"runReaderT :: forall r m a. ReaderT r m a -\u003e r -\u003e m a"},{"library":"purescript-transformers","name":"withReaderT","module":"Control.Monad.Reader.Trans","detail":"withReaderT :: forall r1 r2 m a b. (r2 -\u003e r1) -\u003e ReaderT r1 m a -\u003e ReaderT r2 m a"},{"library":"purescript-transformers","name":"mapReaderT","module":"Control.Monad.Reader.Trans","detail":"mapReaderT :: forall r m1 m2 a b. (m1 a -\u003e m2 b) -\u003e ReaderT r m1 a -\u003e ReaderT r m2 b"},{"library":"purescript-transformers","name":"liftReaderT","module":"Control.Monad.Reader.Trans","detail":"liftReaderT :: forall r m a. m a -\u003e ReaderT r m a"},{"library":"purescript-transformers","name":"functorReaderT","module":"Control.Monad.Reader.Trans","detail":"instance functorReaderT :: (Functor m) =\u003e Functor (ReaderT r m)"},{"library":"purescript-transformers","name":"applyReaderT","module":"Control.Monad.Reader.Trans","detail":"instance applyReaderT :: (Applicative m) =\u003e Apply (ReaderT r m)"},{"library":"purescript-transformers","name":"applicativeReaderT","module":"Control.Monad.Reader.Trans","detail":"instance applicativeReaderT :: (Applicative m) =\u003e Applicative (ReaderT r m)"},{"library":"purescript-transformers","name":"altReaderT","module":"Control.Monad.Reader.Trans","detail":"instance altReaderT :: (Alt m) =\u003e Alt (ReaderT r m)"},{"library":"purescript-transformers","name":"plusReaderT","module":"Control.Monad.Reader.Trans","detail":"instance plusReaderT :: (Plus m) =\u003e Plus (ReaderT r m)"},{"library":"purescript-transformers","name":"alternativeReaderT","module":"Control.Monad.Reader.Trans","detail":"instance alternativeReaderT :: (Alternative m) =\u003e Alternative (ReaderT r m)"},{"library":"purescript-transformers","name":"bindReaderT","module":"Control.Monad.Reader.Trans","detail":"instance bindReaderT :: (Monad m) =\u003e Bind (ReaderT r m)"},{"library":"purescript-transformers","name":"monadReaderT","module":"Control.Monad.Reader.Trans","detail":"instance monadReaderT :: (Monad m) =\u003e Monad (ReaderT r m)"},{"library":"purescript-transformers","name":"monadPlusReaderT","module":"Control.Monad.Reader.Trans","detail":"instance monadPlusReaderT :: (MonadPlus m) =\u003e MonadPlus (ReaderT r m)"},{"library":"purescript-transformers","name":"monadTransReaderT","module":"Control.Monad.Reader.Trans","detail":"instance monadTransReaderT :: MonadTrans (ReaderT r)"},{"library":"purescript-transformers","name":"liftCatchReader","module":"Control.Monad.Reader.Trans","detail":"liftCatchReader :: forall r m e a. (m a -\u003e (e -\u003e m a) -\u003e m a) -\u003e ReaderT r m a -\u003e (e -\u003e ReaderT r m a) -\u003e ReaderT r m a"},{"library":"purescript-transformers","name":"liftCallCCReader","module":"Control.Monad.Reader.Trans","detail":"liftCallCCReader :: forall r m a b. (((a -\u003e m b) -\u003e m a) -\u003e m a) -\u003e ((a -\u003e ReaderT r m b) -\u003e ReaderT r m a) -\u003e ReaderT r m a"},{"library":"purescript-transformers","name":"MonadReader","module":"Control.Monad.Reader.Class","detail":"class MonadReader r m where"},{"library":"purescript-transformers","name":"ask","module":"Control.Monad.Reader.Class","detail":"ask :: m r"},{"library":"purescript-transformers","name":"local","module":"Control.Monad.Reader.Class","detail":"local :: forall a. (r -\u003e r) -\u003e m a -\u003e m a"},{"library":"purescript-transformers","name":"reader","module":"Control.Monad.Reader.Class","detail":"reader :: forall r m a. (Monad m, MonadReader r m) =\u003e (r -\u003e a) -\u003e m a"},{"library":"purescript-transformers","name":"monadReaderFun","module":"Control.Monad.Reader.Class","detail":"instance monadReaderFun :: MonadReader r (Prim.Function r)"},{"library":"purescript-transformers","name":"monadReaderReaderT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderReaderT :: (Monad m) =\u003e MonadReader r (ReaderT r m)"},{"library":"purescript-transformers","name":"monadReaderErrorT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderErrorT :: (Monad m, Error e, MonadReader r m) =\u003e MonadReader r (ErrorT e m)"},{"library":"purescript-transformers","name":"monadReaderMaybeT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderMaybeT :: (Monad m, MonadReader r m) =\u003e MonadReader r (MaybeT m)"},{"library":"purescript-transformers","name":"monadReaderWriterT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderWriterT :: (Monad m, Monoid w, MonadReader r m) =\u003e MonadReader r (WriterT w m)"},{"library":"purescript-transformers","name":"monadReaderStateT","module":"Control.Monad.Reader.Class","detail":"instance monadReaderStateT :: (Monad m, MonadReader r m) =\u003e MonadReader r (StateT s m)"},{"library":"purescript-transformers","name":"monadReaderRWST","module":"Control.Monad.Reader.Class","detail":"instance monadReaderRWST :: (Monad m, Monoid w) =\u003e MonadReader r (RWST r w s m)"},{"library":"purescript-transformers","name":"See","module":"Control.Monad.RWS.Trans","detail":"type See s a w = { log :: w, result :: a, state :: s }"},{"library":"purescript-transformers","name":"mkSee","module":"Control.Monad.RWS.Trans","detail":"mkSee :: forall s a w. (Monoid w) =\u003e s -\u003e a -\u003e w -\u003e See s a w"},{"library":"purescript-transformers","name":"RWST","module":"Control.Monad.RWS.Trans","detail":"newtype RWST r w s m a = RWST (r -\u003e s -\u003e m (See s a w))"},{"library":"purescript-transformers","name":"RWST","module":"Control.Monad.RWS.Trans","detail":"newtype RWST r w s m a = RWST (r -\u003e s -\u003e m (See s a w))"},{"library":"purescript-transformers","name":"runRWST","module":"Control.Monad.RWS.Trans","detail":"runRWST :: forall r w s m a. RWST r w s m a -\u003e r -\u003e s -\u003e m (See s a w)"},{"library":"purescript-transformers","name":"evalRWST","module":"Control.Monad.RWS.Trans","detail":"evalRWST :: forall r w s m a. (Monad m) =\u003e RWST r w s m a -\u003e r -\u003e s -\u003e m (Tuple a w)"},{"library":"purescript-transformers","name":"execRWST","module":"Control.Monad.RWS.Trans","detail":"execRWST :: forall r w s m a. (Monad m) =\u003e RWST r w s m a -\u003e r -\u003e s -\u003e m (Tuple s w)"},{"library":"purescript-transformers","name":"mapRWST","module":"Control.Monad.RWS.Trans","detail":"mapRWST :: forall r w1 w2 s m1 m2 a1 a2. (m1 (See s a1 w1) -\u003e m2 (See s a2 w2)) -\u003e RWST r w1 s m1 a1 -\u003e RWST r w2 s m2 a2"},{"library":"purescript-transformers","name":"withRWST","module":"Control.Monad.RWS.Trans","detail":"withRWST :: forall r1 r2 w s m a. (r2 -\u003e s -\u003e Tuple r1 s) -\u003e RWST r1 w s m a -\u003e RWST r2 w s m a"},{"library":"purescript-transformers","name":"functorRWST","module":"Control.Monad.RWS.Trans","detail":"instance functorRWST :: (Functor m) =\u003e Functor (RWST r w s m)"},{"library":"purescript-transformers","name":"applyRWST","module":"Control.Monad.RWS.Trans","detail":"instance applyRWST :: (Apply m, Semigroup w) =\u003e Apply (RWST r w s m)"},{"library":"purescript-transformers","name":"bindRWST","module":"Control.Monad.RWS.Trans","detail":"instance bindRWST :: (Bind m, Semigroup w) =\u003e Bind (RWST r w s m)"},{"library":"purescript-transformers","name":"applicativeRWST","module":"Control.Monad.RWS.Trans","detail":"instance applicativeRWST :: (Applicative m, Monoid w) =\u003e Applicative (RWST r w s m)"},{"library":"purescript-transformers","name":"monadRWST","module":"Control.Monad.RWS.Trans","detail":"instance monadRWST :: (Monad m, Monoid w) =\u003e Monad (RWST r w s m)"},{"library":"purescript-transformers","name":"monadTransRWST","module":"Control.Monad.RWS.Trans","detail":"instance monadTransRWST :: (Monoid w) =\u003e MonadTrans (RWST r w s)"},{"library":"purescript-transformers","name":"MonadRWS","module":"Control.Monad.RWS.Class","detail":"class (Monad m, Monoid w, MonadReader r m, MonadWriter w m, MonadState s m) \u003c= MonadRWS r w s m where"},{"library":"purescript-transformers","name":"monadRWSRWST","module":"Control.Monad.RWS.Class","detail":"instance monadRWSRWST :: (Monad m, Monoid w) =\u003e MonadRWS r w s (RWST r w s m)"},{"library":"purescript-transformers","name":"monadRWSErrorT","module":"Control.Monad.RWS.Class","detail":"instance monadRWSErrorT :: (Monad m, Monoid w, MonadRWS r w s m, MonadReader r m, MonadWriter w m, MonadState s m, Error e) =\u003e MonadRWS r w s (ErrorT e m)"},{"library":"purescript-transformers","name":"monadRWSMaybeT","module":"Control.Monad.RWS.Class","detail":"instance monadRWSMaybeT :: (Monad m, Monoid w, MonadRWS r w s m, MonadReader r m, MonadWriter w m, MonadState s m) =\u003e MonadRWS r w s (MaybeT m)"},{"library":"purescript-transformers","name":"ComonadTrans","module":"Control.Comonad.Trans","detail":"class ComonadTrans f where"},{"library":"purescript-transformers","name":"lower","module":"Control.Comonad.Trans","detail":"lower :: forall w a. (Comonad w) =\u003e f w a -\u003e w a"},{"library":"purescript-transformers","name":"Store","module":"Control.Comonad.Store","detail":"type Store s a = StoreT s Identity a"},{"library":"purescript-transformers","name":"runStore","module":"Control.Comonad.Store","detail":"runStore :: forall s a. Store s a -\u003e Tuple (s -\u003e a) s"},{"library":"purescript-transformers","name":"store","module":"Control.Comonad.Store","detail":"store :: forall s a. (s -\u003e a) -\u003e s -\u003e Store s a"},{"library":"purescript-transformers","name":"Traced","module":"Control.Comonad.Traced","detail":"type Traced m = TracedT m Identity"},{"library":"purescript-transformers","name":"runTraced","module":"Control.Comonad.Traced","detail":"runTraced :: forall m a. Traced m a -\u003e m -\u003e a"},{"library":"purescript-transformers","name":"traced","module":"Control.Comonad.Traced","detail":"traced :: forall m a. (m -\u003e a) -\u003e Traced m a"},{"library":"purescript-transformers","name":"Env","module":"Control.Comonad.Env","detail":"type Env e = EnvT e Identity"},{"library":"purescript-transformers","name":"runEnv","module":"Control.Comonad.Env","detail":"runEnv :: forall e a. Env e a -\u003e Tuple e a"},{"library":"purescript-transformers","name":"withEnv","module":"Control.Comonad.Env","detail":"withEnv :: forall e1 e2 a. (e1 -\u003e e2) -\u003e Env e1 a -\u003e Env e2 a"},{"library":"purescript-transformers","name":"mapEnv","module":"Control.Comonad.Env","detail":"mapEnv :: forall e a b. (a -\u003e b) -\u003e Env e a -\u003e Env e b"},{"library":"purescript-transformers","name":"env","module":"Control.Comonad.Env","detail":"env :: forall e a. e -\u003e a -\u003e Env e a"},{"library":"purescript-transformers","name":"EnvT","module":"Control.Comonad.Env.Trans","detail":"newtype EnvT e w a = EnvT (Tuple e (w a))"},{"library":"purescript-transformers","name":"EnvT","module":"Control.Comonad.Env.Trans","detail":"newtype EnvT e w a = EnvT (Tuple e (w a))"},{"library":"purescript-transformers","name":"runEnvT","module":"Control.Comonad.Env.Trans","detail":"runEnvT :: forall e w a. EnvT e w a -\u003e Tuple e (w a)"},{"library":"purescript-transformers","name":"withEnvT","module":"Control.Comonad.Env.Trans","detail":"withEnvT :: forall e1 e2 w a. (e1 -\u003e e2) -\u003e EnvT e1 w a -\u003e EnvT e2 w a"},{"library":"purescript-transformers","name":"mapEnvT","module":"Control.Comonad.Env.Trans","detail":"mapEnvT :: forall e w1 w2 a b. (w1 a -\u003e w2 b) -\u003e EnvT e w1 a -\u003e EnvT e w2 b"},{"library":"purescript-transformers","name":"functorEnvT","module":"Control.Comonad.Env.Trans","detail":"instance functorEnvT :: (Functor w) =\u003e Functor (EnvT e w)"},{"library":"purescript-transformers","name":"extendEnvT","module":"Control.Comonad.Env.Trans","detail":"instance extendEnvT :: (Extend w) =\u003e Extend (EnvT e w)"},{"library":"purescript-transformers","name":"comonadEnvT","module":"Control.Comonad.Env.Trans","detail":"instance comonadEnvT :: (Comonad w) =\u003e Comonad (EnvT e w)"},{"library":"purescript-transformers","name":"comonadTransEnvT","module":"Control.Comonad.Env.Trans","detail":"instance comonadTransEnvT :: ComonadTrans (EnvT e)"},{"library":"purescript-transformers","name":"ComonadEnv","module":"Control.Comonad.Env.Class","detail":"class (Comonad w) \u003c= ComonadEnv e w where"},{"library":"purescript-transformers","name":"ask","module":"Control.Comonad.Env.Class","detail":"ask :: forall a. w a -\u003e e"},{"library":"purescript-transformers","name":"local","module":"Control.Comonad.Env.Class","detail":"local :: forall a. (e -\u003e e) -\u003e w a -\u003e w a"},{"library":"purescript-transformers","name":"comonadEnvTuple","module":"Control.Comonad.Env.Class","detail":"instance comonadEnvTuple :: ComonadEnv e (Tuple e)"},{"library":"purescript-transformers","name":"comonadEnvEnvT","module":"Control.Comonad.Env.Class","detail":"instance comonadEnvEnvT :: (Comonad w) =\u003e ComonadEnv e (EnvT e w)"},{"library":"purescript-transformers","name":"asks","module":"Control.Comonad.Env.Class","detail":"asks :: forall e1 e2 w a. (ComonadEnv e1 w) =\u003e (e1 -\u003e e2) -\u003e w e1 -\u003e e2"},{"library":"purescript-transformers","name":"StoreT","module":"Control.Comonad.Store.Trans","detail":"newtype StoreT s w a = StoreT (Tuple (w (s -\u003e a)) s)"},{"library":"purescript-transformers","name":"StoreT","module":"Control.Comonad.Store.Trans","detail":"newtype StoreT s w a = StoreT (Tuple (w (s -\u003e a)) s)"},{"library":"purescript-transformers","name":"runStoreT","module":"Control.Comonad.Store.Trans","detail":"runStoreT :: forall s w a. StoreT s w a -\u003e Tuple (w (s -\u003e a)) s"},{"library":"purescript-transformers","name":"functorStoreT","module":"Control.Comonad.Store.Trans","detail":"instance functorStoreT :: (Functor w) =\u003e Functor (StoreT s w)"},{"library":"purescript-transformers","name":"extendStoreT","module":"Control.Comonad.Store.Trans","detail":"instance extendStoreT :: (Extend w) =\u003e Extend (StoreT s w)"},{"library":"purescript-transformers","name":"comonadStoreT","module":"Control.Comonad.Store.Trans","detail":"instance comonadStoreT :: (Comonad w) =\u003e Comonad (StoreT s w)"},{"library":"purescript-transformers","name":"comonadTransStoreT","module":"Control.Comonad.Store.Trans","detail":"instance comonadTransStoreT :: ComonadTrans (StoreT s)"},{"library":"purescript-transformers","name":"ComonadStore","module":"Control.Comonad.Store.Class","detail":"class (Comonad w) \u003c= ComonadStore s w where"},{"library":"purescript-transformers","name":"pos","module":"Control.Comonad.Store.Class","detail":"pos :: forall a. w a -\u003e s"},{"library":"purescript-transformers","name":"peek","module":"Control.Comonad.Store.Class","detail":"peek :: forall a. s -\u003e w a -\u003e a"},{"library":"purescript-transformers","name":"comonadStoreStoreT","module":"Control.Comonad.Store.Class","detail":"instance comonadStoreStoreT :: (Comonad w) =\u003e ComonadStore s (StoreT s w)"},{"library":"purescript-transformers","name":"experiment","module":"Control.Comonad.Store.Class","detail":"experiment :: forall f a w s. (ComonadStore s w, Functor f) =\u003e (s -\u003e f s) -\u003e w a -\u003e f a"},{"library":"purescript-transformers","name":"peeks","module":"Control.Comonad.Store.Class","detail":"peeks :: forall s a w. (ComonadStore s w) =\u003e (s -\u003e s) -\u003e w a -\u003e a"},{"library":"purescript-transformers","name":"seek","module":"Control.Comonad.Store.Class","detail":"seek :: forall s a w. (ComonadStore s w, Extend w) =\u003e s -\u003e w a -\u003e w a"},{"library":"purescript-transformers","name":"seeks","module":"Control.Comonad.Store.Class","detail":"seeks :: forall s a w. (ComonadStore s w, Extend w) =\u003e (s -\u003e s) -\u003e w a -\u003e w a"},{"library":"purescript-transformers","name":"TracedT","module":"Control.Comonad.Traced.Trans","detail":"newtype TracedT t w a = TracedT (w (t -\u003e a))"},{"library":"purescript-transformers","name":"TracedT","module":"Control.Comonad.Traced.Trans","detail":"newtype TracedT t w a = TracedT (w (t -\u003e a))"},{"library":"purescript-transformers","name":"runTracedT","module":"Control.Comonad.Traced.Trans","detail":"runTracedT :: forall w a t. TracedT t w a -\u003e w (t -\u003e a)"},{"library":"purescript-transformers","name":"functorTracedT","module":"Control.Comonad.Traced.Trans","detail":"instance functorTracedT :: (Functor w) =\u003e Functor (TracedT t w)"},{"library":"purescript-transformers","name":"extendTracedT","module":"Control.Comonad.Traced.Trans","detail":"instance extendTracedT :: (Extend w, Semigroup t) =\u003e Extend (TracedT t w)"},{"library":"purescript-transformers","name":"comonadTracedT","module":"Control.Comonad.Traced.Trans","detail":"instance comonadTracedT :: (Comonad w, Monoid t) =\u003e Comonad (TracedT t w)"},{"library":"purescript-transformers","name":"comonadTransTracedT","module":"Control.Comonad.Traced.Trans","detail":"instance comonadTransTracedT :: (Monoid t) =\u003e ComonadTrans (TracedT t)"},{"library":"purescript-transformers","name":"ComonadTraced","module":"Control.Comonad.Traced.Class","detail":"class (Comonad w) \u003c= ComonadTraced t w where"},{"library":"purescript-transformers","name":"track","module":"Control.Comonad.Traced.Class","detail":"track :: forall a. t -\u003e w a -\u003e a"},{"library":"purescript-transformers","name":"comonadTracedTracedT","module":"Control.Comonad.Traced.Class","detail":"instance comonadTracedTracedT :: (Comonad w, Monoid t) =\u003e ComonadTraced t (TracedT t w)"},{"library":"purescript-transformers","name":"tracks","module":"Control.Comonad.Traced.Class","detail":"tracks :: forall w a t. (Comonad w, ComonadTraced t w) =\u003e (a -\u003e t) -\u003e w a -\u003e a"},{"library":"purescript-transformers","name":"listen","module":"Control.Comonad.Traced.Class","detail":"listen :: forall w a t. (Functor w) =\u003e TracedT t w a -\u003e TracedT t w (Tuple a t)"},{"library":"purescript-transformers","name":"listens","module":"Control.Comonad.Traced.Class","detail":"listens :: forall w a t b. (Functor w) =\u003e (t -\u003e b) -\u003e TracedT t w a -\u003e TracedT t w (Tuple a b)"},{"library":"purescript-transformers","name":"censor","module":"Control.Comonad.Traced.Class","detail":"censor :: forall w a t b. (Functor w) =\u003e (t -\u003e t) -\u003e TracedT t w a -\u003e TracedT t w a"},{"library":"purescript-sets","name":"Set","module":"Data.Set","detail":"data Set a = Set (M.Map a P.Unit)"},{"library":"purescript-sets","name":"Set","module":"Data.Set","detail":"data Set a = Set (M.Map a P.Unit)"},{"library":"purescript-sets","name":"eqSet","module":"Data.Set","detail":"instance eqSet :: (P.Eq a) =\u003e P.Eq (Set a)"},{"library":"purescript-sets","name":"showSet","module":"Data.Set","detail":"instance showSet :: (P.Show a) =\u003e P.Show (Set a)"},{"library":"purescript-sets","name":"empty","module":"Data.Set","detail":"empty :: forall a. Set a"},{"library":"purescript-sets","name":"isEmpty","module":"Data.Set","detail":"isEmpty :: forall a. Set a -\u003e Boolean"},{"library":"purescript-sets","name":"singleton","module":"Data.Set","detail":"singleton :: forall a. a -\u003e Set a"},{"library":"purescript-sets","name":"checkValid","module":"Data.Set","detail":"checkValid :: forall a. Set a -\u003e Boolean"},{"library":"purescript-sets","name":"member","module":"Data.Set","detail":"member :: forall a. (P.Ord a) =\u003e a -\u003e Set a -\u003e Boolean"},{"library":"purescript-sets","name":"insert","module":"Data.Set","detail":"insert :: forall a. (P.Ord a) =\u003e a -\u003e Set a -\u003e Set a"},{"library":"purescript-sets","name":"delete","module":"Data.Set","detail":"delete :: forall a. (P.Ord a) =\u003e a -\u003e Set a -\u003e Set a"},{"library":"purescript-sets","name":"toList","module":"Data.Set","detail":"toList :: forall a. Set a -\u003e [a]"},{"library":"purescript-sets","name":"fromList","module":"Data.Set","detail":"fromList :: forall a. (P.Ord a) =\u003e [a] -\u003e Set a"},{"library":"purescript-sets","name":"union","module":"Data.Set","detail":"union :: forall a. (P.Ord a) =\u003e Set a -\u003e Set a -\u003e Set a"},{"library":"purescript-sets","name":"unions","module":"Data.Set","detail":"unions :: forall a. (P.Ord a) =\u003e [Set a] -\u003e Set a"},{"library":"purescript-sets","name":"difference","module":"Data.Set","detail":"difference :: forall a. (P.Ord a) =\u003e Set a -\u003e Set a -\u003e Set a"},{"library":"purescript-lazy","name":"Lazy","module":"Data.Lazy","detail":"data Lazy :: * -\u003e *"},{"library":"purescript-lazy","name":"defer","module":"Data.Lazy","detail":"defer :: forall a. (Unit -\u003e a) -\u003e Lazy a"},{"library":"purescript-lazy","name":"force","module":"Data.Lazy","detail":"force :: forall a. Lazy a -\u003e a"},{"library":"purescript-lazy","name":"functorLazy","module":"Data.Lazy","detail":"instance functorLazy :: Functor Lazy"},{"library":"purescript-lazy","name":"applyLazy","module":"Data.Lazy","detail":"instance applyLazy :: Apply Lazy"},{"library":"purescript-lazy","name":"applicativeLazy","module":"Data.Lazy","detail":"instance applicativeLazy :: Applicative Lazy"},{"library":"purescript-lazy","name":"bindLazy","module":"Data.Lazy","detail":"instance bindLazy :: Bind Lazy"},{"library":"purescript-lazy","name":"monadLazy","module":"Data.Lazy","detail":"instance monadLazy :: Monad Lazy"},{"library":"purescript-lazy","name":"extendLazy","module":"Data.Lazy","detail":"instance extendLazy :: Extend Lazy"},{"library":"purescript-lazy","name":"comonadLazy","module":"Data.Lazy","detail":"instance comonadLazy :: Comonad Lazy"},{"library":"purescript-lazy","name":"eqLazy","module":"Data.Lazy","detail":"instance eqLazy :: (Eq a) =\u003e Eq (Lazy a)"},{"library":"purescript-lazy","name":"ordLazy","module":"Data.Lazy","detail":"instance ordLazy :: (Ord a) =\u003e Ord (Lazy a)"},{"library":"purescript-lazy","name":"showLazy","module":"Data.Lazy","detail":"instance showLazy :: (Show a) =\u003e Show (Lazy a)"},{"library":"purescript-lazy","name":"lazy1Lazy","module":"Data.Lazy","detail":"instance lazy1Lazy :: CL.Lazy1 Lazy"},{"library":"purescript-lazy","name":"List","module":"Data.Lazy.List","detail":"data List a = Nil | Cons a (Lazy (List a))"},{"library":"purescript-lazy","name":"Nil","module":"Data.Lazy.List","detail":"data List a = Nil | Cons a (Lazy (List a))"},{"library":"purescript-lazy","name":"Cons","module":"Data.Lazy.List","detail":"data List a = Nil | Cons a (Lazy (List a))"},{"library":"purescript-lazy","name":"eqList","module":"Data.Lazy.List","detail":"instance eqList :: (Eq a) =\u003e Eq (List a)"},{"library":"purescript-lazy","name":"showList","module":"Data.Lazy.List","detail":"instance showList :: (Show a) =\u003e Show (List a)"},{"library":"purescript-lazy","name":"showItems","module":"Data.Lazy.List","detail":"showItems :: [String] -\u003e String"},{"library":"purescript-lazy","name":"semigroupList","module":"Data.Lazy.List","detail":"instance semigroupList :: Semigroup (List a)"},{"library":"purescript-lazy","name":"(\u003c.\u003e)","module":"Data.Lazy.List","detail":"(\u003c.\u003e) :: forall a. List a -\u003e Lazy (List a) -\u003e List a"},{"library":"purescript-lazy","name":"monoidList","module":"Data.Lazy.List","detail":"instance monoidList :: Monoid (List a)"},{"library":"purescript-lazy","name":"functorList","module":"Data.Lazy.List","detail":"instance functorList :: Functor List"},{"library":"purescript-lazy","name":"applyList","module":"Data.Lazy.List","detail":"instance applyList :: Apply List"},{"library":"purescript-lazy","name":"applicativeList","module":"Data.Lazy.List","detail":"instance applicativeList :: Applicative List"},{"library":"purescript-lazy","name":"bindList","module":"Data.Lazy.List","detail":"instance bindList :: Bind List"},{"library":"purescript-lazy","name":"monadList","module":"Data.Lazy.List","detail":"instance monadList :: Monad List"},{"library":"purescript-lazy","name":"toArray","module":"Data.Lazy.List","detail":"toArray :: forall a. List a -\u003e [a]"},{"library":"purescript-lazy","name":"fromArray","module":"Data.Lazy.List","detail":"fromArray :: forall a. [a] -\u003e List a"},{"library":"purescript-lazy","name":"repeat","module":"Data.Lazy.List","detail":"repeat :: forall a. a -\u003e List a"},{"library":"purescript-lazy","name":"take","module":"Data.Lazy.List","detail":"take :: forall a. Number -\u003e List a -\u003e List a"},{"library":"purescript-lazy","name":"drop","module":"Data.Lazy.List","detail":"drop :: forall a. Number -\u003e List a -\u003e List a"},{"library":"purescript-foreign","name":"Foreign","module":"Data.Foreign","detail":"data Foreign :: *"},{"library":"purescript-foreign","name":"ForeignError","module":"Data.Foreign","detail":"data ForeignError = TypeMismatch String String | ErrorAtIndex Number ForeignError | ErrorAtProperty String ForeignError | JSONError String"},{"library":"purescript-foreign","name":"TypeMismatch","module":"Data.Foreign","detail":"data ForeignError = TypeMismatch String String | ErrorAtIndex Number ForeignError | ErrorAtProperty String ForeignError | JSONError String"},{"library":"purescript-foreign","name":"ErrorAtIndex","module":"Data.Foreign","detail":"data ForeignError = TypeMismatch String String | ErrorAtIndex Number ForeignError | ErrorAtProperty String ForeignError | JSONError String"},{"library":"purescript-foreign","name":"ErrorAtProperty","module":"Data.Foreign","detail":"data ForeignError = TypeMismatch String String | ErrorAtIndex Number ForeignError | ErrorAtProperty String ForeignError | JSONError String"},{"library":"purescript-foreign","name":"JSONError","module":"Data.Foreign","detail":"data ForeignError = TypeMismatch String String | ErrorAtIndex Number ForeignError | ErrorAtProperty String ForeignError | JSONError String"},{"library":"purescript-foreign","name":"showForeignError","module":"Data.Foreign","detail":"instance showForeignError :: Show ForeignError"},{"library":"purescript-foreign","name":"eqForeignError","module":"Data.Foreign","detail":"instance eqForeignError :: Eq ForeignError"},{"library":"purescript-foreign","name":"F","module":"Data.Foreign","detail":"type F  = Either ForeignError"},{"library":"purescript-foreign","name":"parseJSONImpl","module":"Data.Foreign","detail":"parseJSONImpl :: forall r. Fn3 (String -\u003e r) (Foreign -\u003e r) String r"},{"library":"purescript-foreign","name":"parseJSON","module":"Data.Foreign","detail":"parseJSON :: String -\u003e F Foreign"},{"library":"purescript-foreign","name":"toForeign","module":"Data.Foreign","detail":"toForeign :: forall a. a -\u003e Foreign"},{"library":"purescript-foreign","name":"unsafeFromForeign","module":"Data.Foreign","detail":"unsafeFromForeign :: forall a. Foreign -\u003e a"},{"library":"purescript-foreign","name":"typeOf","module":"Data.Foreign","detail":"typeOf :: Foreign -\u003e String"},{"library":"purescript-foreign","name":"tagOf","module":"Data.Foreign","detail":"tagOf :: Foreign -\u003e String"},{"library":"purescript-foreign","name":"unsafeReadPrim","module":"Data.Foreign","detail":"unsafeReadPrim :: forall a. String -\u003e Foreign -\u003e F a"},{"library":"purescript-foreign","name":"isNull","module":"Data.Foreign","detail":"isNull :: Foreign -\u003e Boolean"},{"library":"purescript-foreign","name":"isUndefined","module":"Data.Foreign","detail":"isUndefined :: Foreign -\u003e Boolean"},{"library":"purescript-foreign","name":"isArray","module":"Data.Foreign","detail":"isArray :: Foreign -\u003e Boolean"},{"library":"purescript-foreign","name":"readString","module":"Data.Foreign","detail":"readString :: Foreign -\u003e F String"},{"library":"purescript-foreign","name":"readBoolean","module":"Data.Foreign","detail":"readBoolean :: Foreign -\u003e F Boolean"},{"library":"purescript-foreign","name":"readNumber","module":"Data.Foreign","detail":"readNumber :: Foreign -\u003e F Number"},{"library":"purescript-foreign","name":"readArray","module":"Data.Foreign","detail":"readArray :: Foreign -\u003e F [Foreign]"},{"library":"purescript-foreign","name":"Undefined","module":"Data.Foreign.Undefined","detail":"newtype Undefined a = Undefined (Maybe a)"},{"library":"purescript-foreign","name":"Undefined","module":"Data.Foreign.Undefined","detail":"newtype Undefined a = Undefined (Maybe a)"},{"library":"purescript-foreign","name":"runUndefined","module":"Data.Foreign.Undefined","detail":"runUndefined :: forall a. Undefined a -\u003e Maybe a"},{"library":"purescript-foreign","name":"readUndefined","module":"Data.Foreign.Undefined","detail":"readUndefined :: forall a. (Foreign -\u003e F a) -\u003e Foreign -\u003e F (Undefined a)"},{"library":"purescript-foreign","name":"Null","module":"Data.Foreign.Null","detail":"newtype Null a = Null (Maybe a)"},{"library":"purescript-foreign","name":"Null","module":"Data.Foreign.Null","detail":"newtype Null a = Null (Maybe a)"},{"library":"purescript-foreign","name":"runNull","module":"Data.Foreign.Null","detail":"runNull :: forall a. Null a -\u003e Maybe a"},{"library":"purescript-foreign","name":"readNull","module":"Data.Foreign.Null","detail":"readNull :: forall a. (Foreign -\u003e F a) -\u003e Foreign -\u003e F (Null a)"},{"library":"purescript-foreign","name":"unsafeKeys","module":"Data.Foreign.Keys","detail":"unsafeKeys :: Foreign -\u003e [String]"},{"library":"purescript-foreign","name":"keys","module":"Data.Foreign.Keys","detail":"keys :: Foreign -\u003e F [String]"},{"library":"purescript-foreign","name":"NullOrUndefined","module":"Data.Foreign.NullOrUndefined","detail":"newtype NullOrUndefined a = NullOrUndefined (Maybe a)"},{"library":"purescript-foreign","name":"NullOrUndefined","module":"Data.Foreign.NullOrUndefined","detail":"newtype NullOrUndefined a = NullOrUndefined (Maybe a)"},{"library":"purescript-foreign","name":"runNullOrUndefined","module":"Data.Foreign.NullOrUndefined","detail":"runNullOrUndefined :: forall a. NullOrUndefined a -\u003e Maybe a"},{"library":"purescript-foreign","name":"readNullOrUndefined","module":"Data.Foreign.NullOrUndefined","detail":"readNullOrUndefined :: forall a. (Foreign -\u003e F a) -\u003e Foreign -\u003e F (NullOrUndefined a)"},{"library":"purescript-foreign","name":"Index","module":"Data.Foreign.Index","detail":"class Index i where"},{"library":"purescript-foreign","name":"(!)","module":"Data.Foreign.Index","detail":"(!) :: Foreign -\u003e i -\u003e F Foreign"},{"library":"purescript-foreign","name":"hasProperty","module":"Data.Foreign.Index","detail":"hasProperty :: i -\u003e Foreign -\u003e Boolean"},{"library":"purescript-foreign","name":"hasOwnProperty","module":"Data.Foreign.Index","detail":"hasOwnProperty :: i -\u003e Foreign -\u003e Boolean"},{"library":"purescript-foreign","name":"errorAt","module":"Data.Foreign.Index","detail":"errorAt :: i -\u003e ForeignError -\u003e ForeignError"},{"library":"purescript-foreign","name":"unsafeReadPropImpl","module":"Data.Foreign.Index","detail":"unsafeReadPropImpl :: forall r k. Fn4 r (Foreign -\u003e r) k Foreign (F Foreign)"},{"library":"purescript-foreign","name":"unsafeReadProp","module":"Data.Foreign.Index","detail":"unsafeReadProp :: forall k. k -\u003e Foreign -\u003e F Foreign"},{"library":"purescript-foreign","name":"prop","module":"Data.Foreign.Index","detail":"prop :: String -\u003e Foreign -\u003e F Foreign"},{"library":"purescript-foreign","name":"index","module":"Data.Foreign.Index","detail":"index :: Number -\u003e Foreign -\u003e F Foreign"},{"library":"purescript-foreign","name":"unsafeHasOwnProperty","module":"Data.Foreign.Index","detail":"unsafeHasOwnProperty :: forall k. Fn2 k Foreign Boolean"},{"library":"purescript-foreign","name":"hasOwnPropertyImpl","module":"Data.Foreign.Index","detail":"hasOwnPropertyImpl :: forall k. k -\u003e Foreign -\u003e Boolean"},{"library":"purescript-foreign","name":"unsafeHasProperty","module":"Data.Foreign.Index","detail":"unsafeHasProperty :: forall k. Fn2 k Foreign Boolean"},{"library":"purescript-foreign","name":"hasPropertyImpl","module":"Data.Foreign.Index","detail":"hasPropertyImpl :: forall k. k -\u003e Foreign -\u003e Boolean"},{"library":"purescript-foreign","name":"indexString","module":"Data.Foreign.Index","detail":"instance indexString :: Index String"},{"library":"purescript-foreign","name":"indexNumber","module":"Data.Foreign.Index","detail":"instance indexNumber :: Index Number"},{"library":"purescript-foreign","name":"IsForeign","module":"Data.Foreign.Class","detail":"class IsForeign a where"},{"library":"purescript-foreign","name":"read","module":"Data.Foreign.Class","detail":"read :: Foreign -\u003e F a"},{"library":"purescript-foreign","name":"foreignIsForeign","module":"Data.Foreign.Class","detail":"instance foreignIsForeign :: IsForeign Foreign"},{"library":"purescript-foreign","name":"stringIsForeign","module":"Data.Foreign.Class","detail":"instance stringIsForeign :: IsForeign String"},{"library":"purescript-foreign","name":"booleanIsForeign","module":"Data.Foreign.Class","detail":"instance booleanIsForeign :: IsForeign Boolean"},{"library":"purescript-foreign","name":"numberIsForeign","module":"Data.Foreign.Class","detail":"instance numberIsForeign :: IsForeign Number"},{"library":"purescript-foreign","name":"arrayIsForeign","module":"Data.Foreign.Class","detail":"instance arrayIsForeign :: (IsForeign a) =\u003e IsForeign [a]"},{"library":"purescript-foreign","name":"nullIsForeign","module":"Data.Foreign.Class","detail":"instance nullIsForeign :: (IsForeign a) =\u003e IsForeign (Null a)"},{"library":"purescript-foreign","name":"undefinedIsForeign","module":"Data.Foreign.Class","detail":"instance undefinedIsForeign :: (IsForeign a) =\u003e IsForeign (Undefined a)"},{"library":"purescript-foreign","name":"nullOrUndefinedIsForeign","module":"Data.Foreign.Class","detail":"instance nullOrUndefinedIsForeign :: (IsForeign a) =\u003e IsForeign (NullOrUndefined a)"},{"library":"purescript-foreign","name":"readJSON","module":"Data.Foreign.Class","detail":"readJSON :: forall a. (IsForeign a) =\u003e String -\u003e F a"},{"library":"purescript-foreign","name":"readWith","module":"Data.Foreign.Class","detail":"readWith :: forall a e. (IsForeign a) =\u003e (ForeignError -\u003e e) -\u003e Foreign -\u003e Either e a"},{"library":"purescript-foreign","name":"readProp","module":"Data.Foreign.Class","detail":"readProp :: forall a i. (IsForeign a, Index i) =\u003e i -\u003e Foreign -\u003e F a"},{"library":"purescript-maps","name":"Map","module":"Data.Map","detail":"data Map k v = Leaf | Two (Map k v) k v (Map k v) | Three (Map k v) k v (Map k v) k v (Map k v)"},{"library":"purescript-maps","name":"Leaf","module":"Data.Map","detail":"data Map k v = Leaf | Two (Map k v) k v (Map k v) | Three (Map k v) k v (Map k v) k v (Map k v)"},{"library":"purescript-maps","name":"Two","module":"Data.Map","detail":"data Map k v = Leaf | Two (Map k v) k v (Map k v) | Three (Map k v) k v (Map k v) k v (Map k v)"},{"library":"purescript-maps","name":"Three","module":"Data.Map","detail":"data Map k v = Leaf | Two (Map k v) k v (Map k v) | Three (Map k v) k v (Map k v) k v (Map k v)"},{"library":"purescript-maps","name":"eqMap","module":"Data.Map","detail":"instance eqMap :: (P.Eq k, P.Eq v) =\u003e P.Eq (Map k v)"},{"library":"purescript-maps","name":"showMap","module":"Data.Map","detail":"instance showMap :: (P.Show k, P.Show v) =\u003e P.Show (Map k v)"},{"library":"purescript-maps","name":"semigroupMap","module":"Data.Map","detail":"instance semigroupMap :: (P.Ord k) =\u003e P.Semigroup (Map k v)"},{"library":"purescript-maps","name":"monoidMap","module":"Data.Map","detail":"instance monoidMap :: (P.Ord k) =\u003e Monoid (Map k v)"},{"library":"purescript-maps","name":"functorMap","module":"Data.Map","detail":"instance functorMap :: P.Functor (Map k)"},{"library":"purescript-maps","name":"foldableMap","module":"Data.Map","detail":"instance foldableMap :: Foldable (Map k)"},{"library":"purescript-maps","name":"traversableMap","module":"Data.Map","detail":"instance traversableMap :: (P.Ord k) =\u003e Traversable (Map k)"},{"library":"purescript-maps","name":"showTree","module":"Data.Map","detail":"showTree :: forall k v. (P.Show k, P.Show v) =\u003e Map k v -\u003e String"},{"library":"purescript-maps","name":"empty","module":"Data.Map","detail":"empty :: forall k v. Map k v"},{"library":"purescript-maps","name":"isEmpty","module":"Data.Map","detail":"isEmpty :: forall k v. Map k v -\u003e Boolean"},{"library":"purescript-maps","name":"singleton","module":"Data.Map","detail":"singleton :: forall k v. k -\u003e v -\u003e Map k v"},{"library":"purescript-maps","name":"checkValid","module":"Data.Map","detail":"checkValid :: forall k v. Map k v -\u003e Boolean"},{"library":"purescript-maps","name":"lookup","module":"Data.Map","detail":"lookup :: forall k v. (P.Ord k) =\u003e k -\u003e Map k v -\u003e Maybe v"},{"library":"purescript-maps","name":"member","module":"Data.Map","detail":"member :: forall k v. (P.Ord k) =\u003e k -\u003e Map k v -\u003e Boolean"},{"library":"purescript-maps","name":"TreeContext","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"library":"purescript-maps","name":"TwoLeft","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"library":"purescript-maps","name":"TwoRight","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"library":"purescript-maps","name":"ThreeLeft","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"library":"purescript-maps","name":"ThreeMiddle","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"library":"purescript-maps","name":"ThreeRight","module":"Data.Map","detail":"data TreeContext k v = TwoLeft k v (Map k v) | TwoRight (Map k v) k v | ThreeLeft k v (Map k v) k v (Map k v) | ThreeMiddle (Map k v) k v k v (Map k v) | ThreeRight (Map k v) k v (Map k v) k v"},{"library":"purescript-maps","name":"fromZipper","module":"Data.Map","detail":"fromZipper :: forall k v. (P.Ord k) =\u003e [TreeContext k v] -\u003e Map k v -\u003e Map k v"},{"library":"purescript-maps","name":"KickUp","module":"Data.Map","detail":"data KickUp k v = KickUp (Map k v) k v (Map k v)"},{"library":"purescript-maps","name":"KickUp","module":"Data.Map","detail":"data KickUp k v = KickUp (Map k v) k v (Map k v)"},{"library":"purescript-maps","name":"insert","module":"Data.Map","detail":"insert :: forall k v. (P.Ord k) =\u003e k -\u003e v -\u003e Map k v -\u003e Map k v"},{"library":"purescript-maps","name":"delete","module":"Data.Map","detail":"delete :: forall k v. (P.Ord k) =\u003e k -\u003e Map k v -\u003e Map k v"},{"library":"purescript-maps","name":"alter","module":"Data.Map","detail":"alter :: forall k v. (P.Ord k) =\u003e (Maybe v -\u003e Maybe v) -\u003e k -\u003e Map k v -\u003e Map k v"},{"library":"purescript-maps","name":"update","module":"Data.Map","detail":"update :: forall k v. (P.Ord k) =\u003e (v -\u003e Maybe v) -\u003e k -\u003e Map k v -\u003e Map k v"},{"library":"purescript-maps","name":"toList","module":"Data.Map","detail":"toList :: forall k v. Map k v -\u003e [Tuple k v]"},{"library":"purescript-maps","name":"fromList","module":"Data.Map","detail":"fromList :: forall k v. (P.Ord k) =\u003e [Tuple k v] -\u003e Map k v"},{"library":"purescript-maps","name":"keys","module":"Data.Map","detail":"keys :: forall k v. Map k v -\u003e [k]"},{"library":"purescript-maps","name":"values","module":"Data.Map","detail":"values :: forall k v. Map k v -\u003e [v]"},{"library":"purescript-maps","name":"unionWith","module":"Data.Map","detail":"unionWith :: forall k v. (P.Ord k) =\u003e (v -\u003e v -\u003e v) -\u003e Map k v -\u003e Map k v -\u003e Map k v"},{"library":"purescript-maps","name":"union","module":"Data.Map","detail":"union :: forall k v. (P.Ord k) =\u003e Map k v -\u003e Map k v -\u003e Map k v"},{"library":"purescript-maps","name":"unions","module":"Data.Map","detail":"unions :: forall k v. (P.Ord k) =\u003e [Map k v] -\u003e Map k v"},{"library":"purescript-maps","name":"map","module":"Data.Map","detail":"map :: forall k a b. (a -\u003e b) -\u003e Map k a -\u003e Map k b"},{"library":"purescript-maps","name":"size","module":"Data.Map","detail":"size :: forall k v. Map k v -\u003e Number"},{"library":"purescript-maps","name":"StrMap","module":"Data.StrMap","detail":"data StrMap :: * -\u003e *"},{"library":"purescript-maps","name":"_copy","module":"Data.StrMap","detail":"_copy :: forall a. StrMap a -\u003e StrMap a"},{"library":"purescript-maps","name":"_copyEff","module":"Data.StrMap","detail":"_copyEff :: forall a b h r. a -\u003e Eff (st :: ST.ST h | r) b"},{"library":"purescript-maps","name":"thawST","module":"Data.StrMap","detail":"thawST :: forall a h r. StrMap a -\u003e Eff (st :: ST.ST h | r) (SM.STStrMap h a)"},{"library":"purescript-maps","name":"freezeST","module":"Data.StrMap","detail":"freezeST :: forall a h r. SM.STStrMap h a -\u003e Eff (st :: ST.ST h | r) (StrMap a)"},{"library":"purescript-maps","name":"runST","module":"Data.StrMap","detail":"runST :: forall a r. (forall h. Eff (st :: ST.ST h | r) (SM.STStrMap h a)) -\u003e Eff r (StrMap a)"},{"library":"purescript-maps","name":"pureST","module":"Data.StrMap","detail":"pureST :: forall a b. (forall h e. Eff (st :: ST.ST h | e) (SM.STStrMap h a)) -\u003e StrMap a"},{"library":"purescript-maps","name":"mutate","module":"Data.StrMap","detail":"mutate :: forall a b. (forall h e. SM.STStrMap h a -\u003e Eff (st :: ST.ST h | e) b) -\u003e StrMap a -\u003e StrMap a"},{"library":"purescript-maps","name":"_fmapStrMap","module":"Data.StrMap","detail":"_fmapStrMap :: forall a b. Fn2 (StrMap a) (a -\u003e b) (StrMap b)"},{"library":"purescript-maps","name":"functorStrMap","module":"Data.StrMap","detail":"instance functorStrMap :: P.Functor StrMap"},{"library":"purescript-maps","name":"_foldM","module":"Data.StrMap","detail":"_foldM :: forall a m z. (m -\u003e (z -\u003e m) -\u003e m) -\u003e (z -\u003e String -\u003e a -\u003e m) -\u003e m -\u003e StrMap a -\u003e m"},{"library":"purescript-maps","name":"fold","module":"Data.StrMap","detail":"fold :: forall a z. (z -\u003e String -\u003e a -\u003e z) -\u003e z -\u003e StrMap a -\u003e z"},{"library":"purescript-maps","name":"foldMap","module":"Data.StrMap","detail":"foldMap :: forall a m. (Monoid m) =\u003e (String -\u003e a -\u003e m) -\u003e StrMap a -\u003e m"},{"library":"purescript-maps","name":"foldM","module":"Data.StrMap","detail":"foldM :: forall a m z. (P.Monad m) =\u003e (z -\u003e String -\u003e a -\u003e m z) -\u003e z -\u003e StrMap a -\u003e m z"},{"library":"purescript-maps","name":"foldableStrMap","module":"Data.StrMap","detail":"instance foldableStrMap :: Foldable StrMap"},{"library":"purescript-maps","name":"traversableStrMap","module":"Data.StrMap","detail":"instance traversableStrMap :: Traversable StrMap"},{"library":"purescript-maps","name":"_foldSCStrMap","module":"Data.StrMap","detail":"_foldSCStrMap :: forall a z. Fn4 (StrMap a) z (z -\u003e String -\u003e a -\u003e Maybe z) (forall a. a -\u003e Maybe a -\u003e a) z"},{"library":"purescript-maps","name":"foldMaybe","module":"Data.StrMap","detail":"foldMaybe :: forall a z. (z -\u003e String -\u003e a -\u003e Maybe z) -\u003e z -\u003e StrMap a -\u003e z"},{"library":"purescript-maps","name":"all","module":"Data.StrMap","detail":"all :: forall a. (String -\u003e a -\u003e Boolean) -\u003e StrMap a -\u003e Boolean"},{"library":"purescript-maps","name":"eqStrMap","module":"Data.StrMap","detail":"instance eqStrMap :: (P.Eq a) =\u003e P.Eq (StrMap a)"},{"library":"purescript-maps","name":"showStrMap","module":"Data.StrMap","detail":"instance showStrMap :: (P.Show a) =\u003e P.Show (StrMap a)"},{"library":"purescript-maps","name":"empty","module":"Data.StrMap","detail":"empty :: forall a. StrMap a"},{"library":"purescript-maps","name":"isSubmap","module":"Data.StrMap","detail":"isSubmap :: forall a. (P.Eq a) =\u003e StrMap a -\u003e StrMap a -\u003e Boolean"},{"library":"purescript-maps","name":"isEmpty","module":"Data.StrMap","detail":"isEmpty :: forall a. StrMap a -\u003e Boolean"},{"library":"purescript-maps","name":"size","module":"Data.StrMap","detail":"size :: forall a. StrMap a -\u003e Number"},{"library":"purescript-maps","name":"singleton","module":"Data.StrMap","detail":"singleton :: forall a. String -\u003e a -\u003e StrMap a"},{"library":"purescript-maps","name":"_lookup","module":"Data.StrMap","detail":"_lookup :: forall a z. Fn4 z (a -\u003e z) String (StrMap a) z"},{"library":"purescript-maps","name":"lookup","module":"Data.StrMap","detail":"lookup :: forall a. String -\u003e StrMap a -\u003e Maybe a"},{"library":"purescript-maps","name":"member","module":"Data.StrMap","detail":"member :: forall a. String -\u003e StrMap a -\u003e Boolean"},{"library":"purescript-maps","name":"insert","module":"Data.StrMap","detail":"insert :: forall a. String -\u003e a -\u003e StrMap a -\u003e StrMap a"},{"library":"purescript-maps","name":"_unsafeDeleteStrMap","module":"Data.StrMap","detail":"_unsafeDeleteStrMap :: forall a. Fn2 (StrMap a) String (StrMap a)"},{"library":"purescript-maps","name":"delete","module":"Data.StrMap","detail":"delete :: forall a. String -\u003e StrMap a -\u003e StrMap a"},{"library":"purescript-maps","name":"alter","module":"Data.StrMap","detail":"alter :: forall a. (Maybe a -\u003e Maybe a) -\u003e String -\u003e StrMap a -\u003e StrMap a"},{"library":"purescript-maps","name":"update","module":"Data.StrMap","detail":"update :: forall a. (a -\u003e Maybe a) -\u003e String -\u003e StrMap a -\u003e StrMap a"},{"library":"purescript-maps","name":"fromList","module":"Data.StrMap","detail":"fromList :: forall a. [Tuple String a] -\u003e StrMap a"},{"library":"purescript-maps","name":"_collect","module":"Data.StrMap","detail":"_collect :: forall a b. (String -\u003e a -\u003e b) -\u003e StrMap a -\u003e [b]"},{"library":"purescript-maps","name":"toList","module":"Data.StrMap","detail":"toList :: forall a. StrMap a -\u003e [Tuple String a]"},{"library":"purescript-maps","name":"keys","module":"Data.StrMap","detail":"keys :: forall a. StrMap a -\u003e [String]"},{"library":"purescript-maps","name":"values","module":"Data.StrMap","detail":"values :: forall a. StrMap a -\u003e [a]"},{"library":"purescript-maps","name":"union","module":"Data.StrMap","detail":"union :: forall a. StrMap a -\u003e StrMap a -\u003e StrMap a"},{"library":"purescript-maps","name":"unions","module":"Data.StrMap","detail":"unions :: forall a. [StrMap a] -\u003e StrMap a"},{"library":"purescript-maps","name":"map","module":"Data.StrMap","detail":"map :: forall a b. (a -\u003e b) -\u003e StrMap a -\u003e StrMap b"},{"library":"purescript-maps","name":"semigroupStrMap","module":"Data.StrMap","detail":"instance semigroupStrMap :: (P.Semigroup a) =\u003e P.Semigroup (StrMap a)"},{"library":"purescript-maps","name":"unsafeIndex","module":"Data.StrMap.Unsafe","detail":"unsafeIndex :: forall a. StrMap a -\u003e String -\u003e a"},{"library":"purescript-maps","name":"STStrMap","module":"Data.StrMap.ST","detail":"data STStrMap :: * -\u003e * -\u003e *"},{"library":"purescript-maps","name":"_new","module":"Data.StrMap.ST","detail":"_new :: forall a h r. Eff (st :: ST h | r) (STStrMap h a)"},{"library":"purescript-maps","name":"new","module":"Data.StrMap.ST","detail":"new :: forall a h r. Eff (st :: ST h | r) (STStrMap h a)"},{"library":"purescript-maps","name":"peek","module":"Data.StrMap.ST","detail":"peek :: forall a h r. STStrMap h a -\u003e String -\u003e Eff (st :: ST h | r) a"},{"library":"purescript-maps","name":"poke","module":"Data.StrMap.ST","detail":"poke :: forall a h r. STStrMap h a -\u003e String -\u003e a -\u003e Eff (st :: ST h | r) (STStrMap h a)"},{"library":"purescript-maps","name":"_delete","module":"Data.StrMap.ST","detail":"_delete :: forall a h r. STStrMap h a -\u003e String -\u003e Eff (st :: ST h | r) (STStrMap h a)"},{"library":"purescript-maps","name":"delete","module":"Data.StrMap.ST","detail":"delete :: forall a h r. STStrMap h a -\u003e String -\u003e Eff (st :: ST h | r) (STStrMap h a)"},{"library":"purescript-maps","name":"unsafeGet","module":"Data.StrMap.ST.Unsafe","detail":"unsafeGet :: forall a h r. STStrMap h a -\u003e Eff (st :: ST h | r) (StrMap a)"},{"library":"purescript-quickcheck","name":"AlphaNumString","module":"Test.QuickCheck","detail":"newtype AlphaNumString = AlphaNumString String"},{"library":"purescript-quickcheck","name":"AlphaNumString","module":"Test.QuickCheck","detail":"newtype AlphaNumString = AlphaNumString String"},{"library":"purescript-quickcheck","name":"Arbitrary","module":"Test.QuickCheck","detail":"class Arbitrary t where"},{"library":"purescript-quickcheck","name":"arbitrary","module":"Test.QuickCheck","detail":"arbitrary :: Gen t"},{"library":"purescript-quickcheck","name":"CoArbitrary","module":"Test.QuickCheck","detail":"class CoArbitrary t where"},{"library":"purescript-quickcheck","name":"coarbitrary","module":"Test.QuickCheck","detail":"coarbitrary :: forall r. t -\u003e Gen r -\u003e Gen r"},{"library":"purescript-quickcheck","name":"Result","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"library":"purescript-quickcheck","name":"Success","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"library":"purescript-quickcheck","name":"Failed","module":"Test.QuickCheck","detail":"data Result = Success | Failed String"},{"library":"purescript-quickcheck","name":"showResult","module":"Test.QuickCheck","detail":"instance showResult :: Show Result"},{"library":"purescript-quickcheck","name":"(\u003c?\u003e)","module":"Test.QuickCheck","detail":"(\u003c?\u003e) :: Boolean -\u003e String -\u003e Result"},{"library":"purescript-quickcheck","name":"arbChar","module":"Test.QuickCheck","detail":"instance arbChar :: Arbitrary S.Char"},{"library":"purescript-quickcheck","name":"coarbChar","module":"Test.QuickCheck","detail":"instance coarbChar :: CoArbitrary S.Char"},{"library":"purescript-quickcheck","name":"arbNumber","module":"Test.QuickCheck","detail":"instance arbNumber :: Arbitrary Number"},{"library":"purescript-quickcheck","name":"coarbNumber","module":"Test.QuickCheck","detail":"instance coarbNumber :: CoArbitrary Number"},{"library":"purescript-quickcheck","name":"arbBoolean","module":"Test.QuickCheck","detail":"instance arbBoolean :: Arbitrary Boolean"},{"library":"purescript-quickcheck","name":"coarbBoolean","module":"Test.QuickCheck","detail":"instance coarbBoolean :: CoArbitrary Boolean"},{"library":"purescript-quickcheck","name":"arbString","module":"Test.QuickCheck","detail":"instance arbString :: Arbitrary String"},{"library":"purescript-quickcheck","name":"coarbString","module":"Test.QuickCheck","detail":"instance coarbString :: CoArbitrary String"},{"library":"purescript-quickcheck","name":"arbAlphaNumString","module":"Test.QuickCheck","detail":"instance arbAlphaNumString :: Arbitrary AlphaNumString"},{"library":"purescript-quickcheck","name":"coarbAlphaNumString","module":"Test.QuickCheck","detail":"instance coarbAlphaNumString :: CoArbitrary AlphaNumString"},{"library":"purescript-quickcheck","name":"arbTuple","module":"Test.QuickCheck","detail":"instance arbTuple :: (Arbitrary a, Arbitrary b) =\u003e Arbitrary (Tuple a b)"},{"library":"purescript-quickcheck","name":"coarbTuple","module":"Test.QuickCheck","detail":"instance coarbTuple :: (CoArbitrary a, CoArbitrary b) =\u003e CoArbitrary (Tuple a b)"},{"library":"purescript-quickcheck","name":"arbEither","module":"Test.QuickCheck","detail":"instance arbEither :: (Arbitrary a, Arbitrary b) =\u003e Arbitrary (Either a b)"},{"library":"purescript-quickcheck","name":"coarbEither","module":"Test.QuickCheck","detail":"instance coarbEither :: (CoArbitrary a, CoArbitrary b) =\u003e CoArbitrary (Either a b)"},{"library":"purescript-quickcheck","name":"arbMaybe","module":"Test.QuickCheck","detail":"instance arbMaybe :: (Arbitrary a) =\u003e Arbitrary (Maybe a)"},{"library":"purescript-quickcheck","name":"coarbMaybe","module":"Test.QuickCheck","detail":"instance coarbMaybe :: (CoArbitrary a) =\u003e CoArbitrary (Maybe a)"},{"library":"purescript-quickcheck","name":"arbFunction","module":"Test.QuickCheck","detail":"instance arbFunction :: (CoArbitrary a, Arbitrary b) =\u003e Arbitrary (a -\u003e b)"},{"library":"purescript-quickcheck","name":"coarbFunction","module":"Test.QuickCheck","detail":"instance coarbFunction :: (Arbitrary a, CoArbitrary b) =\u003e CoArbitrary (a -\u003e b)"},{"library":"purescript-quickcheck","name":"arbArray","module":"Test.QuickCheck","detail":"instance arbArray :: (Arbitrary a) =\u003e Arbitrary [a]"},{"library":"purescript-quickcheck","name":"coarbArray","module":"Test.QuickCheck","detail":"instance coarbArray :: (CoArbitrary a) =\u003e CoArbitrary [a]"},{"library":"purescript-quickcheck","name":"Testable","module":"Test.QuickCheck","detail":"class Testable prop where"},{"library":"purescript-quickcheck","name":"test","module":"Test.QuickCheck","detail":"test :: prop -\u003e Gen Result"},{"library":"purescript-quickcheck","name":"testableResult","module":"Test.QuickCheck","detail":"instance testableResult :: Testable Result"},{"library":"purescript-quickcheck","name":"testableBoolean","module":"Test.QuickCheck","detail":"instance testableBoolean :: Testable Boolean"},{"library":"purescript-quickcheck","name":"testableFunction","module":"Test.QuickCheck","detail":"instance testableFunction :: (Arbitrary t, Testable prop) =\u003e Testable (t -\u003e prop)"},{"library":"purescript-quickcheck","name":"quickCheckPure","module":"Test.QuickCheck","detail":"quickCheckPure :: forall prop. (Testable prop) =\u003e Number -\u003e Number -\u003e prop -\u003e [Result]"},{"library":"purescript-quickcheck","name":"QC","module":"Test.QuickCheck","detail":"type QC a = forall eff. Eff (err :: Exception, random :: Random, trace :: Trace | eff) a"},{"library":"purescript-quickcheck","name":"quickCheck'","module":"Test.QuickCheck","detail":"quickCheck' :: forall prop. (Testable prop) =\u003e Number -\u003e prop -\u003e QC Unit"},{"library":"purescript-quickcheck","name":"quickCheck","module":"Test.QuickCheck","detail":"quickCheck :: forall prop. (Testable prop) =\u003e prop -\u003e QC Unit"},{"library":"purescript-quickcheck","name":"LCG","module":"Test.QuickCheck.Gen","detail":"type LCG  = Number"},{"library":"purescript-quickcheck","name":"Size","module":"Test.QuickCheck.Gen","detail":"type Size  = Number"},{"library":"purescript-quickcheck","name":"GenState","module":"Test.QuickCheck.Gen","detail":"type GenState  = { size :: Size, newSeed :: LCG }"},{"library":"purescript-quickcheck","name":"GenOut","module":"Test.QuickCheck.Gen","detail":"type GenOut a = { value :: a, state :: GenState }"},{"library":"purescript-quickcheck","name":"Gen","module":"Test.QuickCheck.Gen","detail":"data Gen a = Gen (GenState -\u003e GenOut a)"},{"library":"purescript-quickcheck","name":"Gen","module":"Test.QuickCheck.Gen","detail":"data Gen a = Gen (GenState -\u003e GenOut a)"},{"library":"purescript-quickcheck","name":"repeatable","module":"Test.QuickCheck.Gen","detail":"repeatable :: forall a b. (a -\u003e Gen b) -\u003e Gen (a -\u003e b)"},{"library":"purescript-quickcheck","name":"stateful","module":"Test.QuickCheck.Gen","detail":"stateful :: forall a. (GenState -\u003e Gen a) -\u003e Gen a"},{"library":"purescript-quickcheck","name":"variant","module":"Test.QuickCheck.Gen","detail":"variant :: forall a. LCG -\u003e Gen a -\u003e Gen a"},{"library":"purescript-quickcheck","name":"sized","module":"Test.QuickCheck.Gen","detail":"sized :: forall a. (Size -\u003e Gen a) -\u003e Gen a"},{"library":"purescript-quickcheck","name":"resize","module":"Test.QuickCheck.Gen","detail":"resize :: forall a. Size -\u003e Gen a -\u003e Gen a"},{"library":"purescript-quickcheck","name":"choose","module":"Test.QuickCheck.Gen","detail":"choose :: Number -\u003e Number -\u003e Gen Number"},{"library":"purescript-quickcheck","name":"chooseInt","module":"Test.QuickCheck.Gen","detail":"chooseInt :: Number -\u003e Number -\u003e Gen Number"},{"library":"purescript-quickcheck","name":"oneOf","module":"Test.QuickCheck.Gen","detail":"oneOf :: forall a. Gen a -\u003e [Gen a] -\u003e Gen a"},{"library":"purescript-quickcheck","name":"frequency","module":"Test.QuickCheck.Gen","detail":"frequency :: forall a. Tuple Number (Gen a) -\u003e [Tuple Number (Gen a)] -\u003e Gen a"},{"library":"purescript-quickcheck","name":"arrayOf","module":"Test.QuickCheck.Gen","detail":"arrayOf :: forall a. Gen a -\u003e Gen [a]"},{"library":"purescript-quickcheck","name":"arrayOf1","module":"Test.QuickCheck.Gen","detail":"arrayOf1 :: forall a. Gen a -\u003e Gen (Tuple a [a])"},{"library":"purescript-quickcheck","name":"vectorOf","module":"Test.QuickCheck.Gen","detail":"vectorOf :: forall a. Number -\u003e Gen a -\u003e Gen [a]"},{"library":"purescript-quickcheck","name":"elements","module":"Test.QuickCheck.Gen","detail":"elements :: forall a. a -\u003e [a] -\u003e Gen a"},{"library":"purescript-quickcheck","name":"runGen","module":"Test.QuickCheck.Gen","detail":"runGen :: forall a. Gen a -\u003e GenState -\u003e GenOut a"},{"library":"purescript-quickcheck","name":"evalGen","module":"Test.QuickCheck.Gen","detail":"evalGen :: forall a. Gen a -\u003e GenState -\u003e a"},{"library":"purescript-quickcheck","name":"sample","module":"Test.QuickCheck.Gen","detail":"sample :: forall r a. Size -\u003e Gen a -\u003e [a]"},{"library":"purescript-quickcheck","name":"showSample'","module":"Test.QuickCheck.Gen","detail":"showSample' :: forall r a. (Show a) =\u003e Size -\u003e Gen a -\u003e Eff (trace :: Trace | r) Unit"},{"library":"purescript-quickcheck","name":"showSample","module":"Test.QuickCheck.Gen","detail":"showSample :: forall r a. (Show a) =\u003e Gen a -\u003e Eff (trace :: Trace | r) Unit"},{"library":"purescript-quickcheck","name":"lcgM","module":"Test.QuickCheck.Gen","detail":"lcgM :: Number"},{"library":"purescript-quickcheck","name":"lcgC","module":"Test.QuickCheck.Gen","detail":"lcgC :: Number"},{"library":"purescript-quickcheck","name":"lcgN","module":"Test.QuickCheck.Gen","detail":"lcgN :: Number"},{"library":"purescript-quickcheck","name":"lcgNext","module":"Test.QuickCheck.Gen","detail":"lcgNext :: Number -\u003e Number"},{"library":"purescript-quickcheck","name":"lcgStep","module":"Test.QuickCheck.Gen","detail":"lcgStep :: Gen Number"},{"library":"purescript-quickcheck","name":"uniform","module":"Test.QuickCheck.Gen","detail":"uniform :: Gen Number"},{"library":"purescript-quickcheck","name":"float32ToInt32","module":"Test.QuickCheck.Gen","detail":"float32ToInt32 :: Number -\u003e Number"},{"library":"purescript-quickcheck","name":"perturbGen","module":"Test.QuickCheck.Gen","detail":"perturbGen :: forall a. Number -\u003e Gen a -\u003e Gen a"},{"library":"purescript-quickcheck","name":"functorGen","module":"Test.QuickCheck.Gen","detail":"instance functorGen :: Functor Gen"},{"library":"purescript-quickcheck","name":"applyGen","module":"Test.QuickCheck.Gen","detail":"instance applyGen :: Apply Gen"},{"library":"purescript-quickcheck","name":"applicativeGen","module":"Test.QuickCheck.Gen","detail":"instance applicativeGen :: Applicative Gen"},{"library":"purescript-quickcheck","name":"bindGen","module":"Test.QuickCheck.Gen","detail":"instance bindGen :: Bind Gen"},{"library":"purescript-quickcheck","name":"monadGen","module":"Test.QuickCheck.Gen","detail":"instance monadGen :: Monad Gen"},{"library":"purescript-free","name":"Yoneda","module":"Data.Yoneda","detail":"newtype Yoneda f a = Yoneda (forall b. (a -\u003e b) -\u003e f b)"},{"library":"purescript-free","name":"Yoneda","module":"Data.Yoneda","detail":"newtype Yoneda f a = Yoneda (forall b. (a -\u003e b) -\u003e f b)"},{"library":"purescript-free","name":"functorYoneda","module":"Data.Yoneda","detail":"instance functorYoneda :: Functor (Yoneda f)"},{"library":"purescript-free","name":"applyYoneda","module":"Data.Yoneda","detail":"instance applyYoneda :: (Apply f) =\u003e Apply (Yoneda f)"},{"library":"purescript-free","name":"applicativeYoneda","module":"Data.Yoneda","detail":"instance applicativeYoneda :: (Applicative f) =\u003e Applicative (Yoneda f)"},{"library":"purescript-free","name":"bindCoyoneda","module":"Data.Yoneda","detail":"instance bindCoyoneda :: (Bind f) =\u003e Bind (Yoneda f)"},{"library":"purescript-free","name":"monadYoneda","module":"Data.Yoneda","detail":"instance monadYoneda :: (Monad f) =\u003e Monad (Yoneda f)"},{"library":"purescript-free","name":"monadTransYoneda","module":"Data.Yoneda","detail":"instance monadTransYoneda :: MonadTrans Yoneda"},{"library":"purescript-free","name":"extendYoneda","module":"Data.Yoneda","detail":"instance extendYoneda :: (Extend w) =\u003e Extend (Yoneda w)"},{"library":"purescript-free","name":"comonadYoneda","module":"Data.Yoneda","detail":"instance comonadYoneda :: (Comonad w) =\u003e Comonad (Yoneda w)"},{"library":"purescript-free","name":"runYoneda","module":"Data.Yoneda","detail":"runYoneda :: forall f a b. Yoneda f a -\u003e (a -\u003e b) -\u003e f b"},{"library":"purescript-free","name":"liftYoneda","module":"Data.Yoneda","detail":"liftYoneda :: forall f a. (Functor f) =\u003e f a -\u003e Yoneda f a"},{"library":"purescript-free","name":"lowerYoneda","module":"Data.Yoneda","detail":"lowerYoneda :: forall f a. Yoneda f a -\u003e f a"},{"library":"purescript-free","name":"CoyonedaF","module":"Data.Coyoneda","detail":"newtype CoyonedaF f a i = CoyonedaF { fi :: f i, k :: i -\u003e a }"},{"library":"purescript-free","name":"CoyonedaF","module":"Data.Coyoneda","detail":"newtype CoyonedaF f a i = CoyonedaF { fi :: f i, k :: i -\u003e a }"},{"library":"purescript-free","name":"Coyoneda","module":"Data.Coyoneda","detail":"newtype Coyoneda f a = Coyoneda (Exists (CoyonedaF f a))"},{"library":"purescript-free","name":"Coyoneda","module":"Data.Coyoneda","detail":"newtype Coyoneda f a = Coyoneda (Exists (CoyonedaF f a))"},{"library":"purescript-free","name":"Natural","module":"Data.Coyoneda","detail":"type Natural f g = forall a. f a -\u003e g a"},{"library":"purescript-free","name":"functorCoyoneda","module":"Data.Coyoneda","detail":"instance functorCoyoneda :: Functor (Coyoneda f)"},{"library":"purescript-free","name":"applyCoyoneda","module":"Data.Coyoneda","detail":"instance applyCoyoneda :: (Apply f) =\u003e Apply (Coyoneda f)"},{"library":"purescript-free","name":"applicativeCoyoneda","module":"Data.Coyoneda","detail":"instance applicativeCoyoneda :: (Applicative f) =\u003e Applicative (Coyoneda f)"},{"library":"purescript-free","name":"bindCoyoneda","module":"Data.Coyoneda","detail":"instance bindCoyoneda :: (Bind f) =\u003e Bind (Coyoneda f)"},{"library":"purescript-free","name":"monadCoyoneda","module":"Data.Coyoneda","detail":"instance monadCoyoneda :: (Monad f) =\u003e Monad (Coyoneda f)"},{"library":"purescript-free","name":"monadTransCoyoneda","module":"Data.Coyoneda","detail":"instance monadTransCoyoneda :: MonadTrans Coyoneda"},{"library":"purescript-free","name":"extendCoyoneda","module":"Data.Coyoneda","detail":"instance extendCoyoneda :: (Extend w) =\u003e Extend (Coyoneda w)"},{"library":"purescript-free","name":"comonadCoyoneda","module":"Data.Coyoneda","detail":"instance comonadCoyoneda :: (Comonad w) =\u003e Comonad (Coyoneda w)"},{"library":"purescript-free","name":"coyoneda","module":"Data.Coyoneda","detail":"coyoneda :: forall f a b. (a -\u003e b) -\u003e f a -\u003e Coyoneda f b"},{"library":"purescript-free","name":"liftCoyoneda","module":"Data.Coyoneda","detail":"liftCoyoneda :: forall f a. f a -\u003e Coyoneda f a"},{"library":"purescript-free","name":"lowerCoyoneda","module":"Data.Coyoneda","detail":"lowerCoyoneda :: forall f a. (Functor f) =\u003e Coyoneda f a -\u003e f a"},{"library":"purescript-free","name":"liftCoyonedaT","module":"Data.Coyoneda","detail":"liftCoyonedaT :: forall f g. Natural f g -\u003e Natural (Coyoneda f) (Coyoneda g)"},{"library":"purescript-free","name":"liftCoyonedaTF","module":"Data.Coyoneda","detail":"liftCoyonedaTF :: forall f g. (Functor g) =\u003e Natural f g -\u003e Natural (Coyoneda f) g"},{"library":"purescript-free","name":"Trampoline","module":"Control.Monad.Trampoline","detail":"type Trampoline  = Free Lazy"},{"library":"purescript-free","name":"done","module":"Control.Monad.Trampoline","detail":"done :: forall a. a -\u003e Trampoline a"},{"library":"purescript-free","name":"suspend","module":"Control.Monad.Trampoline","detail":"suspend :: forall a. Trampoline a -\u003e Trampoline a"},{"library":"purescript-free","name":"delay'","module":"Control.Monad.Trampoline","detail":"delay' :: forall a. Lazy a -\u003e Trampoline a"},{"library":"purescript-free","name":"delay","module":"Control.Monad.Trampoline","detail":"delay :: forall a. (Unit -\u003e a) -\u003e Trampoline a"},{"library":"purescript-free","name":"runTrampoline","module":"Control.Monad.Trampoline","detail":"runTrampoline :: forall a. Trampoline a -\u003e a"},{"library":"purescript-free","name":"Free","module":"Control.Monad.Free","detail":"data Free f a = Pure a | Free (f (Free f a)) | Gosub (forall s. (forall r. (Unit -\u003e Free f r) -\u003e (r -\u003e Free f a) -\u003e s) -\u003e s)"},{"library":"purescript-free","name":"Pure","module":"Control.Monad.Free","detail":"data Free f a = Pure a | Free (f (Free f a)) | Gosub (forall s. (forall r. (Unit -\u003e Free f r) -\u003e (r -\u003e Free f a) -\u003e s) -\u003e s)"},{"library":"purescript-free","name":"Free","module":"Control.Monad.Free","detail":"data Free f a = Pure a | Free (f (Free f a)) | Gosub (forall s. (forall r. (Unit -\u003e Free f r) -\u003e (r -\u003e Free f a) -\u003e s) -\u003e s)"},{"library":"purescript-free","name":"Gosub","module":"Control.Monad.Free","detail":"data Free f a = Pure a | Free (f (Free f a)) | Gosub (forall s. (forall r. (Unit -\u003e Free f r) -\u003e (r -\u003e Free f a) -\u003e s) -\u003e s)"},{"library":"purescript-free","name":"FreeC","module":"Control.Monad.Free","detail":"type FreeC f = Free (Coyoneda f)"},{"library":"purescript-free","name":"MonadFree","module":"Control.Monad.Free","detail":"class MonadFree f m where"},{"library":"purescript-free","name":"wrap","module":"Control.Monad.Free","detail":"wrap :: forall a. f (m a) -\u003e m a"},{"library":"purescript-free","name":"functorFree","module":"Control.Monad.Free","detail":"instance functorFree :: (Functor f) =\u003e Functor (Free f)"},{"library":"purescript-free","name":"applyFree","module":"Control.Monad.Free","detail":"instance applyFree :: (Functor f) =\u003e Apply (Free f)"},{"library":"purescript-free","name":"applicativeFree","module":"Control.Monad.Free","detail":"instance applicativeFree :: (Functor f) =\u003e Applicative (Free f)"},{"library":"purescript-free","name":"bindFree","module":"Control.Monad.Free","detail":"instance bindFree :: (Functor f) =\u003e Bind (Free f)"},{"library":"purescript-free","name":"monadFree","module":"Control.Monad.Free","detail":"instance monadFree :: (Functor f) =\u003e Monad (Free f)"},{"library":"purescript-free","name":"monadTransFree","module":"Control.Monad.Free","detail":"instance monadTransFree :: MonadTrans Free"},{"library":"purescript-free","name":"monadFreeFree","module":"Control.Monad.Free","detail":"instance monadFreeFree :: (Functor f) =\u003e MonadFree f (Free f)"},{"library":"purescript-free","name":"liftF","module":"Control.Monad.Free","detail":"liftF :: forall f m a. (Functor f, Monad m, MonadFree f m) =\u003e f a -\u003e m a"},{"library":"purescript-free","name":"pureF","module":"Control.Monad.Free","detail":"pureF :: forall f a. (Applicative f) =\u003e a -\u003e Free f a"},{"library":"purescript-free","name":"liftFC","module":"Control.Monad.Free","detail":"liftFC :: forall f a. f a -\u003e FreeC f a"},{"library":"purescript-free","name":"pureFC","module":"Control.Monad.Free","detail":"pureFC :: forall f a. (Applicative f) =\u003e a -\u003e FreeC f a"},{"library":"purescript-free","name":"mapF","module":"Control.Monad.Free","detail":"mapF :: forall f g a. (Functor f, Functor g) =\u003e Natural f g -\u003e Free f a -\u003e Free g a"},{"library":"purescript-free","name":"injC","module":"Control.Monad.Free","detail":"injC :: forall f g a. (Inject f g) =\u003e FreeC f a -\u003e FreeC g a"},{"library":"purescript-free","name":"iterM","module":"Control.Monad.Free","detail":"iterM :: forall f m a. (Functor f, Monad m) =\u003e (forall a. f (m a) -\u003e m a) -\u003e Free f a -\u003e m a"},{"library":"purescript-free","name":"goM","module":"Control.Monad.Free","detail":"goM :: forall f m a. (Functor f, Monad m) =\u003e (f (Free f a) -\u003e m (Free f a)) -\u003e Free f a -\u003e m a"},{"library":"purescript-free","name":"resumeGosub","module":"Control.Monad.Free","detail":"resumeGosub :: forall f a. (Functor f) =\u003e Free f a -\u003e Either (f (Free f a)) (Free f a)"},{"library":"purescript-free","name":"unsafeLeft","module":"Control.Monad.Free","detail":"unsafeLeft :: forall a b. Either a b -\u003e a"},{"library":"purescript-free","name":"unsafeRight","module":"Control.Monad.Free","detail":"unsafeRight :: forall a b. Either a b -\u003e b"},{"library":"purescript-free","name":"resume","module":"Control.Monad.Free","detail":"resume :: forall f a. (Functor f) =\u003e Free f a -\u003e Either (f (Free f a)) a"},{"library":"purescript-free","name":"go","module":"Control.Monad.Free","detail":"go :: forall f a. (Functor f) =\u003e (f (Free f a) -\u003e Free f a) -\u003e Free f a -\u003e a"},{"library":"purescript-free","name":"goEffImpl","module":"Control.Monad.Free","detail":"goEffImpl :: forall e f a. Fn6 (Free f a -\u003e Either (f (Free f a)) a) (Either (f (Free f a)) a -\u003e Boolean) (Either (f (Free f a)) a -\u003e f (Free f a)) (Either (f (Free f a)) a -\u003e a) (f (Free f a) -\u003e Eff e (Free f a)) (Free f a) (Eff e a)"},{"library":"purescript-free","name":"goEff","module":"Control.Monad.Free","detail":"goEff :: forall e f a. (Functor f) =\u003e (f (Free f a) -\u003e Eff e (Free f a)) -\u003e Free f a -\u003e Eff e a"},{"library":"purescript-free","name":"goMC","module":"Control.Monad.Free","detail":"goMC :: forall f m a. (Monad m) =\u003e Natural f m -\u003e FreeC f a -\u003e m a"},{"library":"purescript-free","name":"goEffC","module":"Control.Monad.Free","detail":"goEffC :: forall e f a. Natural f (Eff e) -\u003e FreeC f a -\u003e Eff e a"},{"library":"purescript-free","name":"Cofree","module":"Control.Comonad.Cofree","detail":"data Cofree f a = Cofree a (Trampoline (f (Cofree f a)))"},{"library":"purescript-free","name":"Cofree","module":"Control.Comonad.Cofree","detail":"data Cofree f a = Cofree a (Trampoline (f (Cofree f a)))"},{"library":"purescript-free","name":"mkCofree","module":"Control.Comonad.Cofree","detail":"mkCofree :: forall f a. a -\u003e f (Cofree f a) -\u003e Cofree f a"},{"library":"purescript-free","name":"head","module":"Control.Comonad.Cofree","detail":"head :: forall f a. Cofree f a -\u003e a"},{"library":"purescript-free","name":"tail","module":"Control.Comonad.Cofree","detail":"tail :: forall f a. Cofree f a -\u003e f (Cofree f a)"},{"library":"purescript-free","name":"_tail","module":"Control.Comonad.Cofree","detail":"_tail :: forall f a. Cofree f a -\u003e Trampoline (f (Cofree f a))"},{"library":"purescript-free","name":"_lift","module":"Control.Comonad.Cofree","detail":"_lift :: forall f a b. (Functor f) =\u003e (a -\u003e b) -\u003e Trampoline (f a) -\u003e Trampoline (f b)"},{"library":"purescript-free","name":"functorCofree","module":"Control.Comonad.Cofree","detail":"instance functorCofree :: (Functor f) =\u003e Functor (Cofree f)"},{"library":"purescript-free","name":"foldableCofree","module":"Control.Comonad.Cofree","detail":"instance foldableCofree :: (Foldable f) =\u003e Foldable (Cofree f)"},{"library":"purescript-free","name":"traversableCofree","module":"Control.Comonad.Cofree","detail":"instance traversableCofree :: (Traversable f) =\u003e Traversable (Cofree f)"},{"library":"purescript-free","name":"extendCofree","module":"Control.Comonad.Cofree","detail":"instance extendCofree :: (Functor f) =\u003e Extend (Cofree f)"},{"library":"purescript-free","name":"comonadCofree","module":"Control.Comonad.Cofree","detail":"instance comonadCofree :: (Functor f) =\u003e Comonad (Cofree f)"},{"library":"purescript-free","name":"applyCofree","module":"Control.Comonad.Cofree","detail":"instance applyCofree :: (Apply f) =\u003e Apply (Cofree f)"},{"library":"purescript-free","name":"applicativeCofree","module":"Control.Comonad.Cofree","detail":"instance applicativeCofree :: (Applicative f) =\u003e Applicative (Cofree f)"},{"library":"purescript-free","name":"bindCofree","module":"Control.Comonad.Cofree","detail":"instance bindCofree :: (MonadPlus f) =\u003e Bind (Cofree f)"},{"library":"purescript-free","name":"monadCofree","module":"Control.Comonad.Cofree","detail":"instance monadCofree :: (MonadPlus f) =\u003e Monad (Cofree f)"},{"library":"purescript-enums","name":"Cardinality","module":"Data.Enum","detail":"newtype Cardinality a = Cardinality Number"},{"library":"purescript-enums","name":"Cardinality","module":"Data.Enum","detail":"newtype Cardinality a = Cardinality Number"},{"library":"purescript-enums","name":"runCardinality","module":"Data.Enum","detail":"runCardinality :: forall a. Cardinality a -\u003e Number"},{"library":"purescript-enums","name":"Enum","module":"Data.Enum","detail":"class (Ord a) \u003c= Enum a where"},{"library":"purescript-enums","name":"cardinality","module":"Data.Enum","detail":"cardinality :: Cardinality a"},{"library":"purescript-enums","name":"firstEnum","module":"Data.Enum","detail":"firstEnum :: a"},{"library":"purescript-enums","name":"lastEnum","module":"Data.Enum","detail":"lastEnum :: a"},{"library":"purescript-enums","name":"succ","module":"Data.Enum","detail":"succ :: a -\u003e Maybe a"},{"library":"purescript-enums","name":"pred","module":"Data.Enum","detail":"pred :: a -\u003e Maybe a"},{"library":"purescript-enums","name":"toEnum","module":"Data.Enum","detail":"toEnum :: Number -\u003e Maybe a"},{"library":"purescript-enums","name":"fromEnum","module":"Data.Enum","detail":"fromEnum :: a -\u003e Number"},{"library":"purescript-enums","name":"defaultSucc","module":"Data.Enum","detail":"defaultSucc :: forall a. (Number -\u003e Maybe a) -\u003e (a -\u003e Number) -\u003e a -\u003e Maybe a"},{"library":"purescript-enums","name":"defaultPred","module":"Data.Enum","detail":"defaultPred :: forall a. (Number -\u003e Maybe a) -\u003e (a -\u003e Number) -\u003e a -\u003e Maybe a"},{"library":"purescript-enums","name":"defaultToEnum","module":"Data.Enum","detail":"defaultToEnum :: forall a. (a -\u003e Maybe a) -\u003e a -\u003e Number -\u003e Maybe a"},{"library":"purescript-enums","name":"defaultFromEnum","module":"Data.Enum","detail":"defaultFromEnum :: forall a. (a -\u003e Maybe a) -\u003e a -\u003e Number"},{"library":"purescript-enums","name":"enumFromTo","module":"Data.Enum","detail":"enumFromTo :: forall a. (Enum a) =\u003e a -\u003e a -\u003e [a]"},{"library":"purescript-enums","name":"enumFromThenTo","module":"Data.Enum","detail":"enumFromThenTo :: forall a. (Enum a) =\u003e a -\u003e a -\u003e a -\u003e [a]"},{"library":"purescript-enums","name":"intFromTo","module":"Data.Enum","detail":"intFromTo :: Number -\u003e Number -\u003e [Number]"},{"library":"purescript-enums","name":"intStepFromTo","module":"Data.Enum","detail":"intStepFromTo :: Number -\u003e Number -\u003e Number -\u003e [Number]"},{"library":"purescript-enums","name":"enumChar","module":"Data.Enum","detail":"instance enumChar :: Enum Char"},{"library":"purescript-enums","name":"charToEnum","module":"Data.Enum","detail":"charToEnum :: Number -\u003e Maybe Char"},{"library":"purescript-enums","name":"charFromEnum","module":"Data.Enum","detail":"charFromEnum :: Char -\u003e Number"},{"library":"purescript-enums","name":"enumMaybe","module":"Data.Enum","detail":"instance enumMaybe :: (Enum a) =\u003e Enum (Maybe a)"},{"library":"purescript-enums","name":"maybeToEnum","module":"Data.Enum","detail":"maybeToEnum :: forall a. (Enum a) =\u003e Cardinality a -\u003e Number -\u003e Maybe (Maybe a)"},{"library":"purescript-enums","name":"maybeCardinality","module":"Data.Enum","detail":"maybeCardinality :: forall a. (Enum a) =\u003e Cardinality a -\u003e Cardinality (Maybe a)"},{"library":"purescript-enums","name":"enumBoolean","module":"Data.Enum","detail":"instance enumBoolean :: Enum Boolean"},{"library":"purescript-enums","name":"booleanFirstEnum","module":"Data.Enum","detail":"booleanFirstEnum :: Boolean"},{"library":"purescript-enums","name":"booleanSucc","module":"Data.Enum","detail":"booleanSucc :: Boolean -\u003e Maybe Boolean"},{"library":"purescript-enums","name":"booleanPred","module":"Data.Enum","detail":"booleanPred :: Boolean -\u003e Maybe Boolean"},{"library":"purescript-enums","name":"floor","module":"Data.Enum","detail":"floor :: Number -\u003e Number"},{"library":"purescript-enums","name":"enumTuple","module":"Data.Enum","detail":"instance enumTuple :: (Enum a, Enum b) =\u003e Enum (Tuple a b)"},{"library":"purescript-enums","name":"tupleToEnum","module":"Data.Enum","detail":"tupleToEnum :: forall a b. (Enum a, Enum b) =\u003e Cardinality b -\u003e Number -\u003e Maybe (Tuple a b)"},{"library":"purescript-enums","name":"tupleFromEnum","module":"Data.Enum","detail":"tupleFromEnum :: forall a b. (Enum a, Enum b) =\u003e Cardinality b -\u003e Tuple a b -\u003e Number"},{"library":"purescript-enums","name":"tupleCardinality","module":"Data.Enum","detail":"tupleCardinality :: forall a b. (Enum a, Enum b) =\u003e Cardinality a -\u003e Cardinality b -\u003e Cardinality (Tuple a b)"},{"library":"purescript-enums","name":"enumEither","module":"Data.Enum","detail":"instance enumEither :: (Enum a, Enum b) =\u003e Enum (Either a b)"},{"library":"purescript-enums","name":"eitherToEnum","module":"Data.Enum","detail":"eitherToEnum :: forall a b. (Enum a, Enum b) =\u003e Cardinality a -\u003e Cardinality b -\u003e Number -\u003e Maybe (Either a b)"},{"library":"purescript-enums","name":"eitherFromEnum","module":"Data.Enum","detail":"eitherFromEnum :: forall a b. (Enum a, Enum b) =\u003e Cardinality a -\u003e Either a b -\u003e Number"},{"library":"purescript-enums","name":"eitherCardinality","module":"Data.Enum","detail":"eitherCardinality :: forall a b. (Enum a, Enum b) =\u003e Cardinality a -\u003e Cardinality b -\u003e Cardinality (Either a b)"},{"library":"purescript-tuples","name":"Tuple","module":"Data.Tuple","detail":"data Tuple a b = Tuple a b"},{"library":"purescript-tuples","name":"Tuple","module":"Data.Tuple","detail":"data Tuple a b = Tuple a b"},{"library":"purescript-tuples","name":"showTuple","module":"Data.Tuple","detail":"instance showTuple :: (Show a, Show b) =\u003e Show (Tuple a b)"},{"library":"purescript-tuples","name":"eqTuple","module":"Data.Tuple","detail":"instance eqTuple :: (Eq a, Eq b) =\u003e Eq (Tuple a b)"},{"library":"purescript-tuples","name":"ordTuple","module":"Data.Tuple","detail":"instance ordTuple :: (Ord a, Ord b) =\u003e Ord (Tuple a b)"},{"library":"purescript-tuples","name":"semigroupoidTuple","module":"Data.Tuple","detail":"instance semigroupoidTuple :: Semigroupoid Tuple"},{"library":"purescript-tuples","name":"semigroupTuple","module":"Data.Tuple","detail":"instance semigroupTuple :: (Semigroup a, Semigroup b) =\u003e Semigroup (Tuple a b)"},{"library":"purescript-tuples","name":"monoidTuple","module":"Data.Tuple","detail":"instance monoidTuple :: (Monoid a, Monoid b) =\u003e Monoid (Tuple a b)"},{"library":"purescript-tuples","name":"functorTuple","module":"Data.Tuple","detail":"instance functorTuple :: Functor (Tuple a)"},{"library":"purescript-tuples","name":"applyTuple","module":"Data.Tuple","detail":"instance applyTuple :: (Semigroup a) =\u003e Apply (Tuple a)"},{"library":"purescript-tuples","name":"applicativeTuple","module":"Data.Tuple","detail":"instance applicativeTuple :: (Monoid a) =\u003e Applicative (Tuple a)"},{"library":"purescript-tuples","name":"bindTuple","module":"Data.Tuple","detail":"instance bindTuple :: (Semigroup a) =\u003e Bind (Tuple a)"},{"library":"purescript-tuples","name":"monadTuple","module":"Data.Tuple","detail":"instance monadTuple :: (Monoid a) =\u003e Monad (Tuple a)"},{"library":"purescript-tuples","name":"extendTuple","module":"Data.Tuple","detail":"instance extendTuple :: Extend (Tuple a)"},{"library":"purescript-tuples","name":"comonadTuple","module":"Data.Tuple","detail":"instance comonadTuple :: Comonad (Tuple a)"},{"library":"purescript-tuples","name":"lazyTuple","module":"Data.Tuple","detail":"instance lazyTuple :: (Lazy a, Lazy b) =\u003e Lazy (Tuple a b)"},{"library":"purescript-tuples","name":"lazyLazy1Tuple","module":"Data.Tuple","detail":"instance lazyLazy1Tuple :: (Lazy1 l1, Lazy1 l2) =\u003e Lazy (Tuple (l1 a) (l2 b))"},{"library":"purescript-tuples","name":"lazyLazy2Tuple","module":"Data.Tuple","detail":"instance lazyLazy2Tuple :: (Lazy2 l1, Lazy2 l2) =\u003e Lazy (Tuple (l1 a b) (l2 c d))"},{"library":"purescript-tuples","name":"fst","module":"Data.Tuple","detail":"fst :: forall a b. Tuple a b -\u003e a"},{"library":"purescript-tuples","name":"snd","module":"Data.Tuple","detail":"snd :: forall a b. Tuple a b -\u003e b"},{"library":"purescript-tuples","name":"curry","module":"Data.Tuple","detail":"curry :: forall a b c. (Tuple a b -\u003e c) -\u003e a -\u003e b -\u003e c"},{"library":"purescript-tuples","name":"uncurry","module":"Data.Tuple","detail":"uncurry :: forall a b c. (a -\u003e b -\u003e c) -\u003e Tuple a b -\u003e c"},{"library":"purescript-tuples","name":"zip","module":"Data.Tuple","detail":"zip :: forall a b. [a] -\u003e [b] -\u003e [Tuple a b]"},{"library":"purescript-tuples","name":"unzip","module":"Data.Tuple","detail":"unzip :: forall a b. [Tuple a b] -\u003e Tuple [a] [b]"},{"library":"purescript-tuples","name":"swap","module":"Data.Tuple","detail":"swap :: forall a b. Tuple a b -\u003e Tuple b a"},{"library":"purescript-tuples","name":"con2","module":"Data.Tuple.Nested","detail":"con2 :: forall a b z. (a -\u003e b -\u003e z) -\u003e Tuple a b -\u003e z"},{"library":"purescript-tuples","name":"con3","module":"Data.Tuple.Nested","detail":"con3 :: forall a b c z. (a -\u003e b -\u003e c -\u003e z) -\u003e Tuple a (Tuple b c) -\u003e z"},{"library":"purescript-tuples","name":"con4","module":"Data.Tuple.Nested","detail":"con4 :: forall a b c d z. (a -\u003e b -\u003e c -\u003e d -\u003e z) -\u003e Tuple a (Tuple b (Tuple c d)) -\u003e z"},{"library":"purescript-tuples","name":"con5","module":"Data.Tuple.Nested","detail":"con5 :: forall a b c d e z. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e z) -\u003e Tuple a (Tuple b (Tuple c (Tuple d e))) -\u003e z"},{"library":"purescript-tuples","name":"con6","module":"Data.Tuple.Nested","detail":"con6 :: forall a b c d e f z. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e z) -\u003e Tuple a (Tuple b (Tuple c (Tuple d (Tuple e f)))) -\u003e z"},{"library":"purescript-tuples","name":"con7","module":"Data.Tuple.Nested","detail":"con7 :: forall a b c d e f g z. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e z) -\u003e Tuple a (Tuple b (Tuple c (Tuple d (Tuple e (Tuple f g))))) -\u003e z"},{"library":"purescript-tuples","name":"con8","module":"Data.Tuple.Nested","detail":"con8 :: forall a b c d e f g h z. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e z) -\u003e Tuple a (Tuple b (Tuple c (Tuple d (Tuple e (Tuple f (Tuple g h)))))) -\u003e z"},{"library":"purescript-tuples","name":"con9","module":"Data.Tuple.Nested","detail":"con9 :: forall a b c d e f g h i z. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e z) -\u003e Tuple a (Tuple b (Tuple c (Tuple d (Tuple e (Tuple f (Tuple g (Tuple h i))))))) -\u003e z"},{"library":"purescript-tuples","name":"con10","module":"Data.Tuple.Nested","detail":"con10 :: forall a b c d e f g h i j z. (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e f -\u003e g -\u003e h -\u003e i -\u003e j -\u003e z) -\u003e Tuple a (Tuple b (Tuple c (Tuple d (Tuple e (Tuple f (Tuple g (Tuple h (Tuple i j)))))))) -\u003e z"},{"library":"purescript-tuples","name":"(/\\)","module":"Data.Tuple.Nested","detail":"(/\\) :: forall a b. a -\u003e b -\u003e Tuple a b"},{"library":"purescript-arrays","name":"(!!)","module":"Data.Array","detail":"(!!) :: forall a. [a] -\u003e Number -\u003e Maybe a"},{"library":"purescript-arrays","name":"snoc","module":"Data.Array","detail":"snoc :: forall a. [a] -\u003e a -\u003e [a]"},{"library":"purescript-arrays","name":"singleton","module":"Data.Array","detail":"singleton :: forall a. a -\u003e [a]"},{"library":"purescript-arrays","name":"head","module":"Data.Array","detail":"head :: forall a. [a] -\u003e Maybe a"},{"library":"purescript-arrays","name":"last","module":"Data.Array","detail":"last :: forall a. [a] -\u003e Maybe a"},{"library":"purescript-arrays","name":"tail","module":"Data.Array","detail":"tail :: forall a. [a] -\u003e Maybe [a]"},{"library":"purescript-arrays","name":"init","module":"Data.Array","detail":"init :: forall a. [a] -\u003e Maybe [a]"},{"library":"purescript-arrays","name":"null","module":"Data.Array","detail":"null :: forall a. [a] -\u003e Boolean"},{"library":"purescript-arrays","name":"length","module":"Data.Array","detail":"length :: forall a. [a] -\u003e Number"},{"library":"purescript-arrays","name":"findIndex","module":"Data.Array","detail":"findIndex :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e Number"},{"library":"purescript-arrays","name":"findLastIndex","module":"Data.Array","detail":"findLastIndex :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e Number"},{"library":"purescript-arrays","name":"elemIndex","module":"Data.Array","detail":"elemIndex :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e Number"},{"library":"purescript-arrays","name":"elemLastIndex","module":"Data.Array","detail":"elemLastIndex :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e Number"},{"library":"purescript-arrays","name":"append","module":"Data.Array","detail":"append :: forall a. [a] -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"concat","module":"Data.Array","detail":"concat :: forall a. [[a]] -\u003e [a]"},{"library":"purescript-arrays","name":"reverse","module":"Data.Array","detail":"reverse :: forall a. [a] -\u003e [a]"},{"library":"purescript-arrays","name":"drop","module":"Data.Array","detail":"drop :: forall a. Number -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"take","module":"Data.Array","detail":"take :: forall a. Number -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"slice","module":"Data.Array","detail":"slice :: forall a. Number -\u003e Number -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"insertAt","module":"Data.Array","detail":"insertAt :: forall a. Number -\u003e a -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"deleteAt","module":"Data.Array","detail":"deleteAt :: forall a. Number -\u003e Number -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"updateAt","module":"Data.Array","detail":"updateAt :: forall a. Number -\u003e a -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"deleteBy","module":"Data.Array","detail":"deleteBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e a -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"delete","module":"Data.Array","detail":"delete :: forall a. (Eq a) =\u003e a -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"(\\\\)","module":"Data.Array","detail":"(\\\\) :: forall a. (Eq a) =\u003e [a] -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"intersectBy","module":"Data.Array","detail":"intersectBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"intersect","module":"Data.Array","detail":"intersect :: forall a. (Eq a) =\u003e [a] -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"concatMap","module":"Data.Array","detail":"concatMap :: forall a b. (a -\u003e [b]) -\u003e [a] -\u003e [b]"},{"library":"purescript-arrays","name":"map","module":"Data.Array","detail":"map :: forall a b. (a -\u003e b) -\u003e [a] -\u003e [b]"},{"library":"purescript-arrays","name":"mapMaybe","module":"Data.Array","detail":"mapMaybe :: forall a b. (a -\u003e Maybe b) -\u003e [a] -\u003e [b]"},{"library":"purescript-arrays","name":"catMaybes","module":"Data.Array","detail":"catMaybes :: forall a. [Maybe a] -\u003e [a]"},{"library":"purescript-arrays","name":"filter","module":"Data.Array","detail":"filter :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"range","module":"Data.Array","detail":"range :: Number -\u003e Number -\u003e [Number]"},{"library":"purescript-arrays","name":"(..)","module":"Data.Array","detail":"(..) :: Number -\u003e Number -\u003e [Number]"},{"library":"purescript-arrays","name":"zipWith","module":"Data.Array","detail":"zipWith :: forall a b c. (a -\u003e b -\u003e c) -\u003e [a] -\u003e [b] -\u003e [c]"},{"library":"purescript-arrays","name":"nub","module":"Data.Array","detail":"nub :: forall a. (Eq a) =\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"nubBy","module":"Data.Array","detail":"nubBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"sort","module":"Data.Array","detail":"sort :: forall a. (Ord a) =\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"sortBy","module":"Data.Array","detail":"sortBy :: forall a. (a -\u003e a -\u003e Ordering) -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"sortJS","module":"Data.Array","detail":"sortJS :: forall a. (a -\u003e a -\u003e Number) -\u003e [a] -\u003e [a]"},{"library":"purescript-arrays","name":"group","module":"Data.Array","detail":"group :: forall a. (Eq a) =\u003e [a] -\u003e [[a]]"},{"library":"purescript-arrays","name":"group'","module":"Data.Array","detail":"group' :: forall a. (Ord a) =\u003e [a] -\u003e [[a]]"},{"library":"purescript-arrays","name":"groupBy","module":"Data.Array","detail":"groupBy :: forall a. (a -\u003e a -\u003e Boolean) -\u003e [a] -\u003e [[a]]"},{"library":"purescript-arrays","name":"span","module":"Data.Array","detail":"span :: forall a. (a -\u003e Boolean) -\u003e [a] -\u003e { rest :: [a], init :: [a] }"},{"library":"purescript-arrays","name":"functorArray","module":"Data.Array","detail":"instance functorArray :: Functor Prim.Array"},{"library":"purescript-arrays","name":"applyArray","module":"Data.Array","detail":"instance applyArray :: Apply Prim.Array"},{"library":"purescript-arrays","name":"applicativeArray","module":"Data.Array","detail":"instance applicativeArray :: Applicative Prim.Array"},{"library":"purescript-arrays","name":"bindArray","module":"Data.Array","detail":"instance bindArray :: Bind Prim.Array"},{"library":"purescript-arrays","name":"monadArray","module":"Data.Array","detail":"instance monadArray :: Monad Prim.Array"},{"library":"purescript-arrays","name":"semigroupArray","module":"Data.Array","detail":"instance semigroupArray :: Semigroup [a]"},{"library":"purescript-arrays","name":"altArray","module":"Data.Array","detail":"instance altArray :: Alt Prim.Array"},{"library":"purescript-arrays","name":"plusArray","module":"Data.Array","detail":"instance plusArray :: Plus Prim.Array"},{"library":"purescript-arrays","name":"alternativeArray","module":"Data.Array","detail":"instance alternativeArray :: Alternative Prim.Array"},{"library":"purescript-arrays","name":"monadPlusArray","module":"Data.Array","detail":"instance monadPlusArray :: MonadPlus Prim.Array"},{"library":"purescript-arrays","name":"head","module":"Data.Array.Unsafe","detail":"head :: forall a. [a] -\u003e a"},{"library":"purescript-arrays","name":"tail","module":"Data.Array.Unsafe","detail":"tail :: forall a. [a] -\u003e [a]"},{"library":"purescript-arrays","name":"last","module":"Data.Array.Unsafe","detail":"last :: forall a. [a] -\u003e a"},{"library":"purescript-arrays","name":"init","module":"Data.Array.Unsafe","detail":"init :: forall a. [a] -\u003e [a]"},{"library":"purescript-arrays","name":"STArray","module":"Data.Array.ST","detail":"data STArray :: * -\u003e * -\u003e *"},{"library":"purescript-arrays","name":"runSTArray","module":"Data.Array.ST","detail":"runSTArray :: forall a r. (forall h. Eff (st :: ST h | r) (STArray h a)) -\u003e Eff r [a]"},{"library":"purescript-arrays","name":"emptySTArray","module":"Data.Array.ST","detail":"emptySTArray :: forall a h r. Eff (st :: ST h | r) (STArray h a)"},{"library":"purescript-arrays","name":"peekSTArrayImpl","module":"Data.Array.ST","detail":"peekSTArrayImpl :: forall a h e r. Fn4 (STArray h a) Number (a -\u003e r) r (Eff (st :: ST h | e) r)"},{"library":"purescript-arrays","name":"peekSTArray","module":"Data.Array.ST","detail":"peekSTArray :: forall a h r. STArray h a -\u003e Number -\u003e Eff (st :: ST h | r) (Maybe a)"},{"library":"purescript-arrays","name":"pokeSTArrayImpl","module":"Data.Array.ST","detail":"pokeSTArrayImpl :: forall a h e. Fn3 (STArray h a) Number a (Eff (st :: ST h | e) Boolean)"},{"library":"purescript-arrays","name":"pokeSTArray","module":"Data.Array.ST","detail":"pokeSTArray :: forall a h r. STArray h a -\u003e Number -\u003e a -\u003e Eff (st :: ST h | r) Boolean"},{"library":"purescript-arrays","name":"pushSTArrayImpl","module":"Data.Array.ST","detail":"pushSTArrayImpl :: forall a h e. Fn2 (STArray h a) a (Eff (st :: ST h | e) Unit)"},{"library":"purescript-arrays","name":"pushSTArray","module":"Data.Array.ST","detail":"pushSTArray :: forall a h r. STArray h a -\u003e a -\u003e Eff (st :: ST h | r) Unit"},{"library":"purescript-strings","name":"_charAt","module":"Data.String","detail":"_charAt :: forall a. Fn4 Number String (a -\u003e Maybe a) (Maybe a) (Maybe Char)"},{"library":"purescript-strings","name":"charAt","module":"Data.String","detail":"charAt :: Number -\u003e String -\u003e Maybe Char"},{"library":"purescript-strings","name":"fromChar","module":"Data.String","detail":"fromChar :: Char -\u003e String"},{"library":"purescript-strings","name":"singleton","module":"Data.String","detail":"singleton :: Char -\u003e String"},{"library":"purescript-strings","name":"_charCodeAt","module":"Data.String","detail":"_charCodeAt :: forall a. Fn4 Number String (a -\u003e Maybe a) (Maybe a) (Maybe Number)"},{"library":"purescript-strings","name":"charCodeAt","module":"Data.String","detail":"charCodeAt :: Number -\u003e String -\u003e Maybe Number"},{"library":"purescript-strings","name":"null","module":"Data.String","detail":"null :: String -\u003e Boolean"},{"library":"purescript-strings","name":"uncons","module":"Data.String","detail":"uncons :: String -\u003e Maybe { tail :: String, head :: Char }"},{"library":"purescript-strings","name":"takeWhile","module":"Data.String","detail":"takeWhile :: (Char -\u003e Boolean) -\u003e String -\u003e String"},{"library":"purescript-strings","name":"dropWhile","module":"Data.String","detail":"dropWhile :: (Char -\u003e Boolean) -\u003e String -\u003e String"},{"library":"purescript-strings","name":"fromCharArray","module":"Data.String","detail":"fromCharArray :: [Char] -\u003e String"},{"library":"purescript-strings","name":"indexOf","module":"Data.String","detail":"indexOf :: String -\u003e String -\u003e Number"},{"library":"purescript-strings","name":"indexOf'","module":"Data.String","detail":"indexOf' :: String -\u003e Number -\u003e String -\u003e Number"},{"library":"purescript-strings","name":"lastIndexOf","module":"Data.String","detail":"lastIndexOf :: String -\u003e String -\u003e Number"},{"library":"purescript-strings","name":"lastIndexOf'","module":"Data.String","detail":"lastIndexOf' :: String -\u003e Number -\u003e String -\u003e Number"},{"library":"purescript-strings","name":"length","module":"Data.String","detail":"length :: String -\u003e Number"},{"library":"purescript-strings","name":"localeCompare","module":"Data.String","detail":"localeCompare :: String -\u003e String -\u003e Number"},{"library":"purescript-strings","name":"replace","module":"Data.String","detail":"replace :: String -\u003e String -\u003e String -\u003e String"},{"library":"purescript-strings","name":"take","module":"Data.String","detail":"take :: Number -\u003e String -\u003e String"},{"library":"purescript-strings","name":"drop","module":"Data.String","detail":"drop :: Number -\u003e String -\u003e String"},{"library":"purescript-strings","name":"count","module":"Data.String","detail":"count :: (Char -\u003e Boolean) -\u003e String -\u003e Number"},{"library":"purescript-strings","name":"split","module":"Data.String","detail":"split :: String -\u003e String -\u003e [String]"},{"library":"purescript-strings","name":"toCharArray","module":"Data.String","detail":"toCharArray :: String -\u003e [Char]"},{"library":"purescript-strings","name":"toLower","module":"Data.String","detail":"toLower :: String -\u003e String"},{"library":"purescript-strings","name":"toUpper","module":"Data.String","detail":"toUpper :: String -\u003e String"},{"library":"purescript-strings","name":"trim","module":"Data.String","detail":"trim :: String -\u003e String"},{"library":"purescript-strings","name":"joinWith","module":"Data.String","detail":"joinWith :: String -\u003e [String] -\u003e String"},{"library":"purescript-strings","name":"charCodeAt","module":"Data.String.Unsafe","detail":"charCodeAt :: Number -\u003e String -\u003e Number"},{"library":"purescript-strings","name":"charAt","module":"Data.String.Unsafe","detail":"charAt :: Number -\u003e String -\u003e Char"},{"library":"purescript-strings","name":"Regex","module":"Data.String.Regex","detail":"data Regex :: *"},{"library":"purescript-strings","name":"showRegex'","module":"Data.String.Regex","detail":"showRegex' :: Regex -\u003e String"},{"library":"purescript-strings","name":"showRegex","module":"Data.String.Regex","detail":"instance showRegex :: Show Regex"},{"library":"purescript-strings","name":"RegexFlags","module":"Data.String.Regex","detail":"type RegexFlags  = { unicode :: Boolean, sticky :: Boolean, multiline :: Boolean, ignoreCase :: Boolean, global :: Boolean }"},{"library":"purescript-strings","name":"regex'","module":"Data.String.Regex","detail":"regex' :: String -\u003e String -\u003e Regex"},{"library":"purescript-strings","name":"regex","module":"Data.String.Regex","detail":"regex :: String -\u003e RegexFlags -\u003e Regex"},{"library":"purescript-strings","name":"source","module":"Data.String.Regex","detail":"source :: Regex -\u003e String"},{"library":"purescript-strings","name":"flags","module":"Data.String.Regex","detail":"flags :: Regex -\u003e RegexFlags"},{"library":"purescript-strings","name":"renderFlags","module":"Data.String.Regex","detail":"renderFlags :: RegexFlags -\u003e String"},{"library":"purescript-strings","name":"parseFlags","module":"Data.String.Regex","detail":"parseFlags :: String -\u003e RegexFlags"},{"library":"purescript-strings","name":"test","module":"Data.String.Regex","detail":"test :: Regex -\u003e String -\u003e Boolean"},{"library":"purescript-strings","name":"_match","module":"Data.String.Regex","detail":"_match :: forall r. Fn4 Regex String ([String] -\u003e r) r r"},{"library":"purescript-strings","name":"match","module":"Data.String.Regex","detail":"match :: Regex -\u003e String -\u003e Maybe [String]"},{"library":"purescript-strings","name":"replace","module":"Data.String.Regex","detail":"replace :: Regex -\u003e String -\u003e String -\u003e String"},{"library":"purescript-strings","name":"replace'","module":"Data.String.Regex","detail":"replace' :: Regex -\u003e (String -\u003e [String] -\u003e String) -\u003e String -\u003e String"},{"library":"purescript-strings","name":"search","module":"Data.String.Regex","detail":"search :: Regex -\u003e String -\u003e Number"},{"library":"purescript-strings","name":"split","module":"Data.String.Regex","detail":"split :: Regex -\u003e String -\u003e [String]"},{"library":"purescript-strings","name":"Char","module":"Data.Char","detail":"newtype Char = Char String"},{"library":"purescript-strings","name":"Char","module":"Data.Char","detail":"newtype Char = Char String"},{"library":"purescript-strings","name":"charString","module":"Data.Char","detail":"charString :: Char -\u003e String"},{"library":"purescript-strings","name":"toCharCode","module":"Data.Char","detail":"toCharCode :: Char -\u003e Number"},{"library":"purescript-strings","name":"fromCharCode","module":"Data.Char","detail":"fromCharCode :: Number -\u003e Char"},{"library":"purescript-strings","name":"eqChar","module":"Data.Char","detail":"instance eqChar :: Eq Char"},{"library":"purescript-strings","name":"ordChar","module":"Data.Char","detail":"instance ordChar :: Ord Char"},{"library":"purescript-strings","name":"showChar","module":"Data.Char","detail":"instance showChar :: Show Char"},{"library":"purescript-refs","name":"Ref","module":"Control.Monad.Eff.Ref","detail":"data Ref :: !"},{"library":"purescript-refs","name":"RefVal","module":"Control.Monad.Eff.Ref","detail":"data RefVal :: * -\u003e *"},{"library":"purescript-refs","name":"newRef","module":"Control.Monad.Eff.Ref","detail":"newRef :: forall s r. s -\u003e Eff (ref :: Ref | r) (RefVal s)"},{"library":"purescript-refs","name":"readRef","module":"Control.Monad.Eff.Ref","detail":"readRef :: forall s r. RefVal s -\u003e Eff (ref :: Ref | r) s"},{"library":"purescript-refs","name":"modifyRef'","module":"Control.Monad.Eff.Ref","detail":"modifyRef' :: forall s b r. RefVal s -\u003e (s -\u003e { retVal :: b, newState :: s }) -\u003e Eff (ref :: Ref | r) b"},{"library":"purescript-refs","name":"modifyRef","module":"Control.Monad.Eff.Ref","detail":"modifyRef :: forall s r. RefVal s -\u003e (s -\u003e s) -\u003e Eff (ref :: Ref | r) Unit"},{"library":"purescript-refs","name":"writeRef","module":"Control.Monad.Eff.Ref","detail":"writeRef :: forall s r. RefVal s -\u003e s -\u003e Eff (ref :: Ref | r) Unit"},{"library":"purescript-refs","name":"unsafeRunRef","module":"Control.Monad.Eff.Ref.Unsafe","detail":"unsafeRunRef :: forall eff a. Eff (ref :: Ref | eff) a -\u003e Eff eff a"},{"library":"purescript-bifunctors","name":"Bifoldable","module":"Data.Bifoldable","detail":"class Bifoldable p where"},{"library":"purescript-bifunctors","name":"bifoldr","module":"Data.Bifoldable","detail":"bifoldr :: forall a b c. (a -\u003e c -\u003e c) -\u003e (b -\u003e c -\u003e c) -\u003e c -\u003e p a b -\u003e c"},{"library":"purescript-bifunctors","name":"bifoldl","module":"Data.Bifoldable","detail":"bifoldl :: forall a b c. (c -\u003e a -\u003e c) -\u003e (c -\u003e b -\u003e c) -\u003e c -\u003e p a b -\u003e c"},{"library":"purescript-bifunctors","name":"bifoldMap","module":"Data.Bifoldable","detail":"bifoldMap :: forall m a b. (Monoid m) =\u003e (a -\u003e m) -\u003e (b -\u003e m) -\u003e p a b -\u003e m"},{"library":"purescript-bifunctors","name":"bifoldableTuple","module":"Data.Bifoldable","detail":"instance bifoldableTuple :: Bifoldable Tuple"},{"library":"purescript-bifunctors","name":"bifoldableEither","module":"Data.Bifoldable","detail":"instance bifoldableEither :: Bifoldable Either"},{"library":"purescript-bifunctors","name":"bifoldableConst","module":"Data.Bifoldable","detail":"instance bifoldableConst :: Bifoldable Const"},{"library":"purescript-bifunctors","name":"bifold","module":"Data.Bifoldable","detail":"bifold :: forall t m. (Bifoldable t, Monoid m) =\u003e t m m -\u003e m"},{"library":"purescript-bifunctors","name":"bitraverse_","module":"Data.Bifoldable","detail":"bitraverse_ :: forall t f a b c d. (Bifoldable t, Applicative f) =\u003e (a -\u003e f c) -\u003e (b -\u003e f d) -\u003e t a b -\u003e f Unit"},{"library":"purescript-bifunctors","name":"bifor_","module":"Data.Bifoldable","detail":"bifor_ :: forall t f a b c d. (Bifoldable t, Applicative f) =\u003e t a b -\u003e (a -\u003e f c) -\u003e (b -\u003e f d) -\u003e f Unit"},{"library":"purescript-bifunctors","name":"bisequence_","module":"Data.Bifoldable","detail":"bisequence_ :: forall t f a b. (Bifoldable t, Applicative f) =\u003e t (f a) (f b) -\u003e f Unit"},{"library":"purescript-bifunctors","name":"biany","module":"Data.Bifoldable","detail":"biany :: forall t a b. (Bifoldable t) =\u003e (a -\u003e Boolean) -\u003e (b -\u003e Boolean) -\u003e t a b -\u003e Boolean"},{"library":"purescript-bifunctors","name":"biall","module":"Data.Bifoldable","detail":"biall :: forall t a b. (Bifoldable t) =\u003e (a -\u003e Boolean) -\u003e (b -\u003e Boolean) -\u003e t a b -\u003e Boolean"},{"library":"purescript-bifunctors","name":"Bifunctor","module":"Data.Bifunctor","detail":"class Bifunctor f where"},{"library":"purescript-bifunctors","name":"bimap","module":"Data.Bifunctor","detail":"bimap :: forall a b c d. (a -\u003e b) -\u003e (c -\u003e d) -\u003e f a c -\u003e f b d"},{"library":"purescript-bifunctors","name":"lmap","module":"Data.Bifunctor","detail":"lmap :: forall f a b c. (Bifunctor f) =\u003e (a -\u003e b) -\u003e f a c -\u003e f b c"},{"library":"purescript-bifunctors","name":"rmap","module":"Data.Bifunctor","detail":"rmap :: forall f a b c. (Bifunctor f) =\u003e (b -\u003e c) -\u003e f a b -\u003e f a c"},{"library":"purescript-bifunctors","name":"bifunctorEither","module":"Data.Bifunctor","detail":"instance bifunctorEither :: Bifunctor Either"},{"library":"purescript-bifunctors","name":"bifunctorTuple","module":"Data.Bifunctor","detail":"instance bifunctorTuple :: Bifunctor Tuple"},{"library":"purescript-bifunctors","name":"bifunctorConst","module":"Data.Bifunctor","detail":"instance bifunctorConst :: Bifunctor Const"},{"library":"purescript-bifunctors","name":"Bitraversable","module":"Data.Bitraversable","detail":"class (Bifunctor t, Bifoldable t) \u003c= Bitraversable t where"},{"library":"purescript-bifunctors","name":"bitraverse","module":"Data.Bitraversable","detail":"bitraverse :: forall f a b c d. (Applicative f) =\u003e (a -\u003e f c) -\u003e (b -\u003e f d) -\u003e t a b -\u003e f (t c d)"},{"library":"purescript-bifunctors","name":"bisequence","module":"Data.Bitraversable","detail":"bisequence :: forall f a b. (Applicative f) =\u003e t (f a) (f b) -\u003e f (t a b)"},{"library":"purescript-bifunctors","name":"bitraversableTuple","module":"Data.Bitraversable","detail":"instance bitraversableTuple :: Bitraversable Tuple"},{"library":"purescript-bifunctors","name":"bitraversableEither","module":"Data.Bitraversable","detail":"instance bitraversableEither :: Bitraversable Either"},{"library":"purescript-bifunctors","name":"bitraversableConst","module":"Data.Bitraversable","detail":"instance bitraversableConst :: Bitraversable Const"},{"library":"purescript-bifunctors","name":"bifor","module":"Data.Bitraversable","detail":"bifor :: forall t f a b c d. (Bitraversable t, Applicative f) =\u003e t a b -\u003e (a -\u003e f c) -\u003e (b -\u003e f d) -\u003e f (t c d)"},{"library":"purescript-bifunctors","name":"Clown","module":"Data.Bifunctor.Clown","detail":"data Clown f a b = Clown (f a)"},{"library":"purescript-bifunctors","name":"Clown","module":"Data.Bifunctor.Clown","detail":"data Clown f a b = Clown (f a)"},{"library":"purescript-bifunctors","name":"runClown","module":"Data.Bifunctor.Clown","detail":"runClown :: forall f a b. Clown f a b -\u003e f a"},{"library":"purescript-bifunctors","name":"clownBifunctor","module":"Data.Bifunctor.Clown","detail":"instance clownBifunctor :: (Functor f) =\u003e Bifunctor (Clown f)"},{"library":"purescript-bifunctors","name":"clownFunctor","module":"Data.Bifunctor.Clown","detail":"instance clownFunctor :: Functor (Clown f a)"},{"library":"purescript-bifunctors","name":"clownBiapply","module":"Data.Bifunctor.Clown","detail":"instance clownBiapply :: (Apply f) =\u003e Biapply (Clown f)"},{"library":"purescript-bifunctors","name":"clownBiapplicative","module":"Data.Bifunctor.Clown","detail":"instance clownBiapplicative :: (Applicative f) =\u003e Biapplicative (Clown f)"},{"library":"purescript-bifunctors","name":"clownBifoldable","module":"Data.Bifunctor.Clown","detail":"instance clownBifoldable :: (Foldable f) =\u003e Bifoldable (Clown f)"},{"library":"purescript-bifunctors","name":"clownFoldable","module":"Data.Bifunctor.Clown","detail":"instance clownFoldable :: Foldable (Clown f a)"},{"library":"purescript-bifunctors","name":"clownBitraversable","module":"Data.Bifunctor.Clown","detail":"instance clownBitraversable :: (Traversable f) =\u003e Bitraversable (Clown f)"},{"library":"purescript-bifunctors","name":"clownTraversable","module":"Data.Bifunctor.Clown","detail":"instance clownTraversable :: Traversable (Clown f a)"},{"library":"purescript-bifunctors","name":"Join","module":"Data.Bifunctor.Join","detail":"data Join p a = Join (p a a)"},{"library":"purescript-bifunctors","name":"Join","module":"Data.Bifunctor.Join","detail":"data Join p a = Join (p a a)"},{"library":"purescript-bifunctors","name":"runJoin","module":"Data.Bifunctor.Join","detail":"runJoin :: forall p a. Join p a -\u003e p a a"},{"library":"purescript-bifunctors","name":"joinFunctor","module":"Data.Bifunctor.Join","detail":"instance joinFunctor :: (Bifunctor p) =\u003e Functor (Join p)"},{"library":"purescript-bifunctors","name":"joinApply","module":"Data.Bifunctor.Join","detail":"instance joinApply :: (Biapply p) =\u003e Apply (Join p)"},{"library":"purescript-bifunctors","name":"joinApplicative","module":"Data.Bifunctor.Join","detail":"instance joinApplicative :: (Biapplicative p) =\u003e Applicative (Join p)"},{"library":"purescript-bifunctors","name":"joinFoldable","module":"Data.Bifunctor.Join","detail":"instance joinFoldable :: (Bifoldable p) =\u003e Foldable (Join p)"},{"library":"purescript-bifunctors","name":"joinTraversable","module":"Data.Bifunctor.Join","detail":"instance joinTraversable :: (Bitraversable p) =\u003e Traversable (Join p)"},{"library":"purescript-bifunctors","name":"Joker","module":"Data.Bifunctor.Joker","detail":"data Joker g a b = Joker (g b)"},{"library":"purescript-bifunctors","name":"Joker","module":"Data.Bifunctor.Joker","detail":"data Joker g a b = Joker (g b)"},{"library":"purescript-bifunctors","name":"runJoker","module":"Data.Bifunctor.Joker","detail":"runJoker :: forall g a b. Joker g a b -\u003e g b"},{"library":"purescript-bifunctors","name":"jokerBifunctor","module":"Data.Bifunctor.Joker","detail":"instance jokerBifunctor :: (Functor g) =\u003e Bifunctor (Joker g)"},{"library":"purescript-bifunctors","name":"jokerFunctor","module":"Data.Bifunctor.Joker","detail":"instance jokerFunctor :: (Functor g) =\u003e Functor (Joker g a)"},{"library":"purescript-bifunctors","name":"jokerBiapply","module":"Data.Bifunctor.Joker","detail":"instance jokerBiapply :: (Apply g) =\u003e Biapply (Joker g)"},{"library":"purescript-bifunctors","name":"jokerBiapplicative","module":"Data.Bifunctor.Joker","detail":"instance jokerBiapplicative :: (Applicative g) =\u003e Biapplicative (Joker g)"},{"library":"purescript-bifunctors","name":"jokerBifoldable","module":"Data.Bifunctor.Joker","detail":"instance jokerBifoldable :: (Foldable g) =\u003e Bifoldable (Joker g)"},{"library":"purescript-bifunctors","name":"jokerFoldable","module":"Data.Bifunctor.Joker","detail":"instance jokerFoldable :: (Foldable g) =\u003e Foldable (Joker g a)"},{"library":"purescript-bifunctors","name":"jokerBitraversable","module":"Data.Bifunctor.Joker","detail":"instance jokerBitraversable :: (Traversable g) =\u003e Bitraversable (Joker g)"},{"library":"purescript-bifunctors","name":"jokerTraversable","module":"Data.Bifunctor.Joker","detail":"instance jokerTraversable :: (Traversable g) =\u003e Traversable (Joker g a)"},{"library":"purescript-bifunctors","name":"Flip","module":"Data.Bifunctor.Flip","detail":"data Flip p a b = Flip (p b a)"},{"library":"purescript-bifunctors","name":"Flip","module":"Data.Bifunctor.Flip","detail":"data Flip p a b = Flip (p b a)"},{"library":"purescript-bifunctors","name":"runFlip","module":"Data.Bifunctor.Flip","detail":"runFlip :: forall p a b. Flip p a b -\u003e p b a"},{"library":"purescript-bifunctors","name":"flipBifunctor","module":"Data.Bifunctor.Flip","detail":"instance flipBifunctor :: (Bifunctor p) =\u003e Bifunctor (Flip p)"},{"library":"purescript-bifunctors","name":"flipFunctor","module":"Data.Bifunctor.Flip","detail":"instance flipFunctor :: (Bifunctor p) =\u003e Functor (Flip p a)"},{"library":"purescript-bifunctors","name":"flipBiapply","module":"Data.Bifunctor.Flip","detail":"instance flipBiapply :: (Biapply p) =\u003e Biapply (Flip p)"},{"library":"purescript-bifunctors","name":"flipBiapplicative","module":"Data.Bifunctor.Flip","detail":"instance flipBiapplicative :: (Biapplicative p) =\u003e Biapplicative (Flip p)"},{"library":"purescript-bifunctors","name":"flipBifoldable","module":"Data.Bifunctor.Flip","detail":"instance flipBifoldable :: (Bifoldable p) =\u003e Bifoldable (Flip p)"},{"library":"purescript-bifunctors","name":"flipFoldable","module":"Data.Bifunctor.Flip","detail":"instance flipFoldable :: (Bifoldable p) =\u003e Foldable (Flip p a)"},{"library":"purescript-bifunctors","name":"flipBitraversable","module":"Data.Bifunctor.Flip","detail":"instance flipBitraversable :: (Bitraversable p) =\u003e Bitraversable (Flip p)"},{"library":"purescript-bifunctors","name":"flipTraversable","module":"Data.Bifunctor.Flip","detail":"instance flipTraversable :: (Bitraversable p) =\u003e Traversable (Flip p a)"},{"library":"purescript-bifunctors","name":"Product","module":"Data.Bifunctor.Product","detail":"data Product f g a b = Pair (f a b) (g a b)"},{"library":"purescript-bifunctors","name":"Pair","module":"Data.Bifunctor.Product","detail":"data Product f g a b = Pair (f a b) (g a b)"},{"library":"purescript-bifunctors","name":"productBifunctor","module":"Data.Bifunctor.Product","detail":"instance productBifunctor :: (Bifunctor f, Bifunctor g) =\u003e Bifunctor (Product f g)"},{"library":"purescript-bifunctors","name":"productBiapply","module":"Data.Bifunctor.Product","detail":"instance productBiapply :: (Biapply f, Biapply g) =\u003e Biapply (Product f g)"},{"library":"purescript-bifunctors","name":"productBiapplicative","module":"Data.Bifunctor.Product","detail":"instance productBiapplicative :: (Biapplicative f, Biapplicative g) =\u003e Biapplicative (Product f g)"},{"library":"purescript-bifunctors","name":"productBifoldable","module":"Data.Bifunctor.Product","detail":"instance productBifoldable :: (Bifoldable f, Bifoldable g) =\u003e Bifoldable (Product f g)"},{"library":"purescript-bifunctors","name":"productBitraversable","module":"Data.Bifunctor.Product","detail":"instance productBitraversable :: (Bitraversable f, Bitraversable g) =\u003e Bitraversable (Product f g)"},{"library":"purescript-bifunctors","name":"Wrap","module":"Data.Bifunctor.Wrap","detail":"data Wrap p a b = Wrap (p a b)"},{"library":"purescript-bifunctors","name":"Wrap","module":"Data.Bifunctor.Wrap","detail":"data Wrap p a b = Wrap (p a b)"},{"library":"purescript-bifunctors","name":"unwrap","module":"Data.Bifunctor.Wrap","detail":"unwrap :: forall p a b. Wrap p a b -\u003e p a b"},{"library":"purescript-bifunctors","name":"wrapBifunctor","module":"Data.Bifunctor.Wrap","detail":"instance wrapBifunctor :: (Bifunctor p) =\u003e Bifunctor (Wrap p)"},{"library":"purescript-bifunctors","name":"wrapFunctor","module":"Data.Bifunctor.Wrap","detail":"instance wrapFunctor :: (Bifunctor p) =\u003e Functor (Wrap p a)"},{"library":"purescript-bifunctors","name":"wrapBiapply","module":"Data.Bifunctor.Wrap","detail":"instance wrapBiapply :: (Biapply p) =\u003e Biapply (Wrap p)"},{"library":"purescript-bifunctors","name":"wrapBiapplicative","module":"Data.Bifunctor.Wrap","detail":"instance wrapBiapplicative :: (Biapplicative p) =\u003e Biapplicative (Wrap p)"},{"library":"purescript-bifunctors","name":"wrapBifoldable","module":"Data.Bifunctor.Wrap","detail":"instance wrapBifoldable :: (Bifoldable p) =\u003e Bifoldable (Wrap p)"},{"library":"purescript-bifunctors","name":"wrapFoldable","module":"Data.Bifunctor.Wrap","detail":"instance wrapFoldable :: (Bifoldable p) =\u003e Foldable (Wrap p a)"},{"library":"purescript-bifunctors","name":"wrapBitraversable","module":"Data.Bifunctor.Wrap","detail":"instance wrapBitraversable :: (Bitraversable p) =\u003e Bitraversable (Wrap p)"},{"library":"purescript-bifunctors","name":"wrapTraversable","module":"Data.Bifunctor.Wrap","detail":"instance wrapTraversable :: (Bitraversable p) =\u003e Traversable (Wrap p a)"},{"library":"purescript-bifunctors","name":"(\u003c\u003c$\u003e\u003e)","module":"Control.Biapply","detail":"(\u003c\u003c$\u003e\u003e) :: forall a b. (a -\u003e b) -\u003e a -\u003e b"},{"library":"purescript-bifunctors","name":"Biapply","module":"Control.Biapply","detail":"class (Bifunctor w) \u003c= Biapply w where"},{"library":"purescript-bifunctors","name":"(\u003c\u003c*\u003e\u003e)","module":"Control.Biapply","detail":"(\u003c\u003c*\u003e\u003e) :: forall a b c d. w (a -\u003e b) (c -\u003e d) -\u003e w a c -\u003e w b d"},{"library":"purescript-bifunctors","name":"(*\u003e\u003e)","module":"Control.Biapply","detail":"(*\u003e\u003e) :: forall w a b c d. (Biapply w) =\u003e w a b -\u003e w c d -\u003e w c d"},{"library":"purescript-bifunctors","name":"(\u003c\u003c*)","module":"Control.Biapply","detail":"(\u003c\u003c*) :: forall w a b c d. (Biapply w) =\u003e w a b -\u003e w c d -\u003e w a b"},{"library":"purescript-bifunctors","name":"bilift2","module":"Control.Biapply","detail":"bilift2 :: forall w a b c d e f. (Biapply w) =\u003e (a -\u003e b -\u003e c) -\u003e (d -\u003e e -\u003e f) -\u003e w a d -\u003e w b e -\u003e w c f"},{"library":"purescript-bifunctors","name":"bilift3","module":"Control.Biapply","detail":"bilift3 :: forall w a b c d e f g h. (Biapply w) =\u003e (a -\u003e b -\u003e c -\u003e d) -\u003e (e -\u003e f -\u003e g -\u003e h) -\u003e w a e -\u003e w b f -\u003e w c g -\u003e w d h"},{"library":"purescript-bifunctors","name":"biapplyTuple","module":"Control.Biapply","detail":"instance biapplyTuple :: Biapply Tuple"},{"library":"purescript-bifunctors","name":"biapplyConst","module":"Control.Biapply","detail":"instance biapplyConst :: Biapply Const"},{"library":"purescript-bifunctors","name":"Biapplicative","module":"Control.Biapplicative","detail":"class (Biapply w) \u003c= Biapplicative w where"},{"library":"purescript-bifunctors","name":"bipure","module":"Control.Biapplicative","detail":"bipure :: forall a b. a -\u003e b -\u003e w a b"},{"library":"purescript-bifunctors","name":"biapplicativeTuple","module":"Control.Biapplicative","detail":"instance biapplicativeTuple :: Biapplicative Tuple"},{"library":"purescript-bifunctors","name":"biapplicativeConst","module":"Control.Biapplicative","detail":"instance biapplicativeConst :: Biapplicative Const"},{"library":"purescript-globals","name":"nan","module":"Global","detail":"nan :: Number"},{"library":"purescript-globals","name":"isNaN","module":"Global","detail":"isNaN :: Number -\u003e Boolean"},{"library":"purescript-globals","name":"infinity","module":"Global","detail":"infinity :: Number"},{"library":"purescript-globals","name":"isFinite","module":"Global","detail":"isFinite :: Number -\u003e Boolean"},{"library":"purescript-globals","name":"readInt","module":"Global","detail":"readInt :: Number -\u003e String -\u003e Number"},{"library":"purescript-globals","name":"readFloat","module":"Global","detail":"readFloat :: String -\u003e Number"},{"library":"purescript-exceptions","name":"Exception","module":"Control.Monad.Eff.Exception","detail":"data Exception :: !"},{"library":"purescript-exceptions","name":"Error","module":"Control.Monad.Eff.Exception","detail":"data Error :: *"},{"library":"purescript-exceptions","name":"showError","module":"Control.Monad.Eff.Exception","detail":"instance showError :: Show Error"},{"library":"purescript-exceptions","name":"showErrorImpl","module":"Control.Monad.Eff.Exception","detail":"showErrorImpl :: Error -\u003e String"},{"library":"purescript-exceptions","name":"error","module":"Control.Monad.Eff.Exception","detail":"error :: String -\u003e Error"},{"library":"purescript-exceptions","name":"message","module":"Control.Monad.Eff.Exception","detail":"message :: Error -\u003e String"},{"library":"purescript-exceptions","name":"throwException","module":"Control.Monad.Eff.Exception","detail":"throwException :: forall a eff. Error -\u003e Eff (err :: Exception | eff) a"},{"library":"purescript-exceptions","name":"catchException","module":"Control.Monad.Eff.Exception","detail":"catchException :: forall a eff. (Error -\u003e Eff eff a) -\u003e Eff (err :: Exception | eff) a -\u003e Eff eff a"},{"library":"purescript-distributive","name":"Distributive","module":"Data.Distributive","detail":"class (Functor f) \u003c= Distributive f where"},{"library":"purescript-distributive","name":"distribute","module":"Data.Distributive","detail":"distribute :: forall a g. (Functor g) =\u003e g (f a) -\u003e f (g a)"},{"library":"purescript-distributive","name":"collect","module":"Data.Distributive","detail":"collect :: forall a b g. (Functor g) =\u003e (a -\u003e f b) -\u003e g a -\u003e f (g b)"},{"library":"purescript-distributive","name":"cotraverse","module":"Data.Distributive","detail":"cotraverse :: forall a b f g. (Distributive f, Functor g) =\u003e (g a -\u003e b) -\u003e g (f a) -\u003e f b"},{"library":"purescript-distributive","name":"distributiveIdentity","module":"Data.Distributive","detail":"instance distributiveIdentity :: Distributive Identity"},{"library":"purescript-control","name":"Plus","module":"Control.Plus","detail":"class (Alt f) \u003c= Plus f where"},{"library":"purescript-control","name":"empty","module":"Control.Plus","detail":"empty :: forall a. f a"},{"library":"purescript-control","name":"(\u003c*)","module":"Control.Apply","detail":"(\u003c*) :: forall a b f. (Apply f) =\u003e f a -\u003e f b -\u003e f a"},{"library":"purescript-control","name":"(*\u003e)","module":"Control.Apply","detail":"(*\u003e) :: forall a b f. (Apply f) =\u003e f a -\u003e f b -\u003e f b"},{"library":"purescript-control","name":"lift2","module":"Control.Apply","detail":"lift2 :: forall a b c f. (Apply f) =\u003e (a -\u003e b -\u003e c) -\u003e f a -\u003e f b -\u003e f c"},{"library":"purescript-control","name":"lift3","module":"Control.Apply","detail":"lift3 :: forall a b c d f. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d) -\u003e f a -\u003e f b -\u003e f c -\u003e f d"},{"library":"purescript-control","name":"lift4","module":"Control.Apply","detail":"lift4 :: forall a b c d e f. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e"},{"library":"purescript-control","name":"lift5","module":"Control.Apply","detail":"lift5 :: forall a b c d e f g. (Apply f) =\u003e (a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e g) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e -\u003e f g"},{"library":"purescript-control","name":"forever","module":"Control.Apply","detail":"forever :: forall a b f. (Apply f) =\u003e f a -\u003e f b"},{"library":"purescript-control","name":"(=\u003c\u003c)","module":"Control.Bind","detail":"(=\u003c\u003c) :: forall a b m. (Bind m) =\u003e (a -\u003e m b) -\u003e m a -\u003e m b"},{"library":"purescript-control","name":"(\u003e=\u003e)","module":"Control.Bind","detail":"(\u003e=\u003e) :: forall a b c m. (Bind m) =\u003e (a -\u003e m b) -\u003e (b -\u003e m c) -\u003e a -\u003e m c"},{"library":"purescript-control","name":"(\u003c=\u003c)","module":"Control.Bind","detail":"(\u003c=\u003c) :: forall a b c m. (Bind m) =\u003e (b -\u003e m c) -\u003e (a -\u003e m b) -\u003e a -\u003e m c"},{"library":"purescript-control","name":"join","module":"Control.Bind","detail":"join :: forall a m. (Bind m) =\u003e m (m a) -\u003e m a"},{"library":"purescript-control","name":"ifM","module":"Control.Bind","detail":"ifM :: forall a m. (Bind m) =\u003e m Boolean -\u003e m a -\u003e m a -\u003e m a"},{"library":"purescript-control","name":"replicateM","module":"Control.Monad","detail":"replicateM :: forall m a. (Monad m) =\u003e Number -\u003e m a -\u003e m [a]"},{"library":"purescript-control","name":"foldM","module":"Control.Monad","detail":"foldM :: forall m a b. (Monad m) =\u003e (a -\u003e b -\u003e m a) -\u003e a -\u003e [b] -\u003e m a"},{"library":"purescript-control","name":"when","module":"Control.Monad","detail":"when :: forall m. (Monad m) =\u003e Boolean -\u003e m Unit -\u003e m Unit"},{"library":"purescript-control","name":"unless","module":"Control.Monad","detail":"unless :: forall m. (Monad m) =\u003e Boolean -\u003e m Unit -\u003e m Unit"},{"library":"purescript-control","name":"Extend","module":"Control.Extend","detail":"class (Functor w) \u003c= Extend w where"},{"library":"purescript-control","name":"(\u003c\u003c=)","module":"Control.Extend","detail":"(\u003c\u003c=) :: forall b a. (w a -\u003e b) -\u003e w a -\u003e w b"},{"library":"purescript-control","name":"extendArr","module":"Control.Extend","detail":"instance extendArr :: (Semigroup w) =\u003e Extend (Prim.Function w)"},{"library":"purescript-control","name":"(=\u003e\u003e)","module":"Control.Extend","detail":"(=\u003e\u003e) :: forall b a w. (Extend w) =\u003e w a -\u003e (w a -\u003e b) -\u003e w b"},{"library":"purescript-control","name":"(=\u003e=)","module":"Control.Extend","detail":"(=\u003e=) :: forall b a w c. (Extend w) =\u003e (w a -\u003e b) -\u003e (w b -\u003e c) -\u003e w a -\u003e c"},{"library":"purescript-control","name":"(=\u003c=)","module":"Control.Extend","detail":"(=\u003c=) :: forall b a w c. (Extend w) =\u003e (w b -\u003e c) -\u003e (w a -\u003e b) -\u003e w a -\u003e c"},{"library":"purescript-control","name":"duplicate","module":"Control.Extend","detail":"duplicate :: forall a w. (Extend w) =\u003e w a -\u003e w (w a)"},{"library":"purescript-control","name":"Comonad","module":"Control.Comonad","detail":"class (Extend w) \u003c= Comonad w where"},{"library":"purescript-control","name":"extract","module":"Control.Comonad","detail":"extract :: forall a. w a -\u003e a"},{"library":"purescript-control","name":"Alt","module":"Control.Alt","detail":"class (Functor f) \u003c= Alt f where"},{"library":"purescript-control","name":"(\u003c|\u003e)","module":"Control.Alt","detail":"(\u003c|\u003e) :: forall a. f a -\u003e f a -\u003e f a"},{"library":"purescript-control","name":"Lazy","module":"Control.Lazy","detail":"class Lazy l where"},{"library":"purescript-control","name":"defer","module":"Control.Lazy","detail":"defer :: (Unit -\u003e l) -\u003e l"},{"library":"purescript-control","name":"Lazy1","module":"Control.Lazy","detail":"class Lazy1 l where"},{"library":"purescript-control","name":"defer1","module":"Control.Lazy","detail":"defer1 :: forall a. (Unit -\u003e l a) -\u003e l a"},{"library":"purescript-control","name":"Lazy2","module":"Control.Lazy","detail":"class Lazy2 l where"},{"library":"purescript-control","name":"defer2","module":"Control.Lazy","detail":"defer2 :: forall a b. (Unit -\u003e l a b) -\u003e l a b"},{"library":"purescript-control","name":"fix","module":"Control.Lazy","detail":"fix :: forall l a. (Lazy l) =\u003e (l -\u003e l) -\u003e l"},{"library":"purescript-control","name":"fix1","module":"Control.Lazy","detail":"fix1 :: forall l a. (Lazy1 l) =\u003e (l a -\u003e l a) -\u003e l a"},{"library":"purescript-control","name":"fix2","module":"Control.Lazy","detail":"fix2 :: forall l a b. (Lazy2 l) =\u003e (l a b -\u003e l a b) -\u003e l a b"},{"library":"purescript-control","name":"Alternative","module":"Control.Alternative","detail":"class (Applicative f, Plus f) \u003c= Alternative f where"},{"library":"purescript-control","name":"some","module":"Control.Alternative","detail":"some :: forall f a. (Alternative f, Lazy1 f) =\u003e f a -\u003e f [a]"},{"library":"purescript-control","name":"many","module":"Control.Alternative","detail":"many :: forall f a. (Alternative f, Lazy1 f) =\u003e f a -\u003e f [a]"},{"library":"purescript-control","name":"MonadPlus","module":"Control.MonadPlus","detail":"class (Monad m, Alternative m) \u003c= MonadPlus m where"},{"library":"purescript-control","name":"guard","module":"Control.MonadPlus","detail":"guard :: forall m. (MonadPlus m) =\u003e Boolean -\u003e m Unit"},{"library":"purescript-exists","name":"Exists","module":"Data.Exists","detail":"data Exists :: (* -\u003e *) -\u003e *"},{"library":"purescript-exists","name":"mkExists","module":"Data.Exists","detail":"mkExists :: forall f a. f a -\u003e Exists f"},{"library":"purescript-exists","name":"runExists","module":"Data.Exists","detail":"runExists :: forall f r. (forall a. f a -\u003e r) -\u003e Exists f -\u003e r"},{"library":"purescript-either","name":"Either","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"library":"purescript-either","name":"Left","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"library":"purescript-either","name":"Right","module":"Data.Either","detail":"data Either a b = Left a | Right b"},{"library":"purescript-either","name":"either","module":"Data.Either","detail":"either :: forall a b c. (a -\u003e c) -\u003e (b -\u003e c) -\u003e Either a b -\u003e c"},{"library":"purescript-either","name":"isLeft","module":"Data.Either","detail":"isLeft :: forall a b. Either a b -\u003e Boolean"},{"library":"purescript-either","name":"isRight","module":"Data.Either","detail":"isRight :: forall a b. Either a b -\u003e Boolean"},{"library":"purescript-either","name":"functorEither","module":"Data.Either","detail":"instance functorEither :: Functor (Either a)"},{"library":"purescript-either","name":"applyEither","module":"Data.Either","detail":"instance applyEither :: Apply (Either e)"},{"library":"purescript-either","name":"applicativeEither","module":"Data.Either","detail":"instance applicativeEither :: Applicative (Either e)"},{"library":"purescript-either","name":"altEither","module":"Data.Either","detail":"instance altEither :: Alt (Either e)"},{"library":"purescript-either","name":"bindEither","module":"Data.Either","detail":"instance bindEither :: Bind (Either e)"},{"library":"purescript-either","name":"monadEither","module":"Data.Either","detail":"instance monadEither :: Monad (Either e)"},{"library":"purescript-either","name":"showEither","module":"Data.Either","detail":"instance showEither :: (Show a, Show b) =\u003e Show (Either a b)"},{"library":"purescript-either","name":"eqEither","module":"Data.Either","detail":"instance eqEither :: (Eq a, Eq b) =\u003e Eq (Either a b)"},{"library":"purescript-either","name":"ordEither","module":"Data.Either","detail":"instance ordEither :: (Ord a, Ord b) =\u003e Ord (Either a b)"},{"library":"purescript-either","name":"choice2","module":"Data.Either.Nested","detail":"choice2 :: forall a b z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e Either a b -\u003e z"},{"library":"purescript-either","name":"choice3","module":"Data.Either.Nested","detail":"choice3 :: forall a b c z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e (c -\u003e z) -\u003e Either a (Either b c) -\u003e z"},{"library":"purescript-either","name":"choice4","module":"Data.Either.Nested","detail":"choice4 :: forall a b c d z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e (c -\u003e z) -\u003e (d -\u003e z) -\u003e Either a (Either b (Either c d)) -\u003e z"},{"library":"purescript-either","name":"choice5","module":"Data.Either.Nested","detail":"choice5 :: forall a b c d e z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e (c -\u003e z) -\u003e (d -\u003e z) -\u003e (e -\u003e z) -\u003e Either a (Either b (Either c (Either d e))) -\u003e z"},{"library":"purescript-either","name":"choice6","module":"Data.Either.Nested","detail":"choice6 :: forall a b c d e f z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e (c -\u003e z) -\u003e (d -\u003e z) -\u003e (e -\u003e z) -\u003e (f -\u003e z) -\u003e Either a (Either b (Either c (Either d (Either e f)))) -\u003e z"},{"library":"purescript-either","name":"choice7","module":"Data.Either.Nested","detail":"choice7 :: forall a b c d e f g z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e (c -\u003e z) -\u003e (d -\u003e z) -\u003e (e -\u003e z) -\u003e (f -\u003e z) -\u003e (g -\u003e z) -\u003e Either a (Either b (Either c (Either d (Either e (Either f g))))) -\u003e z"},{"library":"purescript-either","name":"choice8","module":"Data.Either.Nested","detail":"choice8 :: forall a b c d e f g h z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e (c -\u003e z) -\u003e (d -\u003e z) -\u003e (e -\u003e z) -\u003e (f -\u003e z) -\u003e (g -\u003e z) -\u003e (h -\u003e z) -\u003e Either a (Either b (Either c (Either d (Either e (Either f (Either g h)))))) -\u003e z"},{"library":"purescript-either","name":"choice9","module":"Data.Either.Nested","detail":"choice9 :: forall a b c d e f g h i z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e (c -\u003e z) -\u003e (d -\u003e z) -\u003e (e -\u003e z) -\u003e (f -\u003e z) -\u003e (g -\u003e z) -\u003e (h -\u003e z) -\u003e (i -\u003e z) -\u003e Either a (Either b (Either c (Either d (Either e (Either f (Either g (Either h i))))))) -\u003e z"},{"library":"purescript-either","name":"choice10","module":"Data.Either.Nested","detail":"choice10 :: forall a b c d e f g h i j z. (a -\u003e z) -\u003e (b -\u003e z) -\u003e (c -\u003e z) -\u003e (d -\u003e z) -\u003e (e -\u003e z) -\u003e (f -\u003e z) -\u003e (g -\u003e z) -\u003e (h -\u003e z) -\u003e (i -\u003e z) -\u003e (j -\u003e z) -\u003e Either a (Either b (Either c (Either d (Either e (Either f (Either g (Either h (Either i j)))))))) -\u003e z"},{"library":"purescript-profunctors","name":"Profunctor","module":"Data.Profunctor","detail":"class Profunctor p where"},{"library":"purescript-profunctors","name":"dimap","module":"Data.Profunctor","detail":"dimap :: forall a b c d. (a -\u003e b) -\u003e (c -\u003e d) -\u003e p b c -\u003e p a d"},{"library":"purescript-profunctors","name":"lmap","module":"Data.Profunctor","detail":"lmap :: forall a b c p. (Profunctor p) =\u003e (a -\u003e b) -\u003e p b c -\u003e p a c"},{"library":"purescript-profunctors","name":"rmap","module":"Data.Profunctor","detail":"rmap :: forall a b c p. (Profunctor p) =\u003e (b -\u003e c) -\u003e p a b -\u003e p a c"},{"library":"purescript-profunctors","name":"profunctorArr","module":"Data.Profunctor","detail":"instance profunctorArr :: Profunctor Prim.Function"},{"library":"purescript-contravariant","name":"Contravariant","module":"Data.Contravariant","detail":"class Contravariant f where"},{"library":"purescript-contravariant","name":"(\u003e$\u003c)","module":"Data.Contravariant","detail":"(\u003e$\u003c) :: forall a b. (b -\u003e a) -\u003e f a -\u003e f b"},{"library":"purescript-const","name":"Const","module":"Data.Const","detail":"newtype Const a b = Const a"},{"library":"purescript-const","name":"Const","module":"Data.Const","detail":"newtype Const a b = Const a"},{"library":"purescript-const","name":"getConst","module":"Data.Const","detail":"getConst :: forall a b. Const a b -\u003e a"},{"library":"purescript-const","name":"eqConst","module":"Data.Const","detail":"instance eqConst :: (Eq a) =\u003e Eq (Const a b)"},{"library":"purescript-const","name":"ordConst","module":"Data.Const","detail":"instance ordConst :: (Ord a) =\u003e Ord (Const a b)"},{"library":"purescript-const","name":"showConst","module":"Data.Const","detail":"instance showConst :: (Show a) =\u003e Show (Const a b)"},{"library":"purescript-const","name":"semigroupoidConst","module":"Data.Const","detail":"instance semigroupoidConst :: Semigroupoid Const"},{"library":"purescript-const","name":"semigroupConst","module":"Data.Const","detail":"instance semigroupConst :: (Semigroup a) =\u003e Semigroup (Const a b)"},{"library":"purescript-const","name":"monoidConst","module":"Data.Const","detail":"instance monoidConst :: (Monoid a) =\u003e Monoid (Const a b)"},{"library":"purescript-const","name":"functorConst","module":"Data.Const","detail":"instance functorConst :: Functor (Const a)"},{"library":"purescript-const","name":"applyConst","module":"Data.Const","detail":"instance applyConst :: (Semigroup a) =\u003e Apply (Const a)"},{"library":"purescript-const","name":"bindConst","module":"Data.Const","detail":"instance bindConst :: (Semigroup a) =\u003e Bind (Const a)"},{"library":"purescript-const","name":"applicativeConst","module":"Data.Const","detail":"instance applicativeConst :: (Monoid a) =\u003e Applicative (Const a)"},{"library":"purescript-const","name":"contravariantConst","module":"Data.Const","detail":"instance contravariantConst :: Contravariant (Const a)"},{"library":"purescript-const","name":"foldableConst","module":"Data.Const","detail":"instance foldableConst :: Foldable (Const a)"},{"library":"purescript-const","name":"traversableConst","module":"Data.Const","detail":"instance traversableConst :: Traversable (Const a)"},{"library":"purescript-graphs","name":"Edge","module":"Data.Graph","detail":"data Edge k = Edge k k"},{"library":"purescript-graphs","name":"Edge","module":"Data.Graph","detail":"data Edge k = Edge k k"},{"library":"purescript-graphs","name":"Graph","module":"Data.Graph","detail":"data Graph k v = Graph [v] [Edge k]"},{"library":"purescript-graphs","name":"Graph","module":"Data.Graph","detail":"data Graph k v = Graph [v] [Edge k]"},{"library":"purescript-graphs","name":"Index","module":"Data.Graph","detail":"type Index  = Number"},{"library":"purescript-graphs","name":"SCC","module":"Data.Graph","detail":"data SCC v = AcyclicSCC v | CyclicSCC [v]"},{"library":"purescript-graphs","name":"AcyclicSCC","module":"Data.Graph","detail":"data SCC v = AcyclicSCC v | CyclicSCC [v]"},{"library":"purescript-graphs","name":"CyclicSCC","module":"Data.Graph","detail":"data SCC v = AcyclicSCC v | CyclicSCC [v]"},{"library":"purescript-graphs","name":"showSCC","module":"Data.Graph","detail":"instance showSCC :: (Show v) =\u003e Show (SCC v)"},{"library":"purescript-graphs","name":"eqSCC","module":"Data.Graph","detail":"instance eqSCC :: (Eq v) =\u003e Eq (SCC v)"},{"library":"purescript-graphs","name":"vertices","module":"Data.Graph","detail":"vertices :: forall v. SCC v -\u003e [v]"},{"library":"purescript-graphs","name":"scc","module":"Data.Graph","detail":"scc :: forall v. (Eq v, Ord v) =\u003e Graph v v -\u003e [SCC v]"},{"library":"purescript-graphs","name":"scc'","module":"Data.Graph","detail":"scc' :: forall k v. (Eq k, Ord k) =\u003e (v -\u003e k) -\u003e (k -\u003e v) -\u003e Graph k v -\u003e [SCC v]"},{"library":"purescript-graphs","name":"popUntil","module":"Data.Graph","detail":"popUntil :: forall k v. (Eq k) =\u003e (v -\u003e k) -\u003e v -\u003e [v] -\u003e [v] -\u003e { component :: [v], path :: [v] }"},{"library":"purescript-graphs","name":"maybeMin","module":"Data.Graph","detail":"maybeMin :: Index -\u003e Maybe Index -\u003e Maybe Index"},{"library":"purescript-graphs","name":"topSort","module":"Data.Graph","detail":"topSort :: forall v. (Eq v, Ord v) =\u003e Graph v v -\u003e [v]"},{"library":"purescript-graphs","name":"topSort'","module":"Data.Graph","detail":"topSort' :: forall k v. (Eq k, Ord k) =\u003e (v -\u003e k) -\u003e (k -\u003e v) -\u003e Graph k v -\u003e [v]"},{"library":"purescript-maybe","name":"Maybe","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"library":"purescript-maybe","name":"Nothing","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"library":"purescript-maybe","name":"Just","module":"Data.Maybe","detail":"data Maybe a = Nothing | Just a"},{"library":"purescript-maybe","name":"maybe","module":"Data.Maybe","detail":"maybe :: forall a b. b -\u003e (a -\u003e b) -\u003e Maybe a -\u003e b"},{"library":"purescript-maybe","name":"fromMaybe","module":"Data.Maybe","detail":"fromMaybe :: forall a. a -\u003e Maybe a -\u003e a"},{"library":"purescript-maybe","name":"isJust","module":"Data.Maybe","detail":"isJust :: forall a. Maybe a -\u003e Boolean"},{"library":"purescript-maybe","name":"isNothing","module":"Data.Maybe","detail":"isNothing :: forall a. Maybe a -\u003e Boolean"},{"library":"purescript-maybe","name":"functorMaybe","module":"Data.Maybe","detail":"instance functorMaybe :: Functor Maybe"},{"library":"purescript-maybe","name":"applyMaybe","module":"Data.Maybe","detail":"instance applyMaybe :: Apply Maybe"},{"library":"purescript-maybe","name":"applicativeMaybe","module":"Data.Maybe","detail":"instance applicativeMaybe :: Applicative Maybe"},{"library":"purescript-maybe","name":"altMaybe","module":"Data.Maybe","detail":"instance altMaybe :: Alt Maybe"},{"library":"purescript-maybe","name":"plusMaybe","module":"Data.Maybe","detail":"instance plusMaybe :: Plus Maybe"},{"library":"purescript-maybe","name":"alternativeMaybe","module":"Data.Maybe","detail":"instance alternativeMaybe :: Alternative Maybe"},{"library":"purescript-maybe","name":"bindMaybe","module":"Data.Maybe","detail":"instance bindMaybe :: Bind Maybe"},{"library":"purescript-maybe","name":"monadMaybe","module":"Data.Maybe","detail":"instance monadMaybe :: Monad Maybe"},{"library":"purescript-maybe","name":"monadPlusMaybe","module":"Data.Maybe","detail":"instance monadPlusMaybe :: MonadPlus Maybe"},{"library":"purescript-maybe","name":"extendMaybe","module":"Data.Maybe","detail":"instance extendMaybe :: Extend Maybe"},{"library":"purescript-maybe","name":"semigroupMaybe","module":"Data.Maybe","detail":"instance semigroupMaybe :: (Semigroup a) =\u003e Semigroup (Maybe a)"},{"library":"purescript-maybe","name":"showMaybe","module":"Data.Maybe","detail":"instance showMaybe :: (Show a) =\u003e Show (Maybe a)"},{"library":"purescript-maybe","name":"eqMaybe","module":"Data.Maybe","detail":"instance eqMaybe :: (Eq a) =\u003e Eq (Maybe a)"},{"library":"purescript-maybe","name":"ordMaybe","module":"Data.Maybe","detail":"instance ordMaybe :: (Ord a) =\u003e Ord (Maybe a)"},{"library":"purescript-maybe","name":"fromJust","module":"Data.Maybe.Unsafe","detail":"fromJust :: forall a. Maybe a -\u003e a"},{"library":"purescript-validation","name":"V","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"library":"purescript-validation","name":"Invalid","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"library":"purescript-validation","name":"Valid","module":"Data.Validation","detail":"data V err result = Invalid err | Valid result"},{"library":"purescript-validation","name":"invalid","module":"Data.Validation","detail":"invalid :: forall err result. err -\u003e V err result"},{"library":"purescript-validation","name":"runV","module":"Data.Validation","detail":"runV :: forall err result r. (err -\u003e r) -\u003e (result -\u003e r) -\u003e V err result -\u003e r"},{"library":"purescript-validation","name":"isValid","module":"Data.Validation","detail":"isValid :: forall err result r. V err result -\u003e Boolean"},{"library":"purescript-validation","name":"showV","module":"Data.Validation","detail":"instance showV :: (Show err, Show result) =\u003e Show (V err result)"},{"library":"purescript-validation","name":"functorV","module":"Data.Validation","detail":"instance functorV :: Functor (V err)"},{"library":"purescript-validation","name":"applyV","module":"Data.Validation","detail":"instance applyV :: (Semigroup err) =\u003e Apply (V err)"},{"library":"purescript-validation","name":"applicativeV","module":"Data.Validation","detail":"instance applicativeV :: (Semigroup err) =\u003e Applicative (V err)"},{"library":"purescript-random","name":"Random","module":"Control.Monad.Eff.Random","detail":"data Random :: !"},{"library":"purescript-random","name":"random","module":"Control.Monad.Eff.Random","detail":"random :: forall e. Eff (random :: Random | e) Number"},{"library":"purescript-math","name":"Radians","module":"Math","detail":"type Radians  = Number"},{"library":"purescript-math","name":"abs","module":"Math","detail":"abs :: Number -\u003e Number"},{"library":"purescript-math","name":"acos","module":"Math","detail":"acos :: Number -\u003e Radians"},{"library":"purescript-math","name":"asin","module":"Math","detail":"asin :: Number -\u003e Radians"},{"library":"purescript-math","name":"atan","module":"Math","detail":"atan :: Number -\u003e Radians"},{"library":"purescript-math","name":"atan2","module":"Math","detail":"atan2 :: Number -\u003e Number -\u003e Radians"},{"library":"purescript-math","name":"ceil","module":"Math","detail":"ceil :: Number -\u003e Number"},{"library":"purescript-math","name":"cos","module":"Math","detail":"cos :: Radians -\u003e Number"},{"library":"purescript-math","name":"exp","module":"Math","detail":"exp :: Number -\u003e Number"},{"library":"purescript-math","name":"floor","module":"Math","detail":"floor :: Number -\u003e Number"},{"library":"purescript-math","name":"log","module":"Math","detail":"log :: Number -\u003e Number"},{"library":"purescript-math","name":"max","module":"Math","detail":"max :: Number -\u003e Number -\u003e Number"},{"library":"purescript-math","name":"min","module":"Math","detail":"min :: Number -\u003e Number -\u003e Number"},{"library":"purescript-math","name":"pow","module":"Math","detail":"pow :: Number -\u003e Number -\u003e Number"},{"library":"purescript-math","name":"round","module":"Math","detail":"round :: Number -\u003e Number"},{"library":"purescript-math","name":"sin","module":"Math","detail":"sin :: Radians -\u003e Number"},{"library":"purescript-math","name":"sqrt","module":"Math","detail":"sqrt :: Number -\u003e Number"},{"library":"purescript-math","name":"tan","module":"Math","detail":"tan :: Radians -\u003e Number"},{"library":"purescript-math","name":"e","module":"Math","detail":"e :: Number"},{"library":"purescript-math","name":"ln2","module":"Math","detail":"ln2 :: Number"},{"library":"purescript-math","name":"ln10","module":"Math","detail":"ln10 :: Number"},{"library":"purescript-math","name":"log2e","module":"Math","detail":"log2e :: Number"},{"library":"purescript-math","name":"log10e","module":"Math","detail":"log10e :: Number"},{"library":"purescript-math","name":"pi","module":"Math","detail":"pi :: Number"},{"library":"purescript-math","name":"sqrt1_2","module":"Math","detail":"sqrt1_2 :: Number"},{"library":"purescript-math","name":"sqrt2","module":"Math","detail":"sqrt2 :: Number"},{"library":"purescript-canvas","name":"Canvas","module":"Graphics.Canvas","detail":"data Canvas :: !"},{"library":"purescript-canvas","name":"CanvasElement","module":"Graphics.Canvas","detail":"data CanvasElement :: *"},{"library":"purescript-canvas","name":"Context2D","module":"Graphics.Canvas","detail":"data Context2D :: *"},{"library":"purescript-canvas","name":"ImageData","module":"Graphics.Canvas","detail":"data ImageData :: *"},{"library":"purescript-canvas","name":"CanvasPixelArray","module":"Graphics.Canvas","detail":"data CanvasPixelArray :: *"},{"library":"purescript-canvas","name":"getCanvasElementByIdImpl","module":"Graphics.Canvas","detail":"getCanvasElementByIdImpl :: forall a eff. Fn3 String (a -\u003e Maybe a) (Maybe a) (Eff (canvas :: Canvas | eff) (Maybe CanvasElement))"},{"library":"purescript-canvas","name":"getCanvasElementById","module":"Graphics.Canvas","detail":"getCanvasElementById :: forall eff. String -\u003e Eff (canvas :: Canvas | eff) (Maybe CanvasElement)"},{"library":"purescript-canvas","name":"getContext2D","module":"Graphics.Canvas","detail":"getContext2D :: forall eff. CanvasElement -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"getCanvasWidth","module":"Graphics.Canvas","detail":"getCanvasWidth :: forall eff. CanvasElement -\u003e Eff (canvas :: Canvas | eff) Number"},{"library":"purescript-canvas","name":"getCanvasHeight","module":"Graphics.Canvas","detail":"getCanvasHeight :: forall eff. CanvasElement -\u003e Eff (canvas :: Canvas | eff) Number"},{"library":"purescript-canvas","name":"setCanvasWidth","module":"Graphics.Canvas","detail":"setCanvasWidth :: forall eff. Number -\u003e CanvasElement -\u003e Eff (canvas :: Canvas | eff) CanvasElement"},{"library":"purescript-canvas","name":"setCanvasHeight","module":"Graphics.Canvas","detail":"setCanvasHeight :: forall eff. Number -\u003e CanvasElement -\u003e Eff (canvas :: Canvas | eff) CanvasElement"},{"library":"purescript-canvas","name":"Dimensions","module":"Graphics.Canvas","detail":"type Dimensions  = { height :: Number, width :: Number }"},{"library":"purescript-canvas","name":"getCanvasDimensions","module":"Graphics.Canvas","detail":"getCanvasDimensions :: forall eff. CanvasElement -\u003e Eff (canvas :: Canvas | eff) Dimensions"},{"library":"purescript-canvas","name":"setCanvasDimensions","module":"Graphics.Canvas","detail":"setCanvasDimensions :: forall eff. Dimensions -\u003e CanvasElement -\u003e Eff (canvas :: Canvas | eff) CanvasElement"},{"library":"purescript-canvas","name":"canvasToDataURL","module":"Graphics.Canvas","detail":"canvasToDataURL :: forall eff. CanvasElement -\u003e Eff (canvas :: Canvas | eff) String"},{"library":"purescript-canvas","name":"setLineWidth","module":"Graphics.Canvas","detail":"setLineWidth :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setFillStyle","module":"Graphics.Canvas","detail":"setFillStyle :: forall eff. String -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setStrokeStyle","module":"Graphics.Canvas","detail":"setStrokeStyle :: forall eff. String -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setShadowColor","module":"Graphics.Canvas","detail":"setShadowColor :: forall eff. String -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setShadowBlur","module":"Graphics.Canvas","detail":"setShadowBlur :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setShadowOffsetX","module":"Graphics.Canvas","detail":"setShadowOffsetX :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setShadowOffsetY","module":"Graphics.Canvas","detail":"setShadowOffsetY :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"LineCap","module":"Graphics.Canvas","detail":"data LineCap = Round | Square | Butt"},{"library":"purescript-canvas","name":"Round","module":"Graphics.Canvas","detail":"data LineCap = Round | Square | Butt"},{"library":"purescript-canvas","name":"Square","module":"Graphics.Canvas","detail":"data LineCap = Round | Square | Butt"},{"library":"purescript-canvas","name":"Butt","module":"Graphics.Canvas","detail":"data LineCap = Round | Square | Butt"},{"library":"purescript-canvas","name":"setLineCapImpl","module":"Graphics.Canvas","detail":"setLineCapImpl :: forall eff. String -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setLineCap","module":"Graphics.Canvas","detail":"setLineCap :: forall eff. LineCap -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"Composite","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"SourceOver","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"SourceIn","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"SourceOut","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"SourceAtop","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"DestinationOver","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"DestinationIn","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"DestinationOut","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"DestinationAtop","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"Lighter","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"Copy","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"Xor","module":"Graphics.Canvas","detail":"data Composite = SourceOver | SourceIn | SourceOut | SourceAtop | DestinationOver | DestinationIn | DestinationOut | DestinationAtop | Lighter | Copy | Xor"},{"library":"purescript-canvas","name":"showComposite","module":"Graphics.Canvas","detail":"instance showComposite :: Show Composite"},{"library":"purescript-canvas","name":"setGlobalCompositeOperationImpl","module":"Graphics.Canvas","detail":"setGlobalCompositeOperationImpl :: forall eff. Context2D -\u003e String -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setGlobalCompositeOperation","module":"Graphics.Canvas","detail":"setGlobalCompositeOperation :: forall eff. Context2D -\u003e Composite -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setGlobalAlpha","module":"Graphics.Canvas","detail":"setGlobalAlpha :: forall eff. Context2D -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"beginPath","module":"Graphics.Canvas","detail":"beginPath :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"stroke","module":"Graphics.Canvas","detail":"stroke :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"fill","module":"Graphics.Canvas","detail":"fill :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"clip","module":"Graphics.Canvas","detail":"clip :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"lineTo","module":"Graphics.Canvas","detail":"lineTo :: forall eff. Context2D -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"moveTo","module":"Graphics.Canvas","detail":"moveTo :: forall eff. Context2D -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"closePath","module":"Graphics.Canvas","detail":"closePath :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"strokePath","module":"Graphics.Canvas","detail":"strokePath :: forall eff a. Context2D -\u003e Eff (canvas :: Canvas | eff) a -\u003e Eff (canvas :: Canvas | eff) a"},{"library":"purescript-canvas","name":"fillPath","module":"Graphics.Canvas","detail":"fillPath :: forall eff a. Context2D -\u003e Eff (canvas :: Canvas | eff) a -\u003e Eff (canvas :: Canvas | eff) a"},{"library":"purescript-canvas","name":"Arc","module":"Graphics.Canvas","detail":"type Arc  = { end :: Number, start :: Number, r :: Number, y :: Number, x :: Number }"},{"library":"purescript-canvas","name":"arc","module":"Graphics.Canvas","detail":"arc :: forall eff. Context2D -\u003e Arc -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"Rectangle","module":"Graphics.Canvas","detail":"type Rectangle  = { h :: Number, w :: Number, y :: Number, x :: Number }"},{"library":"purescript-canvas","name":"rect","module":"Graphics.Canvas","detail":"rect :: forall eff. Context2D -\u003e Rectangle -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"fillRect","module":"Graphics.Canvas","detail":"fillRect :: forall eff. Context2D -\u003e Rectangle -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"strokeRect","module":"Graphics.Canvas","detail":"strokeRect :: forall eff. Context2D -\u003e Rectangle -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"clearRect","module":"Graphics.Canvas","detail":"clearRect :: forall eff. Context2D -\u003e Rectangle -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"ScaleTransform","module":"Graphics.Canvas","detail":"type ScaleTransform  = { scaleY :: Number, scaleX :: Number }"},{"library":"purescript-canvas","name":"scale","module":"Graphics.Canvas","detail":"scale :: forall eff. ScaleTransform -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"rotate","module":"Graphics.Canvas","detail":"rotate :: forall eff. Number -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"TranslateTransform","module":"Graphics.Canvas","detail":"type TranslateTransform  = { translateY :: Number, translateX :: Number }"},{"library":"purescript-canvas","name":"translate","module":"Graphics.Canvas","detail":"translate :: forall eff. TranslateTransform -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"Transform","module":"Graphics.Canvas","detail":"type Transform  = { m32 :: Number, m31 :: Number, m22 :: Number, m21 :: Number, m12 :: Number, m11 :: Number }"},{"library":"purescript-canvas","name":"transform","module":"Graphics.Canvas","detail":"transform :: forall eff. Transform -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"TextAlign","module":"Graphics.Canvas","detail":"data TextAlign = AlignLeft | AlignRight | AlignCenter | AlignStart | AlignEnd"},{"library":"purescript-canvas","name":"AlignLeft","module":"Graphics.Canvas","detail":"data TextAlign = AlignLeft | AlignRight | AlignCenter | AlignStart | AlignEnd"},{"library":"purescript-canvas","name":"AlignRight","module":"Graphics.Canvas","detail":"data TextAlign = AlignLeft | AlignRight | AlignCenter | AlignStart | AlignEnd"},{"library":"purescript-canvas","name":"AlignCenter","module":"Graphics.Canvas","detail":"data TextAlign = AlignLeft | AlignRight | AlignCenter | AlignStart | AlignEnd"},{"library":"purescript-canvas","name":"AlignStart","module":"Graphics.Canvas","detail":"data TextAlign = AlignLeft | AlignRight | AlignCenter | AlignStart | AlignEnd"},{"library":"purescript-canvas","name":"AlignEnd","module":"Graphics.Canvas","detail":"data TextAlign = AlignLeft | AlignRight | AlignCenter | AlignStart | AlignEnd"},{"library":"purescript-canvas","name":"showTextAlign","module":"Graphics.Canvas","detail":"instance showTextAlign :: Show TextAlign"},{"library":"purescript-canvas","name":"unsafeParseTextAlign","module":"Graphics.Canvas","detail":"unsafeParseTextAlign :: String -\u003e TextAlign"},{"library":"purescript-canvas","name":"textAlign","module":"Graphics.Canvas","detail":"textAlign :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) TextAlign"},{"library":"purescript-canvas","name":"setTextAlignImpl","module":"Graphics.Canvas","detail":"setTextAlignImpl :: forall eff. Context2D -\u003e String -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"setTextAlign","module":"Graphics.Canvas","detail":"setTextAlign :: forall eff. Context2D -\u003e TextAlign -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"TextMetrics","module":"Graphics.Canvas","detail":"type TextMetrics  = { width :: Number }"},{"library":"purescript-canvas","name":"font","module":"Graphics.Canvas","detail":"font :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) String"},{"library":"purescript-canvas","name":"setFont","module":"Graphics.Canvas","detail":"setFont :: forall eff. String -\u003e Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"fillText","module":"Graphics.Canvas","detail":"fillText :: forall eff. Context2D -\u003e String -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"strokeText","module":"Graphics.Canvas","detail":"strokeText :: forall eff. Context2D -\u003e String -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"measureText","module":"Graphics.Canvas","detail":"measureText :: forall eff. Context2D -\u003e String -\u003e Eff (canvas :: Canvas | eff) TextMetrics"},{"library":"purescript-canvas","name":"save","module":"Graphics.Canvas","detail":"save :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"restore","module":"Graphics.Canvas","detail":"restore :: forall eff. Context2D -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"withContext","module":"Graphics.Canvas","detail":"withContext :: forall eff a. Context2D -\u003e Eff (canvas :: Canvas | eff) a -\u003e Eff (canvas :: Canvas | eff) a"},{"library":"purescript-canvas","name":"getImageData","module":"Graphics.Canvas","detail":"getImageData :: forall eff. Context2D -\u003e Number -\u003e Number -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) ImageData"},{"library":"purescript-canvas","name":"putImageDataFull","module":"Graphics.Canvas","detail":"putImageDataFull :: forall eff. Context2D -\u003e ImageData -\u003e Number -\u003e Number -\u003e Number -\u003e Number -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"putImageData","module":"Graphics.Canvas","detail":"putImageData :: forall eff. Context2D -\u003e ImageData -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) Context2D"},{"library":"purescript-canvas","name":"createImageData","module":"Graphics.Canvas","detail":"createImageData :: forall eff. Context2D -\u003e Number -\u003e Number -\u003e Eff (canvas :: Canvas | eff) ImageData"},{"library":"purescript-canvas","name":"createImageDataCopy","module":"Graphics.Canvas","detail":"createImageDataCopy :: forall eff. Context2D -\u003e ImageData -\u003e Eff (canvas :: Canvas | eff) ImageData"},{"library":"purescript-canvas","name":"getImageDataWidth","module":"Graphics.Canvas","detail":"getImageDataWidth :: forall eff. ImageData -\u003e Eff (canvas :: Canvas | eff) Number"},{"library":"purescript-canvas","name":"getImageDataHeight","module":"Graphics.Canvas","detail":"getImageDataHeight :: forall eff. ImageData -\u003e Eff (canvas :: Canvas | eff) Number"},{"library":"purescript-canvas","name":"getImageDataPixelArray","module":"Graphics.Canvas","detail":"getImageDataPixelArray :: forall eff. ImageData -\u003e Eff (canvas :: Canvas | eff) CanvasPixelArray"},{"library":"purescript-virtual-dom","name":"PatchObject","module":"VirtualDOM","detail":"data PatchObject :: *"},{"library":"purescript-virtual-dom","name":"showPatchObjectImpl","module":"VirtualDOM","detail":"showPatchObjectImpl :: PatchObject -\u003e String"},{"library":"purescript-virtual-dom","name":"showPatchObject","module":"VirtualDOM","detail":"instance showPatchObject :: Show PatchObject"},{"library":"purescript-virtual-dom","name":"createElement","module":"VirtualDOM","detail":"createElement :: VTree -\u003e Node"},{"library":"purescript-virtual-dom","name":"diff'","module":"VirtualDOM","detail":"diff' :: Fn2 VTree VTree PatchObject"},{"library":"purescript-virtual-dom","name":"diff","module":"VirtualDOM","detail":"diff :: VTree -\u003e VTree -\u003e PatchObject"},{"library":"purescript-virtual-dom","name":"patch'","module":"VirtualDOM","detail":"patch' :: Fn2 Node PatchObject Node"},{"library":"purescript-virtual-dom","name":"patch","module":"VirtualDOM","detail":"patch :: forall e. PatchObject -\u003e Node -\u003e Eff (dom :: DOM | e) Node"},{"library":"purescript-virtual-dom","name":"mkEff","module":"VirtualDOM","detail":"mkEff :: forall eff a. (Unit -\u003e a) -\u003e Eff eff a"},{"library":"purescript-virtual-dom","name":"VTree","module":"VirtualDOM.VTree","detail":"data VTree :: *"},{"library":"purescript-virtual-dom","name":"showVTreeImpl","module":"VirtualDOM.VTree","detail":"showVTreeImpl :: VTree -\u003e String"},{"library":"purescript-virtual-dom","name":"showVTree","module":"VirtualDOM.VTree","detail":"instance showVTree :: Show VTree"},{"library":"purescript-virtual-dom","name":"TagName","module":"VirtualDOM.VTree","detail":"type TagName  = String"},{"library":"purescript-virtual-dom","name":"vnode'","module":"VirtualDOM.VTree","detail":"vnode' :: forall props. Fn3 TagName {  | props } [VTree] VTree"},{"library":"purescript-virtual-dom","name":"vnode","module":"VirtualDOM.VTree","detail":"vnode :: forall props. TagName -\u003e {  | props } -\u003e [VTree] -\u003e VTree"},{"library":"purescript-virtual-dom","name":"vtext","module":"VirtualDOM.VTree","detail":"vtext :: String -\u003e VTree"}],"libraries":{"purescript-free":{"version":"0.1.6"},"purescript-exceptions":{"version":"0.2.2"},"purescript-maps":{"version":"0.1.5"},"purescript-control":{"version":"0.2.1"},"purescript-either":{"version":"0.1.4"},"purescript-arrays":{"version":"0.3.0"},"purescript-virtual-dom":{"version":"0.2.0"},"purescript-maybe":{"version":"0.2.1"},"purescript-exists":{"version":"0.1.0"},"purescript-distributive":{"version":"0.2.0"},"purescript-lazy":{"version":"0.1.2"},"purescript-monoid":{"version":"0.1.5"},"purescript-foldable-traversable":{"version":"0.2.1"},"purescript-graphs":{"version":"0.1.0"},"purescript-bifunctors":{"version":"0.0.6"},"purescript-contravariant":{"version":"0.0.1"},"purescript-refs":{"version":"0.1.2"},"purescript-const":{"version":"0.1.1"},"PureScript":{"version":"0.1.0.0"},"purescript-transformers":{"version":"0.3.2"},"purescript-globals":{"version":"0.1.5"},"purescript-canvas":{"version":"0.2.0"},"purescript-math":{"version":"0.1.0"},"purescript-enums":{"version":"0.3.0"},"purescript-validation":{"version":"0.0.3"},"purescript-random":{"version":"0.1.1"},"purescript-tuples":{"version":"0.2.3"},"purescript-quickcheck":{"version":"0.3.2"},"purescript-strings":{"version":"0.4.2"},"purescript-identity":{"version":"0.1.0"},"purescript-foreign":{"version":"0.2.3"},"purescript-sets":{"version":"0.1.1"},"purescript-profunctors":{"version":"0.0.1"}}}
